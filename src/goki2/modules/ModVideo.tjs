/*
 * $Author$
 * $Revision$
**/


/**/
class VideoBuffers extends GVideoIterator
{
	/**/
	function VideoBuffers(window, contents)
	{
		super.GVideoIterator(...);
	}

	/**/
	property prefix
	{
		getter		{ return "vb"; }
	}
}


/**/
class ModVideo extends GModule
{
	var dispatcher_;

	var videoContainer_;

	var videoBuffers_;

	var holdPeriodEventQueue = [];
	var isLeavePeriodEvent = false;
	var isWaitPeriodEvent = false;
	var waitedPeriodEventStorageName = void;

	/**/
	function ModVideo(holder, name)
	{
		super.GModule(...);

		dispatcher_ = new GDispatcher();

		videoContainer_ = createVideoContainer(window);

		videoBuffers_ = createVideoBuffers(window);
		videoBuffers_.onVideoEvent = onVideoEvent;
	}

	/**/
	function finalize()
	{
		invalidate videoBuffers_;
		invalidate videoContainer_;

		invalidate dispatcher_;

		super.finalize(...);
	}

	/**/
	function createVideoContainer(window)
	{
		return new GVideoContainer(window);
	}

	/**/
	function createVideoBuffers(window)
	{
		return new VideoBuffers(window);
	}

	/**/
	function createExtensionTagHandlers()
	{
		return %[

			/* @video_buffers */
			'video_buffers' => function (elm) {
				videoBuffers_.count = +elm.count if elm.count !== void;
			} incontextof this,

			/* @video */
			'video' => function (elm) {
				with(videoBuffers_.at(+elm.slot))
				{
					if(elm.left !== void || elm.top !== void || elm.width !== void || elm.height !== void)
					{
						var l = (elm.left === void ? buf.left : +elm.left);
						var t = (elm.top === void ? buf.top : +elm.top);
						var w = (elm.width === void ? buf.width : +elm.width);
						var h = (elm.height === void ? buf.height : +elm.height);
						.setBounds(l, t, w, h);
					}
					.position = +elm.position if elm.position !== void;
					.loop = +elm.loop if elm.loop !== void;
					.frame = +elm.frame if elm.frame !== void;
					if(elm.mode !== void)
					{
						switch(elm.mode)
						{
						case "layer":	.mode = vomLayer; break;
						case "mixer":	.mode = vomMixer; break;
						default:		.mode = vomOverlay; break;
						}
					}
					.playRate = +elm.play_rate if elm.play_rate !== void;
					.audioVolume = +elm.volume * 1000 if elm.volume !== void;
					.audioBalance = +elm.pan * 1000 if elm.pan !== void;
					.selectAudioStream(+elm.audio_stream_number) if elm.audio_stream_number !== void;
					.visible = +elm.visible if elm.visible !== void;
				}
			} incontextof this,

			/* @set_video_layer */
			'set_video_layer' => function (elm) {
				with(videoBuffers_.at(+elm.slot))
				{
					if(container.isLoaded('modImage'))
					{
						if(elm.channel == 1)
						{
							.layerElm1 = GObjectUtils.clone(elm);
							.layer1 = container.modImage.findByElm(elm);
							.mode = vomLayer;
						}
						else
						if(elm.channel == 2)
						{
							.layerElm2 = GObjectUtils.clone(elm);
							.layer2 = container.modImage.findByElm(elm);
							.mode = vomLayer;
						}
					}
				}
			} incontextof this,

			/* @clear_video_layer */
			'clear_video_layer' => function (elm) {
				with(videoBuffers_.at(+elm.slot))
				{
					if(elm.channel == 1)
					{
						.layerElm1.layer = '';
						.layerElm1.page = '';
						.layer1 = null;
					}
					else
					if(elm.channel == 2)
					{
						.layerElm2.layer = '';
						.layerElm2.page = '';
						.layer2 = null;
					}
				}
			} incontextof this,

			/* @open_video */
			'open_video' => function (elm) {
				with(videoBuffers_.at(+elm.slot))
				{
					.open(elm.storage);
				}
			} incontextof this,

			/* @prepare_video */
			'prepare_video' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.prepare();
				}
			} incontextof this,

			/* @play_video */
			'play_video' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.play(elm.storage, GObjectUtils.toBoolean(elm, 'loop'));
				}
			} incontextof this,

			/* @rewind_video */
			'rewind_video' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.rewind();
				}
			} incontextof this,

			/* @pause_video */
			'pause_video' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.paused = true;
				}
			} incontextof this,

			/* @resume_video */
			'resume_video' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.paused = false;
				}
			} incontextof this,

			/* @set_video_event */
			'set_video_event' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.setPeriodEvent(+elm.frame);
				}
			} incontextof this,

			/* @set_video_segment_loop */
			'set_video_segment_loop' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					if(elm.start !== void && elm.end !== void)
						.setSegmentLoop(+elm.start, +elm.end);
				}
			} incontextof this,

			/* @wait_video */
			'wait_video' => function (elm, c) {
				var iterator = videoBuffers;
				with(iterator.at(+elm.slot))
				{
					//dm("playing : " + .playing);
					if(.canWaitStop)
					{
						var event = @"&.name;_video_end";
						dispatcher_.makeOneShot(event, c.signal, event);
						if(!GObjectUtils.toBoolean(elm, 'skip'))
							c.waitSignal(%[event => null]);
						else
						if(window.modules.isLoaded('ModMessage') && !window.modules.modMessage.longSkipping)
							c.waitSignal(%[left_click : .stop, event => null]);
						else
							.stop();
					}
				}
			} incontextof this,

			/* @stop_video */
			'stop_video' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.stop();
				}
			} incontextof this,

			/* @close_video */
			'close_video' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.close();
				}
			} incontextof this,

			/* @cancel_video_event */
			'cancel_video_event' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.cancelPeriodEvent();
				}
			} incontextof this,

			/* @cancel_video_segment_loop */
			'cancel_video_segment_loop' => function (elm) {
				with(videoBuffers.at(+elm.slot))
				{
					.cancelSegmentLoop();
				}
			} incontextof this,

			/* @wait_period_event */
			'wait_period_event' => waitPeriodEvent,

		];
	}

	/**/
	function waitPeriodEvent(elm, conductor)
	{
		isWaitPeriodEvent = true;
		waitedPeriodEventStorageName = conductor.curStorage;
		with(videoBuffers.at(+elm.slot))
		{
			if(holdPeriodEventQueue.count > 0)
			{
				var triggered = false;

				switch(elm.for)
				{
				case 'loop':
					for(var i = 0; i < holdPeriodEventQueue.count; i++)
					{
						triggerd = true if @"movie_period_&.name;_&perLoop;" == holdPeriodEventQueue[i];
						break;
					}
					break;

				case 'segLoop':
					for(var i = 0; i < holdPeriodEventQueue.count; i++)
					{
						triggerd = true if @"movie_period_&.name;_&perSegLoop;" == holdPeriodEventQueue[i];
						break;
					}
					break;

				case 'period':
					for(var i = 0; i < holdPeriodEventQueue.count; i++)
					{
						triggerd = true if @"movie_period_&.name;_&perPeriod;" == holdPeriodEventQueue[i];
						break;
					}
					break;

				case 'prepare':
					for(var i = 0; i < holdPeriodEventQueue.count; i++)
					{
						triggerd = true if @"movie_period_&.name;_&perPrepare;" == holdPeriodEventQueue[i];
						break;
					}
					break;

				default:			triggered = true; break;
				}
				holdPeriodEventQueue.clear();
				if(triggerd)
				{
					isWaitPeriodEvent = false;
					return 0;
				}
			}

			if(!.canWaitStop)
				return 0;

			var event = '';

			switch(elm.for)
			{
			case 'loop':		event = @"movie_period_&.name;_&perLoop;"; break;
			case 'segLoop':		event = @"movie_period_&.name;_&perSegLoop;"; break;
			case 'period':		event = @"movie_period_&.name;_&perPeriod;"; break;
			case 'prepare':		event = @"movie_period_&.name;_&perPrepare;"; break;
			}
			dispatcher_.makeOneShot(event, conductor.signal, event);
			conductor.waitSignal(%[event => null]);
		}
	}

	/**/
	function setAudioVolume_private_(buffer, volume)
	{
		buffer.audioVolume = volume;
	}

	/**/
	function stopBuffers_private_(buffer)
	{
		buffer.stop();
	}

	/**/
	function onSoundMasterVolumeChanged(volume, oldVolume)
	{
		// NOTE:
		// ビデオ音量の設定項目が存在しないので
		// マスターボリュームにあわせる形で問題ない。
		videoBuffers_.each(
			setAudioVolume_private_, volume
		);
	}

	/**/
	function onVideoEvent(obj, event, elm)
	{
		switch(event)
		{
		case 'onStatusChanged':
			if(elm.prev == 'play' && elm.now == 'stop')
				dispatcher_.signal(@"&obj.name;_video_end");
			break;

		case 'onPeriod':
			switch(elm.type)
			{
			case perLoop:
				if(isLeavePeriodEvent)
					holdPeriodEventQueue.push("movie_period_&obj.name;_&perLoop;");
				else
					dispatcher_.signal(@"movie_period_&obj.name;_&perLoop;");
				break;

			case perSegLoop:
				if(isLeavePeriodEvent)
					holdPeriodEventQueue.push("movie_period_&obj.name;_&perSegLoop;");
				else
					dispatcher_.signal(@"movie_period_&obj.name;_&perSegLoop;");
				break;

			case perPeriod:
				if(isLeavePeriodEvent)
					holdPeriodEventQueue.push("movie_period_&obj.name;_&perPeriod;");
				else
					dispatcher_.signal(@"movie_period_&obj.name;_&perPeriod;");
				break;

			case perPrepare:
				if(isLeavePeriodEvent)
					holdPeriodEventQueue.push("movie_period_&obj.name;_&perPrepare;");
				else
					dispatcher_.signal(@"movie_period_&obj.name;_&perPrepare;");
				break;
			}
			break;

		case 'onFrameUpdate':		break;

		case 'onSetLayer1':			obj.layer1 = container.modImage.findByElm(elm) if container.isLoaded('modImage'); break;
		case 'onSetLayer2':			obj.layer2 = container.modImage.findByElm(elm) if container.isLoaded('modImage'); break;
		}
	}

	/**/
	function onWindowClose()
	{
		videoBuffers_.each(stopBuffers_private_);
	}

	/**/
	property videoBuffers
	{
		getter		{ return videoBuffers_; }
	}
}


