/*
**/


/**/
class ModRightClick extends GModule
{
	var rightClickEnabled = true;
	var rightClickJump = false;
	var rightClickCall = false;
	var rightClickStorage = void;
	var rightClickTarget = void;

	var conductor_;

	function ModRightClick(container, name)
	{
		super.GModule(...);

		conductor_ = createConductor(window);
	}

	/**/
	function createConductor(window)
	{
		return new GConductor(window);
	}

	/**/
	function createExtensionTagHandlers()
	{
		return %[

			/* @right_click */
			'right_click' => function (elm) {
				rightClickEnabled = GObjectUtils.getBoolean(elm, 'enabled') if GObjectUtils.hasValue(elm, 'enabled');
				if(GObjectUtils.hasValue(elm, 'jump'))
				{
					rightClickJump = GObjectUtils.getBoolean(elm, 'jump');
					if(rightClickJump)
						rightClickCall = false;
				}
				if(GObjectUtils.hasValue(elm, 'call'))
				{
					rightClickCall = GObjectUtils.getBoolean(elm, 'call');
					if(rightClickCall)
						rightClickJump = false;
				}
				rightClickStorage = elm.storage if elm.storage !== void;
				rightClickTarget = elm.target if elm.target !== void;
			} incontextof this,

		];
	}

	/**/
	function callExtraConductor(storage, target)
	{
		var mod;

		if((mod = container.get('modVideo')) !== void)
		{
			mod.isLeavePeriodEvent = true;
		}

		GObjectUtils.assignDictionary(conductor_.macros, window.conductor.macros);
		window.exchangeConductor(conductor_);

		if(storage == void)
		{
			storage = window.mainConductor.curStorage;
		}

		window.conductor.callScenario(storage, target);
		window.conductor.resetInterrupt();
		window.conductor.start();
	}

	/**/
	function returnExtraConductor(storage, target)
	{
		conductor_.stop();
		conductor_.interrupt();

		window.resetConductor();

		if(storage !== void || target !== void)
		{
			window.conductor.jumpScenario(storage, target);
			window.conductor.start();
		}

		var mod;

		if(!window.conductor.running)
		{
			if((mod = container.get('modMessage')) !== void)
			{
				mod.restoreClickGlyphState();
			}
		}

		if((mod = container.get('modVideo')) !== void)
		{
			mod.isLeavePeriodEvent = false;

			if(storage !== void || target !== void)
			{
				mod.holdPeriodEventQueue.clear();
				mod.isWaitPeriodEvent = false;
			}

			if(mod.isWaitPeriodEvent)
			{
				mod.fireMoviePeriodFromQueue();
			}
		}
	}

	/**/
	function store(tick)
	{
		var dic = super.store(...);

		dic.rightClickEnabled = rightClickEnabled;
		dic.rightClickJump = rightClickJump;
		dic.rightClickCall = rightClickCall;
		dic.rightClickStorage = rightClickStorage;
		dic.rightClickTarget = rightClickTarget;

		return dic;
	}

	/**/
	function restore(dic, tick)
	{
		super.restore(...);

		rightClickEnabled = dic.rightClickEnabled;
		rightClickJump = dic.rightClickJump;
		rightClickCall = dic.rightClickCall;
		rightClickStorage = dic.rightClickStorage;
		rightClickTarget = dic.rightClickTarget;
	}

	/**/
	function onWindowRightClick(x, y, shift)
	{
		if(!rightClickEnabled)
			return;

		var mod;

		if(rightClickJump)
		{
			if((mod = container.get('modMessage')) !== void)
			{
				if(mod.current !== null)
				{
					mod.current.hidePageGlyph();
					mod.current.hideLineGlyph();
				}
			}

			window.conductor.jumpScenario(rightClickStorage, rightClickTarget);
			window.conductor.start();
		}
		else
		if(rightClickCall && window.conductor != conductor_)
		{
			if((mod = container.get('modMessage')) !== void)
			{
				if(mod.current !== null)
				{
					mod.current.hidePageGlyph();
					mod.current.hideLineGlyph();
				}
			}

			callExtraConductor(rightClickStorage, rightClickTarget);
		}
		else
		{
			if((mod = container.get('modMessage')) !== void)
				mod.switchMessageLayerHiddenByUser();
		}
	}

	/**/
	function onConductorReturn(elm)
	{
		if(window.conductor == conductor_)
		{
			if(conductor_.callStackDepth == 1)
			{
				returnExtraConductor(elm.storage, elm.target);

				if(elm.storage !== void || elm.target !== void)
				{
					conductor_.jumpScenario(elm.storage, elm.target);
				}
				elm.ignore = true;
			}
		}
	}
}


