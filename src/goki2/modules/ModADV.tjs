/**
 * $Author$
 * $Revision$
**/

/**/
class ModADV extends GModule
{
	var characterNames_ = [];
	var mobCharacterNames_ = [];
	var characters_ = %[];

	var cvLayerUsers_ = [];

	var topmostShownCGLayerIndex_ = -1;

	var timeZone_ = [];
	var currentTimeZone_ = -1;

	var stageNames_ = [];
	var stageContext_ = %[];

	var defaultCharacterName = '';

	var lastCharacterName_ = '';				// 最後に setCharacterImageByElm() で操作したキャラ名
	var activeCharacterName_ = '';				// 現在テキストを出力しているキャラ名
	var inNextChPlayVoice_ = false;
	var lastPlayedVoiceCharacterName_ = '';

	var transitionParameters_ = %[reserved : false];

	function ModADV(container, name, requiredModules = true)
	{
		super.GModule(...);

		if(requiredModules)
		{
			container.load('ModMessage');
			container.load('ModImage');
			container.load('ModSound');
		}

		with(container)
		{
			if(.modSound.systemSoundBuffers.count < 3)
				.modSound.systemSoundBuffers.count = 3;
			if(.modSound.voiceBuffers.count < 1)
				.modSound.voiceBuffers.count = 1;
			if(.modMessage.messageLayers.count < 1)
				.modMessage.messageLayers.count = 1;
			if(.modImage.cvLayers.count < 1)
				.modImage.cvLayers.count = 1;
		}
	}

	/**/
	function createExtensionTagHandlers()
	{
		return %[

			/* @using_mod_adv */
			'using_mod_adv' => usingModADV,

			/* @not_using_mod_adv */
			'not_using_mod_adv' => notUsingModADV,

			/* @make_character */
			'make_character' => makeCharacterByElm,

			/* @ch_mod_adv */
			'ch_mod_adv' => function (elm, c) {
				if(isTransitionReserved())
				{
					c.pendingTag('run_reserved_transition', elm);
					return 'break';
				}
				if(c.lastProcessedTag == 'r_mod_adv')
				{
					if(!container.modMessage.current.reline())
						c.pendingTag('p');
					c.pendingTag(elm);
					return;
				}
				if(activeCharacterName_ != lastCharacterName_)
				{
					c.pendingTag("activate_character", elm);
					return;
				}
				with(container.modMessage)
				{
					if(.current == null)
						return;

					var wait = .current.output(elm);

					if(wait)
						return .outputInterval;
					else
						c.pendingTag('p', elm);
				}
			} incontextof this,

			/* @r_mod_adv */
			'r_mod_adv' => function (elm, c) {
				with(container.modMessage)
				{
					if(.current === null)
						return;
					if(.current.outputting)
					{
						if(c.lastProcessedTag == 'r_mod_adv' && +elm.eol)
							c.pendingTag('p');
					}
				}
			} incontextof this,

			/* @p_mod_adv */
			'p_mod_adv' => function (elm, c) {
				c.interruptTag('end_of_sentence');
				with(container.modMessage)
				{
					.cancelSkip() if .skipping && !.longSkipping;
					if(.longSkipping)
						return;
					if(.current === null)
						return;
					.current.showPageGlyph();
					c.waitSignal(%[left_click : .current.hidePageGlyph]);
				}
			} incontextof this,

			/* @charcter */
			'character' => function (elm, c) {
				if(setCharacterImageByElm(elm))
					reservedTransition(elm, c);
			} incontextof this,

			/* @activate_character */
			'activate_character' => function (elm, c) {
				var name = (elm.name === void ? lastCharacterName_ : elm.name);
				activateCharacter(name);
				if(inNextChPlayVoice_)
				{
					c.interruptTag(%[tagname : 'play_character_voice', name : activeCharacterName_]);
					inNextChPlayVoice_ = false;
				}
				with(container.modMessage)
				{
					if(!.current.visible)
					{
						c.interruptTag("show_current_message_layer");
					}
				}
			} incontextof this,

			/* @show_current_message_layer */
			'show_current_message_layer' => function (elm) {
				with(container.modMessage)
				{
					if(.current == null)
						throw new GRuntimeError("カレントメッセージレイヤが設定されていません。");
					if(.skipping)
						.current.visible = true;
					else
						.current.show();
				}
			} incontextof this,

			/* @play_character_voice */
			'play_character_voice' => function (elm) {
			} incontextof this,

			/* @stop_character_voice */
			'stop_character_voice' => function (elm) {
			} incontextof this,

			/* @wait_character_voice */
			'wait_character_voice' => function (elm) {
			} incontextof this,

			/**/
			'end_of_sentence' => function (elm, c) {
				with(container.modMessage)
				{
					c.interruptTag(%[tagname : 'stop_character_voice', name : activeCharacterName_], 'er');
					// スキップ中は何もする必要はない
					if(.skipping)
						return 'next';
					if(.autoMode)
					{
						var char = getCharacter(activeCharacterName_);
						if(char !== void)
						{
							var obj = window.modules.exSound.voiceBuffers.at(0);
							if(obj.playing)
							{
								c.interruptTag(%[tagname : 'wait_character_voice', index : 0], elm);
								return;
							}
						}
						return .autoPageWait;
					}
				}
			} incontextof this,

			/* @reserved_transition */
			'reserved_transition' => reservedTransition,

			/* @run_reserved_transition */
			'run_reserved_transition' => function (elm, c) {
				if(container.modImage.transitionCount > 0)
				{
					c.pendingTag('wait-transition', elm);
					return 'break';
				}
				runReservedTransition();
			} incontextof this,

		];
	}

	/**/
	function usingModADV()
	{
		with(window.conductor)
		{
			.setRedirectTag('ch', 'ch_mod_adv');
			.setRedirectTag('ruby', 'ruby_mod_message');
			.setRedirectTag('r', 'r_mod_adv');
			.setRedirectTag('p', 'p_mod_adv');
			.setRedirectTag('er', 'erase_message');
			.setRedirectTag('cm', 'clear_message_layer');
		}
	}

	/**/
	function notUsingModADV()
	{
		with(window.conductor)
		{
			.deleteRedirectTag('ch');
			.deleteRedirectTag('ruby');
			.deleteRedirectTag('r');
			.deleteRedirectTag('p');
			.deleteRedirectTag('er');
			.deleteRedirectTag('cm');
		}
	}

	/**/
	function makeCharacterByElm(elm)
	{
		var name = elm.name;

		if(name == '')
			throw new GRuntimeError("キャラクターを編集しようとしましたが名前が指定されていません。");

		var char = getCharacter(name);

		if(char === void)
		{
			char = %[
				name : name, mob : false,
				autoVoice : true, voiceGroup : 'others', voice : 0, voiceStorageFormat : @"&name;%03d",
				cvLayerIndex : void, messageLevel : 0,
				hasImage : true, hasVoice : true
			];

			window.conductor.setRedirectTag(name, 'character');

			characters_[name] = char;
		}

		if(GObjectUtils.getBoolean(elm, 'mob'))
		{
			char.mob = true;
			if(mobCharacterNames_.find(name) == -1)
			{
				//dm(@"Add mob character: &name;");

				mobCharacterNames_.push(name);
				characterNames_.remove(name);
			}
		}
		else
		{
			char.mob = false;
			if(characterNames_.find(name) == -1)
			{
				characterNames_.push(name);
				mobCharacterNames_.remove(name);
			}
		}

		char.atuoVoice = GObjectUtils.getBoolean(elm, 'auto_voice') if elm.auto_voice !== void;
		char.voiceStorageFormat = elm.voice_storage_format if elm.voice_storage_format !== void;
		char.voiceGroup = elm.voice_group if elm.voice_group !== void;
		char.hasImage = GObjectUtils.getBoolean(elm, 'image') if GObjectUtils.hasValue(elm, 'image');
		char.hasVoice = GObjectUtils.getBoolean(elm, 'voice') if GObjectUtils.hasValue(elm, 'voice');
	}

	/**/
	function getCharacter(name)
	{
		if(name == '')
			return void;
		return characters_[name];
	}

	/**
	 * \brief 時間帯情報の作成。
	**/
	function makeTimeZone(elm)
	{
		var name = elm.name;

		if(name === void)
			throw new Exception("時間帯情報を作成しようとしましたが、名前が指定されていません。");

		var arr = timeZone_;
		var c = arr.count;

		for(var i = 0; i < c; i++)
		{
			if(arr[i].name == name)
				throw new GRuntimeError("「&name;」の時間帯情報を作成しようとしましたが、同じ名前の時間帯情報が既に存在しています。");
		}

		var tz = %[name : name, stand : elm.stand];

		window.conductor.setRedirectTag(name, 'set-timezone');

		// 何も選択されていない状態ならば今追加された時間帯を選択する。
		if(currentTimeZone_ == -1)
			setCurrentTimeZone(name);
	}

	/**/
	function setCurrentTimeZone(name)
	{
		var arr = timeZone_;
		var c = arr.count;

		for(var i = 0; i < c; i++)
		{
			if(arr[i].name == name)
			{
				currentTimeZone_ = i;
				break;
			}
		}

		return currentTimeZone_;
	}

	function getCurrentTimeZone()
	{
		var index = currentTimeZone_;

		if(index < 0 || index >= timeZone_.count)
			return void;

		return timeZone_[index];
	}

	/**/
	function allocCVLayer_private_(name, fore = false)
	{
		var cvLayers = container.modImage.cvLayers;
		var users = cvLayerUsers_;
		var layer = void;

		with(getCharacter(name))
		{
			// レイヤーが割り当てられていないので未使用のレイヤーを割り当てる。
			if(.cvLayerIndex === void)
			{
				var max = cvLayers.count;

				for(var i = 0; i < max; i++)
				{
					if(users[i] !== void)
						continue;
					users[i] = name;
					.cvLayerIndex = i;
					break;
				}

				// 割り当てられなかった。
				if(.cvLayerIndex === void)
					throw new GRuntimeError(@"「&cvLayers.prefix;」レイヤーグループのレイヤーが不足しています。");
			}

			// 競合してないかチェック
			if(users[.cvLayerIndex] != name)
			{
				throw new Exception(
					@"レイヤー所有者の競合が発生しました。\n" +
					@"所有者Ａ「&name;」\n" +
					@"所有者Ｂ「&users[.cvLayerIndex];」"
				);
			}

			if((layer = cvLayers.at(.cvLayerIndex, fore)) === void)
				throw new Exception(@"レイヤー「&cvLayers.prefix;&.cvLayerIndex;」を取得できませんでした。");
		}

		return layer;
	}

	/**/
	function freeCVLayer_private_(name)
	{
		with(getCharacter(name))
		{
			if(.cvLayerIndex !== void)
			{
				cvLayerUsers_[.cvLayerIndex] = void;
				.cvLayerIndex = void;
			}
		}
	}

	/**/
	function setCharacterImageByElm(elm)
	{
		var name = (elm.name === void ? elm.tagname : elm.name);
		var char = getCharacter(name);

		if(char === void)
			throw new GRuntimeError(@"キャラクター「&name;」が未定義です。");

		lastCharacterName_ = name;

		// ボイス再生判定
		// ここでは再生は行わない
		inNextChPlayVoice_ = ((char.hasVoice && GObjectUtils.getBoolean(elm, 'voice')) ? true : false);
		// ボイス番号のオーバーライド
		char.voice = +elm.voice if elm.voice !== void;

		if(!char.hasImage)
			return false;

		var imageLoaded = false;
		var layer = allocCVLayer_private_(name);
		var timeZone = getCurrentTimeZone();
		var visible = (elm.visible === void ? layer.visible : +elm.visible);

		if(elm.storage != '')
		{
			var storage = Storages.chopStorageExt(elm.storage);
			var storageExt = Storages.extractStorageExt(elm.storage);
			var asd = Storages.chopStorageExt(elm.asd);
			var asdExt = Storages.extractStorageExt(elm.asd);

			if(timeZone !== void)
			{
				storage = @"&storage;&timeZone.stand;&storageExt;";
				if(elm.asd !== void)
					asd = @"&asd;&timeZone.stand;&asdExt;";
			}

			if(getExistentStorageNameAndExtension(@"&storage;", graphicFileExtensions*) === void)
			{
				log(@"画像 &storage; が見つかりませんでした。");
				return false;
			}

			elm.layer = layer.name;
			elm.storage = storage + storageExt;
			elm.asd_storage = asd + asdExt;
			elm.page = 'back';

			container.modImage.loadImageByElm(elm);

			imageLoaded = true;
		}

		if(elm.target !== void)
		{
			var targets = elm.target.split(", ", , true);
			var c = targets.count;

			for(var i = 0; i < c; i++)
				layer.startAnimation(targets[i]) if targets[i] != "";
			imageLoaded = true;
		}

		if(layer.visible != visible)
		{
			layer.visible = +elm.visible;
			imageLoaded = true;
		}

		// 最終的にレイヤが非表示になる場合は所有権を破棄する。
		if(!layer.visible)
		{
			freeCVLayer_private_(name);
			layer.clearImages();
		}

		// トランジション用パラメータのデフォルト値を設定
		if(imageLoaded)
		{
			elm.layer = 'base';
			elm.time = 200 if elm.time === void;
			elm.vague = 128 if elm.vague === void;
			elm.flash = true;
		}

		return imageLoaded;
	}

	/**
	 * \remaks       elm: トランジションパラメータ。詳しくは ModImage#beginTransitionByElm() を参照してください。
	 * \remaks conductor: 実行元のコンダクタ。詳しくは…（ｒｙ
	**/
	function reservedTransition(elm, conductor = void)
	{
		var tp = transitionParameters_;

		GObjectUtils.copyDictionary(tp, elm);
		tp.conductor = conductor;
		tp.reserved = true;

		//dm("Transition reserved.");
	}

	/**/
	function runReservedTransition()
	{
		var tp = transitionParameters_;

		if(tp.reserved)
		{
			container.modImage.beginTransitionByElm(tp, tp.conductor);

			GObjectUtils.clearDictionary(tp);
			tp.reserved = false;
		}

		//dm("Reserved transition running.");
	}

	/**/
	function isTransitionReserved()
	{
		return transitionParameters_.reserved;
	}

	/**/
	function activateCharacter(name)
	{
		var modMessage = container.modMessage;
		var char = getCharacter(name);

		// カレント設定
		modMessage.setCurrentLayer(char.messageLevel);

		// カレントの設定
		with(modMessage.current)
		{
		}

		// TODO: 履歴の設定

		activeCharacterName_ = name;
	}
}


