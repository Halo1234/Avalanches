/*
 * $Revision: 274 $
**/


/*! \brief GLayer 派生クラス専用のコンテナクラスです。
 *
 * 親と、その直接の子の管理を目的としたコンテナです。
 * さらに複雑なツリーを管理したい場合は、専用のコンテナを実装してください。
**/
class GLayerContainer extends GContainer
{
	var doubleBuffering_;

	var parentLayerName_ = 'base';
	var parentLayerHandler_ = void;

	var childLayerHandlers_ = %[];

	var transitionCount_ = 0;

	/**/
	function GLayerContainer(window, parentLayer, doubleBuffering = true)
	{
		doubleBuffering_ = doubleBuffering;

		super.GContainer(window);

		if(parentLayer.isPrimary && doubleBuffering)
			throw new Exception('ダブルバッファリングを行う場合は親レイヤにプライマリレイヤは利用できません。');

		if(parentLayer.name == '')
			parentLayer.name = parentLayerName_;
		else
			parentLayerName_ = parentLayer.name;

		add(parentLayerName_, parentLayer);
	}

	function finalize()
	{
		var obj = erase(parentLayerName_);
		invalidate obj if obj !== void && isvalid(obj) && !obj.isPrimary;

		super.finalize(...);
	}

	/**/
	function isParentLayer(layer)
	{
		var parent = get(parentLayerName_);

		if(doubleBuffering)
		{
			if(layer.offScreen)
				return parent.mirror === layer ? true : false;

			return parent === layer ? true : false;
		}

		return parent === layer ? true : false;
	}

	/**/
	function terminateBaseLayerTransition(dest, src, children, exchange)
	{
		if(src !== null)
		{
			if(children && doubleBuffering_)
			{
				// NOTE: ここに来るという事は、子ありでトランジションしたので全て処理する
				if(exchange)
				{
					// exchange が真ならば入れ替えのみ行う。
					each(
						function (obj) { obj.exchange(obj.mirror); } incontextof this
					);
				}
				else
				{
					// exchange が偽ならばアサインと入れ替えを行う。
					each(
						function (obj) {
							obj = obj.mirror if obj.offScreen;
							obj.assignToMirror();
							obj.exchange(obj.mirror);
						} incontextof this
					);
				}
			}
			else
			{
				// NOTE: ここに来るという事は、子なしでトランジションしたので親のみ処理する。
				dest.assignToMirror();
				dest.exchange(src);
			}
		}
	}

	/**/
	function terminateLayerTransition(dest, src, children, exchange)
	{
		if(src !== null)
		{
			// children = true かつこのコンテナにこいつの子がある場合は想定していない
			dest.exchange(src);
		}
	}

	/**/
	function flip(name = parentLayerName_, children = true, exchange = false)
	{
		if(!doubleBuffering_)
			return name; // NOTE: 何もしない

		var target = get(name);

		if(target === void)
			throw new GArgumentsError(@"レイヤを入れ替えようとしましたが '&name;' レイヤが見つかりませんでした。");

		if(name == parentLayerName_)
		{
			// NOTE: ここに来るという事は、親の入れ替え。
			if(children)
			{
				// NOTE: ここに来るという事は、子も入れ替える。
				if(exchange)
				{
					with(target.mirror)
					{
						target.visible <-> .visible;
						target.left <-> .left;
						target.top <-> .top;
						target.opacity <-> .opacity;
						if(target.parent.absoluteOrderMode)
							target.absolute <-> .absolute;
					}

					each(
						function (obj) { obj.exchange(obj.mirror); } incontextof this
					);
				}
				else
				{
					each(
						function (obj) {
							obj = obj.mirror if obj.offScreen;
							obj.assignToMirror();
						} incontextof this
					);
				}
			}
			else
			{
				// NOTE: ここに来るという事は、親だけ入れ替える。
				if(exchange)
				{
					with(target.mirror)
					{
						target.visible <-> .visible;
						target.left <-> .left;
						target.top <-> .top;
						target.opacity <-> .opacity;
						if(target.parent.absoluteOrderMode)
							target.absolute <-> .absolute;
					}

					// 子の親を入れ替える。
					each(
						function (obj, key) {
							obj.parent <-> obj.mirror.parent if !isParentLayer(obj);
						} incontextof this
					);
				}
				else
				{
					target.assignToMirror();
				}
			}
		}
		else
		{
			// NOTE: ここに来るという事は、子の入れ替え
			with(target.mirror)
			{
				// NOTE: children が真で、このコンテナに target の子がある場合の動作は未定義です。
				target.visible <-> .visible;
				target.left <-> .left;
				target.top <-> .top;
				target.opacity <-> .opacity;
				if(target.parent.absoluteOrderMode)
					target.absolute <-> .absolute;
				target.parent <-> .parent;
			}
		}

		return name;
	}

	/**/
	function add(name, foreLayer)
	{
		if(name == parentLayerName_)
		{
			if(!foreLayer.isPrimary)
			{
				parentLayerHandler_ = foreLayer.handler;
				foreLayer.handler = onBaseLayerHandler;
			}
		}
		else
		{
			childLayerHandlers_[name] = foreLayer.handler;
			foreLayer.handler = onChildLayerHandler;
		}

		if(doubleBuffering_)
		{
			var backLayer;

			foreLayer.independence();
			foreLayer.clearImages();
			foreLayer.name = name;

			if(name == parentLayerName_)
			{
				if(foreLayer.parent.isPrimary)
					backLayer = GObjectUtils.duplicate(foreLayer, window, foreLayer.parent, foreLayer.handler);
				else
					backLayer = GObjectUtils.duplicate(foreLayer, window, foreLayer.parent.mirror, foreLayer.handler);
				foreLayer.visible = true;
				backLayer.visible = false;
			}
			else
			{
				backLayer = GObjectUtils.duplicate(foreLayer, window, foreLayer.parent.mirror, foreLayer.handler);
			}
			backLayer.name = name;

			// NOTE: ダブルバッファリング時の remove() 方式による無効化は GFamily を利用する事で解決する。
			foreLayer.family.receive(backLayer);
			backLayer.family.receive(foreLayer);
		}
		else
		{
			foreLayer.clearImages() if !foreLayer.isPrimary;
			foreLayer.name = name;
		}

		return super.add(name, foreLayer);
	}

	/**/
	function erase(name)
	{
		var layer = super.erase(name);

		if(name == parentLayerName_)
		{
			layer.handler = parentLayerHandler_;
			layer.mirror.handler = parentLayerHandler_ if doubleBuffering_;
			parentLayerHandler_ = void;
		}
		else
		{
			layer.handler = childLayerHandlers_[name];
			layer.mirror.handler = childLayerHandlers_[name] if doubleBuffering_;
			delete childLayerHandlers_[name];
		}

		return layer;
	}

	/**/
	function remove(obj)
	{
		var db = doubleBuffering_;
		var arr = [];
		var name, layer;

		// NOTE: objects_ は GContainer のプライベートメンバです。
		arr.assign(objects_);

		for(var i = arr.count - 2; i >= 0; i -= 2)
		{
			name = arr[i];
			layer = arr[i + 1];

			if(layer === obj || layer === obj.mirror)
			{
				layer.handler = childLayerHandlers_[name];
				layer.mirror.handler = childLayerHandlers_[name] if db;
				delete childLayerHandlers_[name];

				arr[i] = arr[i + 1] = arr;
			}
		}

		arr.remove(arr);

		GObjectUtils.assignDictionary(objects_, arr);

		return arr.count >> 1;
	}

	/**/
	function get(name, fore = true)
	{
		var layer = super.get(name);

		if(layer === void)
			return void;

		if(doubleBuffering_)
		{
			if(layer.offScreen)
				layer = layer.mirror;

			return (fore ? layer : layer.mirror);
		}

		return layer;
	}

	/**/
	function find(obj)
	{
		// TODO: 最適化対象です。objects_ を直接操作した方がいい。

		var name = super.find(obj);

		return name == '' ? super.find(obj.mirror) : name;
	}

	/**/
	function store(tick)
	{
		var dic = super.store(tick);

		with(get(parentLayerName_))
		{
			if(!.isPrimary)
			{
				dic.fore = .store(tick);
				dic.back = .mirror.store(tick);
			}
		}

		return dic;
	}

	/**/
	function restore(dic, tick)
	{
		super.restore(dic, tick);

		with(get(parentLayerName_))
		{
			if(!.isPrimary)
			{
				.restore(dic.fore, tick);
				.mirror.restore(dic.back, tick);
			}
		}
	}

	/**/
	function onBaseLayerHandler(obj, event, elm)
	{
		switch(event)
		{
		case 'onBeginTransition':			transitionCount_++; break;
		case 'onTransitionCompleted':		transitionCount_--; terminateBaseLayerTransition(elm.dest, elm.src, elm.children, elm.exchange); break;
		}

		parentLayerHandler_(obj, event, elm) if parentLayerHandler_;
	}

	/**/
	function onChildLayerHandler(obj, event, elm)
	{
		switch(event)
		{
		case 'onBeginTransition':			transitionCount_++; break;
		case 'onTransitionCompleted':		transitionCount_--; terminateLayerTransition(elm.dest, elm.src, elm.children, elm.exchange); break;
		}

		childLayerHandlers_[obj.name](obj, event, elm) if childLayerHandlers_[obj.name] !== void;
	}

	property doubleBuffering
	{
		getter		{ return doubleBuffering_; }
	}

	property parentLayerName
	{
		getter		{ return parentLayerName_; }
	}

	property transitionCount
	{
		getter		{ return transitionCount_; }
	}
}


