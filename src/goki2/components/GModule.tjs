/*
 * $Revision: 99 $
**/


/*! \brief モジュール基本クラス
**/
class GModule
{
	var container_;
	var name_;

	var aliases_ = [];
	var tagHandlers_;

	function GModule(container, name)
	{
		container_ = container;
		name_ = name;

		tagHandlers_ = createExtensionTagHandlers();
	}

	function finalize()
	{
		clearAliases();
	}

	/*! brief プラグイン先のウインドウに追加するタグハンドラを作成します。
	 *
	 * ウインドウに追加／上書きしたいタグがあればここで作成します。
	 * 何も追加する必要がなければ void を返してください。
	 *
	 * タグハンドラのフォーマットは以下の辞書配列形式になります。
	 *
	 * %[ 'TAG-NAME' => function (elements, conductor) { ... } incontextof this, ... any tag handlers ... ]
	 *
	 * \remarks タグハンドラの conductor 引数は実行元のコンダクタが渡されます。
	 * \remarks これは必要なければ省略して構いません。
	**/
	function createExtensionTagHandlers()
	{
		return void;
	}

	/**/
	function clearAliases()
	{
		var arr = GObjectUtils.duplicate(aliases_);

		with(container_)
		{
			for(var i = arr.count; i >= 0; i--)
				.eraseAlias(arr[i]);
		}
	}

	/**/
	function store(tick)
	{
		return %[aliases : aliases_];
	}

	/**/
	function restore(dic, tick)
	{
		var arr = aliases_;
		var rm = container_.eraseAlias;
		var ad = container_.addAlias;

		// 必要のない別名を削除
		for(var i = arr.count - 1; i >= 0; i--)
			rm(arr[i]) if dic.aliases.find(arr[i]) == -1;

		// 必要な別名を追加
		for(var i = dic.aliases.count - 1; i >= 0; i--)
			ad(this, dic.aliases[i]);
	}

	/**/
	function onAttach(name)
	{
		// NOTE: 自分自身で別名を登録する場合はこのタイミングで行って下さい。
		// NOTE: コンストラクタ内では登録できません。
	}

	/**/
	function onDetach()
	{
		clearAliases();
	}

	/**/
	function onRegistAlias(alias)
	{
		with(aliases_)
			.add(alias) if .find(alias) == -1;
	}

	/**/
	function onUnregistAlias(alias)
	{
		aliases_.remove(alias);
	}

	property container
	{
		getter		{ return container_; }
	}

	property name
	{
		getter		{ return name_; }
	}

	property aliases
	{
		getter		{ return GObjectUtils.duplicate(aliases_); }
	}

	property tagHandlers
	{
		getter		{ return tagHandlers_; }
	}

	property window
	{
		getter		{ return container_.window; }
	}
}


