/*
**/


/*! \brief 常に true を返すだけの関数です。
**/
function alwaysTrue()	{ return true; }
/*! \brief 常に false を返すだけの関数です。
**/
function alwaysFalse()	{ return false; }
/*! \brief 常に void を返すだけの関数です。
**/
function alwaysVoid()	{ return void; }
/*! \brief 常に null を返すだけの関数です。
**/
function alwaysNull()	{ return null; }

/*! \brief 伝統の dm 関数。
**/
function dm(msg)		{ /* Do nothing. */ }
/*! \brief ログ出力関数。
**/
function log(msg)		{ Debug.message(msg); }
/*! \brief warning 用ログ出力関数。
**/
function warn(msg)		{ Debug.message(@"#### &msg;"); }
/*! \brief error 用ログ出力関数。
**/
function err(msg)		{ Debug.message(@"!!!! &msg;"); }


/*! \brief GOKI2 のバージョン情報を扱うクラスオブジェクトです。
**/
class GOKI2VersionInfo
{
	/// \cond ignore

	/**/
	function GOKI2VersionInfo()
	{
		throw new GClassObjectConstructorCalledError('GOKI2VersionInfo クラスのオブジェクトは作成できません。');
	}

	/// \endcond

	/**/
	property name
	{
		getter		{ return 'GOKI2'; }
	}

	/**/
	property majorVersionNumber
	{
		getter		{ return 2; }
	}

	/**/
	property minorVersionNumber
	{
		getter		{ return 0; }
	}

	/**/
	property pointMajorVersionNumber
	{
		getter		{ return 0; }
	}

	/**/
	property pointMinorVersionNumber
	{
		getter		{ return 2; }
	}

	/**/
	property versionString
	{
		getter
		{
			return @"&GOKI2VersionInfo.majorVersionNumber;" +
				@".&GOKI2VersionInfo.minorVersionNumber;" +
				@".&GOKI2VersionInfo.pointMajorVersionNumber;" +
				@".&GOKI2VersionInfo.pointMinorVersionNumber;";
		}
	};
}


/*! \brief オブジェクトに関する情報などを扱うクラスオブジェクトです。
**/
class GObjectUtils
{
	/// \cond ignore

	/**/
	function GObjectUtils()
	{
		throw new GClassObjectConstructorCalledError('GObjectUtils クラスのオブジェクトは作成できません。');
	}

	/**/
	function initialize()
	{
		with(GObjectUtils)
		{
			.tjsStorageNameMarks_ = %[] if typeof(.tjsStorageNameMarks_) === 'undefined';
			.shutdownBackupStorage = void if typeof(.shutdownBackupStorage) === 'undefined';
		}
	}

	/// \endcond

	/*! \brief オブジェクトを処分します。
	 *
	 * \remarks dispose() は最初の obj 引数は無効化しませんが
	 * \remarks destroy() は最初の obj 引数も無効化します。
	 * \remarks つまり dispose(new Layer(...)); は何もしません。
	**/
	function dispose(obj)
	{
		if(obj === null || typeof(obj) != 'Object' || !isvalid(obj))
			return;

		if(obj instanceof 'Array')
		{
			for(var i = obj.count - 1; i >= 0; i--)
				GObjectUtils.destroy(obj[i]);
		}
		else
		if(obj instanceof 'Dictionary')
		{
			var arr = [];

			arr.assign(obj);
			for(var i = arr.count - 2; i >= 0; i -= 2)
				GObjectUtils.destroy(arr[i + 1]);
		}
	}

	/*! \brief オブジェクトを処分します。
	 *
	 * \remarks dispose() は最初の obj 引数は無効化しませんが
	 * \remarks destroy() は最初の obj 引数も無効化します。
	**/
	function destroy(obj)
	{
		if(obj === null || typeof(obj) != 'Object' || !isvalid(obj))
			return;

		if(obj instanceof 'Array')
		{
			for(var i = obj.count - 1; i >= 0; i--)
				GObjectUtils.destroy(obj[i]);
		}
		else
		if(obj instanceof 'Dictionary')
		{
			var arr = [];
			arr.assign(obj);

			for(var i = arr.count - 2; i >= 0; i -= 2)
				GObjectUtils.destroy(arr[i + 1]);
		}

		invalidate obj;
	}

	/**/
	function markTJSStorageName(name)
	{
		GObjectUtils.tjsStorageNameMarks_[name] = true;
	}

	/**/
	function unmarkTJSStorageName(name)
	{
		delete GObjectUtils.tjsStorageNameMarks_[name];
	}

	/**/
	function getTJSStorageNameMark(name)
	{
		if(typeof(GObjectUtils.tjsStorageNameMarks_[name]) === 'undefined')
			return false;
		return GObjectUtils.tjsStorageNameMarks_[name];
	}

	/*! \brief オブジェクトのクラス名を返します。
	 *
	 * \param [obj] クラス名を取得したいオブジェクトを指定します。
	 *
	 * \return クラス名を文字列で返します。
	 *
	 * \remarks obj にオブジェクト型以外を指定した場合の動作は、現在未定義です。
	**/
	function getClassName(obj)
	{
		// NOTE: Undocumented method Scripts.getClassNames(object)
		var classTree = Scripts.getClassNames(obj);

		return classTree[0];
	}

	/*! \brief オブジェクトが name で指定されたクラスを継承しているかどうかを調べます。
	 *
	 * \param [obj] 調べたいオブジェクトを指定します。
	 * \param [name] 継承しているかどうかを調べたいクラスの名前を文字列で指定します。
	 *
	 * \return 継承していれば true を返します。それ以外では false を返します。
	**/
	function inheritance(obj, name)
	{
		var classTree = Scripts.getClassNames(obj);

		for(var i = classTree.count; i >= 0; --i)
		{
			if(classTree[i] == name)
				return true;
		}

		return false;
	}

	/*! \brief 指定されたオブジェクトの複製を作成します。
	 *
	 * このメソッドは複製されたオブジェクトが assignStruct() メソッドを
	 * 持っていれば、origin を引数にして assignStruct() メソッドを呼び出します。
	 *
	 * 例：
	 *  var dic = %[value1 : 0, value2 : 10];
	 *  var cloneDic = GObjectUtils.clone(dic);
	 *  log(@"[original] value1: &dic.value1;, value2: &dic.value2;");
	 *  log(@"   [clone] value1: &cloneDic.value1;, value2: &cloneDic.value2;");
	 *
	 * 出力：
	 *  [original] value1: 0, value2: 10
	 *     [clone] value1: 0, value2: 10
	 *
	 * \param [origin] 元となるオブジェクトを指定します。
	 * \param [constructorArguments*] 複製のコンストラクタへの引数がある場合はここに指定します。
	 *
	 * \return 作成された複製オブジェクトを返します。
	 *
	 * \remarks origin のクラスが global ネームスペース上に存在していなければなりません。
	 * \remarks いわゆるクラス内クラスの複製は作成できませんので注意してください。
	**/
	function clone(origin, constructorArguments*)
	{
		if(typeof(origin) != 'Object' || origin === null || !isvalid(origin))
			throw new GArgumentsError('GObjectUtils#clone() が複製できるのは Object 型の有効なインスタンスのみです。');

		var obj = GObjectUtils.constructFromObject_private_(origin, constructorArguments);

		// NOTE: obj が assignStruct メソッドを持っているならば呼び出す。
		if(obj instanceof 'Dictionary')
			GObjectUtils.copyDictionary(obj, origin);
		else
		if((typeof(obj.assignStruct) !== 'undefined') && obj.assignStruct instanceof 'Function')
			obj.assignStruct(origin);

		return obj;
	}

	/*! \brief 指定されたオブジェクトの軽い複製を作成します。
	 *
	 * このメソッドは、複製されたオブジェクトが assign() メソッドを
	 * 持っていれば、origin を引数にして assign() メソッドを呼び出す点のみ
	 * GObjectUtils#clone() とは違います。
	 *
	 * それ以外は GObjectUtils#clone() とまったく同じです。
	 *
	 * \param [origin] 元となるオブジェクトを指定します。
	 * \param [constructorArguments*] 複製のコンストラクタへの引数がある場合はここに指定します。
	 *
	 * \return 作成された複製オブジェクトを返します。
	 *
	 * \remarks origin のクラスが global ネームスペース上に存在していなければなりません。
	 * \remarks いわゆるクラス内クラスの複製は作成できませんので注意してください。
	**/
	function duplicate(origin, constructorArguments*)
	{
		if(typeof(origin) != 'Object' || origin === null || !isvalid(origin))
			throw new GArgumentsError('GObjectUtils#duplicate() が複製できるのは Object 型の有効なインスタンスのみです。');

		var obj = GObjectUtils.constructFromObject_private_(origin, constructorArguments);

		// NOTE: obj が assign メソッドを持っているならば呼び出す。
		if(obj instanceof 'Dictionary')
			GObjectUtils.assignDictionary(obj, origin);
		else
		if((typeof(obj.assign) !== 'undefined') && obj.assign instanceof 'Function')
			obj.assign(origin);

		return obj;
	}

	function constructFromObject_private_(origin, arguments)
	{
		var obj;

		try {
			var className = GObjectUtils.getClassName(origin);

			obj = new global[className](arguments*);
		} catch (e) {
			throw new GFatalError('吉里吉里のバージョンが古い可能性があります。');
		}

		return obj;
	}

	/*! \brief Dictionary オブジェクトの union 用ユーティリティメソッド。
	 *
	 * \param [dst] 上書き先 Dictionary オブジェクトを指定します。
	 * \param [src] 上書き元 Dictionary オブジェクトを指定します。
	 *
	 * \return dst を返します。
	**/
	function unionDictionary(dst, src)
	{
		if(dst !== src)
			(Dictionary.assign incontextof dst)(src, false);

		return dst;
	}

	/*! \brief Dictionary オブジェクトの assign 用ユーティリティメソッド。
	 *
	 * \param [dst] アサイン先 Dictionary オブジェクトを指定します。
	 * \param [src] アサイン元 Dictionary オブジェクトを指定します。
	 *
	 * \return dst を返します。
	**/
	function assignDictionary(dst, src)
	{
		if(dst !== src)
			(Dictionary.assign incontextof dst)(src);

		return dst;
	}

	/*! \brief Dictionary オブジェクトの deep assign 用ユーティリティメソッド。
	 *
	 * \param [dst] コピー先 Dictionary オブジェクトを指定します。
	 * \param [src] コピー元 Dictionary オブジェクトを指定します。
	 *
	 * \return dst を返します。
	**/
	function copyDictionary(dst, src)
	{
		if(dst !== src)
			(Dictionary.assignStruct incontextof dst)(src);

		return dst;
	}

	/*! \brief Dictionary オブジェクトの clear 用ユーティリティメソッド。
	 *
	 * \param [dic] クリアしたい Dictionary オブジェクトを指定します。
	 *
	 * \return dic を返します。
	**/
	function clearDictionary(dic)
	{
		(Dictionary.clear incontextof dic)();

		return dic;
	}

	/*! \brief 入力を真偽値 (true or false) に変換します。
	 *
	 * \param [obj] 真偽値に変換したい値を指定します。
	 * \param [vb:false:] obj が '空値' の場合の真偽値を指定します。
	 *
	 * \return 結果を真偽値 (true or false) で返します。
	 *
	 * \remarks '空値' と見なされるのは void/null/NaN/'' です。
	 * \remarks obj が 'Object' の場合、'空値' は obj.toBoolean() の実装に依存します。
	 * \remarks また、obj.toBoolean() を持たない場合は、常に true を返します。
	**/
	function toBoolean(obj, vb = false)
	{
		// NOTE: 入力は信用しない。ちゃんと評価する。
		var v = (+vb) ? true : false;

		switch(typeof(obj))
		{
		case 'void':
			return v;

		case 'Integer':
			return (obj === 0 ? false : true);

		case 'Real':
			switch(obj)
			{
			case NaN:			return v;
			case Infinity:		// Do not break.
			case -Infinity:		return true;
			}
			return (obj === 0.0 ? false : true);

		case 'Object':
			// NOTE: null 及び無効化されたオブジェクトは '空値' と見なします。
			if(obj === null || !isvalid(obj))
				return v;
			if((typeof(obj.toBoolean) !== 'undefined') && obj.toBoolean instanceof 'Function')
				return obj.toBoolean(v);
			return true;

		case 'String':
			switch(obj)
			{
			case '':		return v;
			case 'no':		return false;
			case 'yes':		return true;
			}
			return +obj ? true : false;

		case 'Octet':
			throw new GNotImplementedError('GObjectUtils#toBoolean( Octet ) の呼び出しは実装されていません。');
		}

		throw new GFatalError('Dead code.');
	}

	/*! \brief オブジェクトの値を真偽値で返します。
	 *
	 * \param [obj] オブジェクトを指定します。
	 * \param [name] 値の名前を指定します。
	 * \param [vv:false:] 値が '空値' の場合の真偽値を指定します。
	 *
	 * \return 結果を真偽値 (true or false) で返します。
	**/
	function getBoolean(obj, name, vv = false)
	{
		if(typeof(obj[name]) != 'undefined')
			return GObjectUtils.toBoolean(obj[name], false);
		else
		if(typeof(obj[@"!&name;"]) != 'undefined')
			return !GObjectUtils.toBoolean(obj[@"!&name;"], false);
		else
		if(typeof(obj[@"no_&name;"]) != 'undefined')
			return !GObjectUtils.toBoolean(obj[@"no_&name;"], false);

		// NOTE: 仕様に global を参照する動作を追加するか検討。

		return vv;
	}

	/*! \brief オブジェクトに指定の値が存在するか調べる。
	 *
	 * \param [obj] オブジェクトを指定します。
	 * \param [name] 値の名前を指定します。
	 *
	 * \return 結果を真偽値 (true or false) で返します。
	**/
	function hasValue(obj, name)
	{
		return GObjectUtils.getBoolean(obj, name, null) === null ? false : true;
	}

	/**
	 * \brief fileName に対して自動検索パス上で有効なストレージ名となるプレフィックスを
	 * \brief 作成して返します。
	 * \brief プレフィックスは部分パスか、またはストレージ名の一部です。
	 *
	 * \remarks    subDirectoryName: アーカイブに含まれないパスを指定します。
	 * \remarks partOfDirectoryPath: アーカイブに含まれるパスを指定します。
	 * \remarks            fileName: 元になるファイル名を指定します。
	 * \remarks         extensions*: 拡張子のリストを指定します。
	 *
	 * \return 最初に見つかった有効なプレフィックスを返します。
	 * \return 何も見つからなかった場合は void を返します。
	 * \return 【例】
	 * \return  var prefix = existStoragePrefixOnKrkrAutoPathSystem('image', 'A', 'anger', graphicFileExtensions*);
	 * \return  dm(prefix);    // 'A_'
	 * \return                 // 'image/A/'
	 * \return                 // 上記の内、先に見つかったものがログに出力されます。
	**/
	var _static_regExistStoragePathOnKrkrAutoPathSystem = new RegExp('\/', 'g');
	function existStoragePrefixOnKrkrAutoPathSystem(subDirectoryName, partOfDirectoryPath, fileName, extensions*)
	{
		var prefix = void;

		// 入力チェック
		if(subDirectoryName == void)
			subDirectoryName = '';
		else
		if(subDirectoryName[subDirectoryName.length - 1] == '/')
			subDirectoryName = subDirectoryName.substring(0, subDirectoryName.length - 1);
		if(partOfDirectoryPath == void)
			partOfDirectoryPath = '';
		else
		if(partOfDirectoryPath[partOfDirectoryPath.length - 1] == '/')
			partOfDirectoryPath = partOfDirectoryPath.substring(0, partOfDirectoryPath.length - 1);

		// 第一優先順位
		prefix = @"&partOfDirectoryPath.replace(_static_regExistStoragePathOnKrkrAutoPathSystem, '_');_";
		if(getExistentStorageNameAndExtension(@"&prefix;&fileName;", extensions*) !== void)
			return prefix;

		// 第二優先順位
		prefix = @"&subDirectoryName;/&partOfDirectoryPath;/";
		if(getExistentStorageNameAndExtension(@"&prefix;&fileName;", extensions*) !== void)
			return prefix;

		// NOTE:
		// 以下、仕様外の動作です。
		// この動作に依存しないでください。
		prefix = @"&subDirectoryName;_&partOfDirectoryPath.replace(_static_regExistStoragePathOnKrkrAutoPathSystem, '_');_";
		if(getExistentStorageNameAndExtension(@"&prefix;&fileName;", extensions*) !== void)
		if(prefix !== void)
			return prefix;

		return void;
	}
}

// NOTE: GObjectUtils クラス初期化
GObjectUtils.initialize();
delete GObjectUtils.initialize;


/*! \brief ＴＪＳスクリプト読み込み用ユーティリティです。
 *
 * \param [storage] 読み込みたいＴＪＳスクリプトファイル名を指定します。
**/
function loadTJS(storage)
{
	var tick = System.getTickCount();

	log(@"Load tjs script: '&storage;'");

	try {
		Scripts.execStorage(storage);
	} catch(e) {
		err(@"The exception occurred in the '&storage;'.");

		raiseUpException(e);
	}

	GObjectUtils.markTJSStorageName(storage);

	log(@"loadTJS('&storage;') successed. (&System.getTickCount() - tick; ms)");
}

/*! \brief 多重読み込みをしないＴＪＳスクリプト読み込み用ユーティリティです。
 *
 * \param [storage] 読み込みたいＴＪＳスクリプトファイル名を指定します。
**/
function loadTJSOnce(storage)
{
	loadTJS(storage) if !GObjectUtils.getTJSStorageNameMark(storage);
}

/*! \brief クラスの読み込み用ユーティリティです。
 *
 * loadClassOnDemand() に対応するためだけの関数です。
 * 特に意味はありません。
 *
 * \param [name] 読み込みたいクラス名を指定します。
 * \param [storage:@"&name;.tjs":] クラス名とストレージ名が異なる場合こちらにストレージ名を指定します。
**/
function loadClass(name, storage = @"&name;.tjs")
{
	loadTJS(storage);
}

/*! \brief クラスのオンデマンドローディング用ユーティリティです。
 *
 * クラスにアクセスされた時点で指定されたＴＪＳファイルを読み込みます。
 *
 * \param [name] 読み込みたいクラス名を指定します。
 * \param [storage:@"&name;.tjs":] クラス名とストレージ名が異なる場合こちらにストレージ名を指定します。
**/
function loadClassOnDemand(name, storage = @"&name;.tjs")
{
	var src = "property %s { getter { loadTJS('%s'); return global.%s; } }";

	Scripts.exec(src.sprintf(name, storage, name));
}

/*! \brief 実行サイクル調整用クラスです。
**/
class GAnotherExclusiveCycle
{
	var trigger_;
	var que_ = [];

	function GAnotherExclusiveCycle()
	{
		with(trigger_ = new AsyncTrigger(onFire_private_, ''))
		{
			.mode = atmExclusive;
			.cached = true;
		}
	}

	function finalize()
	{
		invalidate trigger_;
	}

	/*! \brief トリガーを引きます。
	**/
	function trigger()
	{
		trigger_.trigger();
	}

	/*! \brief トリガーをキャンセルします。
	**/
	function cancel()
	{
		trigger_.cancel();
	}

	/*! \brief ハンドラをキューの最後に追加します。
	 *
	 * \param [handler] 追加したいハンドラを指定します。
	 * \param [arguments*] ハンドラへの引数を指定します。
	 *
	 * \remarks ハンドラは関数型以外を指定すると無視されます。
	**/
	function add(handler, arguments*)
	{
		var dic = %[handler : handler];

		dic.arguments = GObjectUtils.clone(arguments) if arguments.count > 0;
		que_.add(dic);

		trigger();
	}

	/*! \brief ハンドラをキューの指定位置に追加します。
	 *
	 * \param [index] 追加したい位置をインデックスで指定します。
	 * \param [handler] 追加したいハンドラを指定します。
	 * \param [arguments*] ハンドラへの引数を指定します。
	 *
	 * \remarks ハンドラは関数型以外を指定すると無視されます。
	 * \remarks また、index に指定できる値は Array#insert() と同じものです。
	**/
	function insert(index, handler, arguments*)
	{
		var dic = %[handler : handler];

		dic.arguments = GObjectUtils.clone(arguments) if arguments.count > 0;
		que_.insert(index, dic);

		trigger();
	}

	/*! \brief ハンドラをキューの最後に追加します。
	 *
	 * このメソッドは GAnotherExclusiveCycle#add() とほぼ同じ動作をしますが
	 * 既にキューに handler が存在している場合は、新しく追加しません。
	 *
	 * \param [handler] 追加したいハンドラを指定します。
	 * \param [arguments*] ハンドラへの引数を指定します。
	 *
	 * \remarks このメソッドは handler の追加が行われなくても必ずトリガーを引きます。
	**/
	function uniqueAdd(handler, arguments*)
	{
		if(find(handler) == -1)
			add(...);

		// NOTE: cancel() されている可能性を考慮して trigger() は必ず呼び出す。
		trigger();
	}

	/*! \brief ハンドラをキューの指定位置に追加します。
	 *
	 * このメソッドは GAnotherExclusiveCycle#insert() とほぼ同じ動作をしますが
	 * 既にキューに handler が存在している場合は、新しく追加しません。
	 *
	 * \param [index] 追加したい位置をインデックスで指定します。
	 * \param [handler] 追加したいハンドラを指定します。
	 * \param [arguments*] ハンドラへの引数を指定します。
	 *
	 * \remarks このメソッドは handler の追加が行われなくても必ずトリガーを引きます。
	**/
	function uniqueInsert(index, handler, arguments*)
	{
		if(find(handler) == -1)
			insert(...);

		// NOTE: cancel() されている可能性を考慮して trigger() は必ず呼び出す。
		trigger();
	}

	function find(handler)
	{
		var q = que_;
		var c = q.count;

		for(var i = 0; i < c; i++)
		{
			if(q[i].handler === handler)
				return i;
		}

		return -1;
	}

	function get(index)
	{
		var q = que_;

		if(index < 0 || index >= q.count)
			throw new GOutOfRangeError();

		return q[index];
	}

	function remove(handler)
	{
		var q = que_;

		for(var i = 0; i < q.count; i++)
			q[i] = void if q[i].handler === handler;
		q.remove(void);
	}

	function onFire_private_()
	{
		var q = que_;
		var dic, ret;

		while(q.count)
		{
			dic = q.shift();

			if(!(dic.handler instanceof 'Function'))
				continue;

			if(dic.arguments === void)
				ret = dic.handler();
			else
				ret = dic.handler(dic.arguments*);

			if(ret != 0 && q.count > 0)
			{
				trigger();
				return;
			}
		}
	}
}

/*!
**/
class GInstantContext
{
	function GInstantContext(dic)
	{
		var arr = [];
		arr.assign(dic);
		for(var i = 0; i < arr.count; i += 2)
			this[arr[i]] = arr[i + 1];
	}

	function finalize()
	{
	}
}
function Instant(dic)	{ return new GInstantContext(dic); }

/*!
**/
class GDispatcher
{
	var handlers_ = %[];

	function GDispatcher()
	{
		// Do nothing.
	}

	function finalize()
	{
		// Do nothing.
	}

	/**/
	function make(name, handler, arguments*)
	{
		handlers_[name] = %[handler : handler, arguments : arguments];
	}

	/**/
	function makeOneShot(name, handler, arguments*)
	{
		handlers_[name] = %[handler : handler, arguments : arguments, isOneShot : true];
	}

	/**/
	function signal(name, arguments*)
	{
		if(name == void)
			return void;

		var dic = handlers_[name];

		if(dic == void)
			return void;

		delete handlers_[name] if dic.isOneShot;

		return dic.handler(dic.arguments*, arguments*);
	}

	/**/
	function clear()
	{
		GObjectUtils.clearDictionary(handlers_);
	}
}

/*! オブジェクトの寿命管理用オブジェクトです。
**/
class GFamily
{
	var owner_;

	var family_ = [];

	function GFamily(owner)
	{
		owner_ = owner;
	}

	function finalize()
	{
		suicide();
	}

	function receive(obj)
	{
		if(typeof(obj) == 'Object' && obj !== null)
		{
			with(family_)
				.add(obj) if .find(obj) === -1;
		}

		return obj;
	}

	function away(obj)
	{
		family_.remove(obj);

		return obj;
	}

	function awayAndInvalidate(obj)
	{
		invalidate away(obj);
	}

	function suicide()
	{
		var arr = GObjectUtils.duplicate(family_);
		var c = arr.count;

		for(var i = 0; i < c; i++)
			invalidate arr[i] if isvalid(arr[i]);

		family_.clear();

		return this;
	}

	property owner
	{
		getter		{ return owner_; }
	}
}

/*! デストラクト代行オブジェクト
**/
class GDestructor
{
	var destructor_;
	var arguments_;

	function GDestructor(destructor = void, arguments*)
	{
		destructor_ = destructor;
		arguments_ = arguments;
	}

	function finalize()
	{
		var f = destructor_;
		var a = arguments_;

		f(a*) if f !== void;
	}
}

/**
 * NOTE:
 * これは GYesNoDialogLayer （または派生クラス）専用のキャッシュシステムです。
 *
 * レイヤタイプのダイアログはウインドウタイプのように気軽に同期実行ができないので
 * ほうっておけばＧＣに殺されるのでどこかで参照を保持しなければならない。
**/
global['@GYesNoDialogLayer#object_cache'] = [];
function getYesNoDialogLayerCacheMemory()
{
	return global['@GYesNoDialogLayer#object_cache'];
}

/**/
function pushYesNoDialogLayerForCache(obj)
{
	if(obj instanceof 'GYesNoDialogLayer')
	{
		with(getYesNoDialogLayerCacheMemory())
			.push(obj) if .find(obj) == -1;
	}
	else
	{
		warn("GYesNoDialogLayer 専用のキャッシュに無関係のオブジェクトを登録しようとしました。");
		warn('この呼び出しは単に無視されます。');
		warn(@"登録しようとしたオブジェクトクラス名：'&GObjectUtils.getClassName(obj);'");
	}
}

/**/
function popYesNoDialogLayerFromCache()
{
	with(getYesNoDialogLayerCacheMemory())
	{
		var obj = void;

		do {
			obj = .pop();
			if(obj !== void && obj isvalid)
				break;
		} while(.count > 0);
	}

	return obj;
}

/**/
function findYesNoDialogLayerFromCache(id)
{
	var arr = getYesNoDialogLayerCacheMemory();
	var c = arr.count;
	var obj = void;

	for(var i = 0; i < c; i++)
	{
		if(!(arr[i] isvalid))
		{
			arr[i] = void;
			continue;
		}

		if(arr[i].id != id)
			continue;

		obj = arr[i];
	}

	arr.remove(void);

	return obj;
}

/**/
function removeYesNoDialogLayerFromCache(id)
{
	var arr = getYesNoDialogLayerCacheMemory();
	var c = arr.count;

	// NOTE:
	// 削除はしますが無効化はしません。
	for(var i = 0; i < c; i++)
	{
		if(!(arr[i] isvalid))
			arr[i] = void;
		else
		if(arr[i].id == id)
			arr[i] = void;
	}

	arr.remove(void);
}

/**/
function getVisibleYesNoDialogLayerFromCache()
{
	var arr = getYesNoDialogLayerCacheMemory();
	var c = arr.count;

	for(var i = 0; i < c; i++)
	{
		if(arr[i].visible)
			return arr[i];
	}
}

/**/
function disposeYesNoDialogLayerCache()
{
	var arr = getYesNoDialogLayerCacheMemory();
	var c = arr.count;

	for(var i = 0; i < c; i++)
		invalidate arr[i] if arr[i] isvalid;

	arr.clear();
}

// ◆YesNoダイアログ
//
function createYesNoDialogLayer()
{
	return new GYesNoDialogLayer(...);
}

/**/
function createYesNoDialogWindow()
{
	return new GYesNoDialogWindow(...);
}

//
// 第一引数が Layer 派生クラスのインスタンスであれば
// レイヤによる実装を返します。
// そうでなければウインドウによる実装を返します。
function createYesNoDialog(firstArg, args*)
{
	var obj;

	if(firstArg instanceof 'Layer')
	{
		var id = void;

		if(args.count >= 1)
			obj = findYesNoDialogLayerFromCache(id = args[0]);
		if(obj === void)
		{
			obj = createYesNoDialogLayer(firstArg.window, firstArg);
			obj.id = id if id !== void;
			obj.pushToCache();
		}
	}
	else
	{
		// FIXME:
		// 引数のチェックした方がいいんだけど、
		// 面倒なので放置
		obj = createYesNoDialogWindow(...);
	}

	return obj;
}

// ◆YesNo確認
function askYesNo(firstArg, args*)
{
	var parent, message, caption, yesHandler, noHandler;
	var dialog;

	if(firstArg instanceof 'Layer')
	{
		// NOTE:
		// こちらは非同期実行になります。
		parent = firstArg;
		message = args[0];
		caption = args[1];
		yesHandler = args[2];
		noHandler = args[3];

		dialog = getVisibleYesNoDialogLayerFromCache();
		if(dialog === void)
		{
			dialog = createYesNoDialog(parent, message);
			dialog.messageText = message;
			//dialog.captionText = caption;
			dialog.checkMessageText = '';
			dialog.yesHandler = yesHandler;
			dialog.noHandler = noHandler;
			dialog.show();
		}
	}
	else
	{
		// NOTE:
		// こちらは同期実行になります。
		parent = void;
		message = firstArg;
		caption = args[0];
		yesHandler = args[1];
		noHandler = args[2];

		dialog = createYesNoDialog(message);
		dialog.caption = caption;
		dialog.showModal();

		var result = dialog.result;

		invalidate dialog;
		dialog = void;

		switch(result)
		{
		case 'yes':		yesHandler() if yesHandler !== void;
		case 'no':		noHandler() if noHandler !== void;
		}
	}

	return dialog;
}

// ◆YesNoと次回も確認するかどうか確認
function askYesNoConfirm(firstArg, args*)
{
	var checkMessage = '次回からは確認しない';
	var parent, message, caption, initialCheckedStatus, yesHandler, noHandler;
	var dialog;

	if(firstArg instanceof 'Layer')
	{
		// NOTE:
		// こちらは非同期実行になります。
		parent = firstArg;
		message = args[0];
		caption = args[1];
		initialCheckedStatus = args[2];
		yesHandler = args[3];
		noHandler = args[4];

		dialgo = getVisibleYesNoDialogLayerFromCache();
		if(dialog === void)
		{
			dialog = createYesNoDialog(parent, message);
			dialog.messageText = message;
			//dialog.captionText = caption;
			dialog.checked = initialCheckedStatus;
			dialog.checkMessageText = checkMessage;
			dialog.yesHandler = yesHandler;
			dialog.noHandler = noHandler;
			dialog.show();
		}
	}
	else
	{
		// NOTE:
		// こちらは同期実行になります。
		parent = void;
		message = firstArg;
		caption = args[0];
		initialCheckedStatus = args[1];
		yesHandler = args[2];
		noHandler = args[3];

		dialog = createYesNoDialog(message, checkMessage);
		dialog.caption = caption;
		dialog.checked = initialCheckedStatus;
		dialog.showModal();

		var result = dialog.result;
		var noConfirm = dialog.checked;

		invalidate dialog;
		dialog = void;

		switch(result)
		{
		case 'yes':		yesHandler(noConfirm) if yesHandler !== void;
		case 'no':		noHandler(noConfirm) if noHandler !== void;
		}
	}

	return dialog;
}

global.graphicFileExtensions = ['.png', '.tlg', '.bmp', '.jpg', '.jpeg'];
global.soundFileExtensions = ['.ogg', '.tcw', '.wav'];
global.scriptFileExtensions = ['.gs', '.ks', '.gss', '.kss', '.asd', '.asdx'];
global.otherFileExtensions = ['.dic', '.ary', '.txt'];

/*! \brief 指定されたストレージ名について指定の拡張子が存在するか確認します。
 *
 * \param [storage] 調べたいストレージ名の拡張子を除いたファイル名を指定します。
 * \param [extensions*] 調べたい拡張子を指定します。
 *
 * \return 指定された storage に対して最初に見つかった extensions のインデックスを返します。
 * \return 見つからなかった場合は -1 を返します。
**/
function findExistentStorageExtension(storage, extensions*)
{
	var func = Storages.isExistentStorage;
	var c = extensions.count;

	for(var i = 0; i < c; i++)
	{
		if(func(@"&storage;&extensions[i];"))
			return i;
	}

	return -1;
}

/*! \brief 指定されたストレージ名について指定の拡張子が存在するか確認します。
 *
 * \param [storage] 調べたいストレージ名の拡張子を除いたファイル名を指定します。
 * \param [extensions*] 調べたい拡張子を指定します。
 *
 * \return 指定された storage について、最初に見つかった拡張子を繋げたストレージ名を返します。
 * \return 見つからなかった場合は void を返します。
**/
function getExistentStorageNameAndExtension(storage, extensions*)
{
	var index = findExistentStorageExtension(storage, extensions*);

	if(index != -1)
		return @"&storage;&extensions[index];";

	return void;
}

/*! \brief min 〜 max の乱数を返す。
**/
function intRandom(min = 0, max = 0)
{
	min <-> max if min > max;

	return int(Math.random() * (max - min + 1)) + min;
}

/* 行列計算 */

/**
 * 度数法における角度 angle をラジアン角に変換して返す。
 *
 * angle = 0 〜 360 の範囲の整数、または実数。
**/
function toRadian(angle)
{
	return angle * Math.PI / 180;
}

/**
 * 回転移動行列を作成して返す。
 *
 * rad = 回転角（ラジアン）
 * tx  = Ｘ移動量
 * ty  = Ｙ移動量
**/
function rotateM(radx, rady = radx, tx = 0, ty = 0)
{
	var sin = Math.sin(radx);
	var cos = Math.cos(rady);

	return [
	//    1     2     3
	// |----|-----|-----+
		cos, -sin, // 0 | 1
		sin,  cos, // 0 | 2
		tx,    ty  // 1 | 3
	];
}

/**
 * 拡大縮小行列を作成して返す。
 *
 * sx = Ｘスケール
 * sy = Ｙスケール
**/
function scaleM(sx, sy = sx)
{
	return [
	//    1     2     3
	// |----|-----|-----+
		 sx,    0, // 0 | 1
		  0,   sy, // 0 | 2
		  0,    0  // 1 | 3
	];
}

/**
 * 移動行列を作成して返す。
 *
 * tx = Ｘ移動量
 * ty = Ｙ移動量
**/
function transM(tx, ty)
{
	return [
	//    1     2     3
	// |----|-----|-----+
		  1,    0, // 0 | 1
		  0,    1, // 0 | 2
		 tx,   ty  // 1 | 3
	];
}

/**
 * 行列の和
**/
function addM(m1, m2)
{
	return [
		m1[0] + m2[0], m1[1] + m2[1],
		m1[2] + m2[2], m1[3] + m2[3],
		m1[4] + m2[4], m1[5] + m2[5]
	];
}

/**
 * 行列の差
**/
function subM(m1, m2)
{
	return [
		m1[0] - m2[0], m1[1] - m2[1],
		m1[2] - m2[2], m1[3] - m2[3],
		m1[4] - m2[4], m1[5] - m2[5]
	];
}

/**
 * 行列の積
**/
function mulM(m1, m2)
{
	return [
		m1[0] * m2[0] + m1[1] * m2[2] + 0 * m2[4], m1[0] * m2[1] + m1[1] * m2[3] + 0 * m2[5],
		m1[2] * m2[0] + m1[3] * m2[2] + 0 * m2[4], m1[2] * m2[1] + m1[3] * m2[3] + 0 * m2[5],
		m1[4] * m2[0] + m1[5] * m2[2] + 1 * m2[4], m1[4] * m2[1] + m1[5] * m2[3] + 1 * m2[5]
	];
}


