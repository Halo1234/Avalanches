/*
**/


/**/
class GSoundBufferIterator extends GIterator
{
	var volume_ = 100000;

	/**/
	function GSoundBufferIterator(window, container = new GSoundBufferContainer(window))
	{
		super.GIterator(window, container);
	}

	/**/
	function setVolume(volume)
	{
		each(
			function (obj, volume) {
				obj.volume2 = volume;
			} incontextof global,
			volume_ = volume
		);
	}

	/**/
	function create(window)
	{
		return new GWaveSoundBuffer(null, onBufferEvent);
	}

	/**/
	function initialize(obj, index)
	{
		obj.volume2 = volume_;
	}

	/**/
	function store(tick)
	{
		var dic = super.store(...);

		dic.volume = volume_;

		return dic;
	}

	/**/
	function restore(dic, tick)
	{
		volume_ = dic.volume;

		super.restore(...);
	}

	/**/
	function onBufferEvent(obj, event, elm)
	{
	}

	/**/
	property prefix
	{
		// かならず派生先でこれを一意なものにオーバーライドしてください。
		getter		{ return "buffer"; }
	}

	/**/
	property volume
	{
		setter(x)	{ setVolume(x); }
		getter		{ return volume_; }
	}
}


