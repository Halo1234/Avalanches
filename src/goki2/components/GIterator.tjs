/*
**/


/*! \brief イテレータの基本クラスです。
**/
class GIterator
{
	var window_;
	var container_;

	var keys_ = [];

	/**/
	function GIterator(window, container = new GContainer(this))
	{
		window_ = window;
		container_ = container;
	}

	function finalize()
	{
		clear();
	}

	/**/
	function create(window)
	{
		return void;
	}

	/**/
	function initialize(obj, index)
	{
	}

	/**/
	function realloc(count)
	{
		var container = container_;
		var keys = keys_;
		var c = keys.count;

		if(c < count)
		{
			// 増える
			var name, obj;

			for(var i = c; i < count; i++)
			{
				keys.add(name = @"&prefix;&i;");
				initialize(obj = create(window), i);
				container.add(name, obj);
			}
		}
		else
		if(c > count)
		{
			// 減る
			var obj;

			for(var i = c - 1; i >= count; i--)
			{
				obj = container.erase(@"&prefix;&i;");
				invalidate obj if obj !== void;
			}

			keys.count = count;
		}
	}

	/**/
	function at(index)
	{
		var keys = keys_;

		// NOTE: エラーにはしない。
		if(index >= keys.count)
			return void;

		return container_.get(keys[index]);
	}

	/**/
	function find(obj)
	{
		with(container_)
		{
			var keys = keys_;

			for(var i = keys.count - 1; i >= 0; i--)
			{
				if(.get(keys[i]) === obj)
					return i;
			}
		}

		return -1;
	}

	/**/
	function clear()
	{
		realloc(0);
	}

	/**/
	function each(block, arguments*)
	{
		var container = container_;
		var keys = GObjectUtils.duplicate(keys_);
		var count = keys.count;

		for(var i = 0; i < count; i++)
			block(container.get(keys[i]), arguments*);
	}

	/**/
	function eachIndex(block, arguments*)
	{
		var container = container_;
		var keys = GObjectUtils.duplicate(keys_);
		var count = keys.count;

		for(var i = 0; i < count; i++)
			block(container.get(keys[i]), i, arguments*);
	}

	/**/
	function store(tick)
	{
		var dic = %[objects : [], count : keys_.count];

		for(var i = dic.count - 1; i >= 0; i--)
		{
			with(at(i))
				dic.objects[i] = .store(tick);
		}

		return dic;
	}

	/**/
	function restore(dic, tick)
	{
		realloc(dic.count);

		for(var i = dic.count - 1; i >= 0; i--)
		{
			with(at(i))
				.restore(dic.objects[i]);
		}
	}

	property window
	{
		getter		{ return window_; }
	}

	property container
	{
		getter		{ return container_; }
	}

	property count
	{
		setter(x)	{ realloc(x); }
		getter		{ return keys_.count; }
	}

	property prefix
	{
		getter		{ return 'object'; }
	}
}


