/*
 $Author$
 $Revision$
*/


/**
 * GLayer/GFocus を項目として扱う事を目標としています。
 *
 * 一次元のソフトフォーカスエミュレーターです。
 * 二次元管理を行う場合は GFocus2D を利用してください。
**/
class GFocus
{
	var name;

	var items_ = [];
	var focusItemIndex_ = -1;

	var clickToKill = true;					// click() 呼び出し後に kill() するかどうか
	var terminate = false;					// 最後の項目の次に仮想の項目を追加するかどうか
	var visible_ = true;
	var enabled_ = true;

	var originalEnabledProperties_ = [];	// 元のプロパティ
	var originalVisibleProperties_ = [];	//
	var originalEnabledValueCache_ = [];	// 元のプロパティの値
	var originalVisibleValueCache_ = [];	//

	function GFocus(name = void)
	{
		this.name = (name === void ? GObjectUtils.getClassName(this) : name);
	}

	function finalize()
	{
		clear();
	}

	/**
	 * add()/insert()/remove() は item 引数をそのまま返します。
	 * ※実際に追加／削除が行われなくても必ず返します。
	**/
	function add(item)
	{
		with(items_)
		{
			if(.find(item) == -1)
			{
				.add(item);

				// このフォーカスが無効ならば項目も無効化する
				exchangeEnabledPropertyBypass_private_(.count - 1) if !enabled;
				// このフォーカスが不可視ならば項目も不可視にする
				exchangeVisiblePropertyBypass_private_(.count - 1) if !visible;
			}
		}

		return item;
	}

	function insert(index, item)
	{
		with(items_)
		{
			if(.find(item) == -1)
			{
				.insert(index, item);

				// このフォーカスが無効ならば項目も無効化する
				exchangeEnabledPropertyBypass_private_(index) if !enabled;
				// このフォーカスが不可視ならば項目も不可視にする
				exchangeVisiblePropertyBypass_private_(index) if !visible;
			}
		}

		return item;
	}

	function remove(item)
	{
		var items = items_;
		var index = items.find(item);

		if(index != -1)
		{
			restoreEnabledProperty_private_(index);
			restoreVisibleProperty_private_(index);
			items.remove(item);

			focusItemIndex_ = items.count - 1 if focusItemIndex_ >= items.count;

			if(focusItemIndex_ != -1 && enabled && visible)
			{
				// NOTE:
				// GFocus がフォーカスされる場合は移動方向がわからないので何もしない。
				if(!(items[focusItemIndex_] instanceof 'GFocus'))
					onFocused(items[focusItemIndex_]);
			}
		}

		return item;
	}

	function clear()
	{
		var items = items_;

		for(var i = 0; i < items.count; i++)
		{
			if(isvalid items[i])
			{
				restoreEnabledProperty_private_(i);
				restoreVisibleProperty_private_(i);
			}
		}
		items.clear();
		focusItemIndex_ = -1;	// kill() を呼ばない
	}

	function at(index)
	{
		return items_[index];
	}

	function find(obj)
	{
		var items = items_;

		for(var i = 0; i < items.count; i++)
		{
			if(items[i] === obj)
				return i;
		}

		return -1;
	}

	function each(block, arg*)
	{
		var items = items_;

		for(var i = 0; i < items.count; i++)
			block(items[i], i, arg*);
	}

	/**
	 * 一次元管理なので moveLeft()/moveUp と moveRight()/moveDown() は
	 * 基本的には同じ処理を行っています。
	 * 下位の GFocus/GFocus2D に方向を伝播させるために
	 * 同じような処理でもこのような実装になっています。
	**/
	function moveLeft(loop = false)
	{
		var items = items_;
		var count = items.count;
		var f = focusItemIndex_;

		// 移動不可
		if(!visible_ || !enabled_ || count <= 0)
			return false;
		// 前にいけない
		if(f == 0 && !loop)
		{
			// 最初の項目が GFocus なら moveLeft を呼び出してやる
			if(items[0] instanceof "GFocus")
			{
				if(items[0].moveLeft(false))
					return true;
			}
			// 移動できない
			kill();
			return false;
		}

		// この時点でフォーカスされている項目は最初の項目ではない事が確定
		// 現在の項目が GFocus なら moveLeft を呼び出してやる
		if(f != -1 && items[f] instanceof "GFocus")
		{
			if(items[f].moveLeft(false))
				return true;
			// 前にいけなかった
			// この場合このインスタンスの次の項目へ移動させる必要があるが
			// items[f]がフォーカスを持っている状態は好ましくないので殺す
			items[f].kill();
		}

		// 前の項目に移動する
		f--;
		for(var i = 0; i < count; i++, f--)
		{
			if(f < 0)
			{
				// ループしないなら抜ける。
				// ただしもともとフォーカスを持っていない場合１回はループする。
				if(!loop && focusItemIndex_ != -1)
					break;
				f = terminate ? count : count - 1;
			}

			if(terminate && f == count)
			{
				focusItemIndex_ = f;
				onTerminateObjectFocused();
				return true;
			}

			// 表示されている、かつ有効な状態であれば決定
			if(items[f].visible && items[f].enabled)
			{
				if(items[f] instanceof "GFocus")
				{
					if(items[f].moveLeft(false))
					{
						focusItemIndex_ = f;
						return true;
					}
				}
				else
				{
					// 更新
					onFocused(items[focusItemIndex_ = f]);
					return true;
				}
			}
		}

		kill();

		return false;
	}

	function moveRight(loop = false)
	{
		var items = items_;
		var count = items.count;
		var f = focusItemIndex_;

		// 移動不可
		if(!visible_ || !enabled_ || count <= 0)
			return false;
		// 次にいけない
		if(f == (count - 1) && !loop)
		{
			// 最後の項目が GFocus なら moveRight を呼び出してやる
			if(items[f] instanceof "GFocus")
			{
				if(items[f].moveRight(false))
					return true;
			}
			// 移動できない
			kill();
			return false;
		}

		// この時点でフォーカスされている項目は最後の項目ではないか、
		// ターミネートオブジェクトのどちらか。
		// 現在の項目が GFocus なら moveRight を呼び出してやる
		if(f != -1 && items[f] instanceof "GFocus")
		{
			if(items[f].moveRight(false))
				return true;
			// 次にいけなかった
			// この場合このインスタンスの次の項目へ移動させる必要があるが
			// items[f]がフォーカスを持っている状態は好ましくないので殺す
			items[f].kill();
		}

		// 次の項目に移動する
		f++;
		for(var i = 0; i < count; i++, f++)
		{
			if(f >= items.count)
			{
				if(!terminate || (terminate && f > items.count))
				{
					// ループしないなら抜ける
					if(!loop)
						break;
					f = 0;
				}
			}

			if(terminate && f == count)
			{
				focusItemIndex_ = f;
				onTerminateObjectFocused();
				return true;
			}

			// 表示されている、かつ有効な状態であれば処理する。
			if(items[f].visible && items[f].enabled)
			{
				if(items[f] instanceof "GFocus")
				{
					if(items[f].moveRight(false))
					{
						focusItemIndex_ = f;
						return true;
					}
				}
				else
				{
					// 更新
					onFocused(items[focusItemIndex_ = f]);
					return true;
				}
			}
		}

		kill();

		return false;
	}

	function moveUp(loop = false)
	{
		var items = items_;
		var count = items.count;
		var f = focusItemIndex_;

		// 移動不可
		if(!visible_ || !enabled_ || count <= 0)
			return false;
		// 前にいけない
		if(f == 0 && !loop)
		{
			// 最初の項目が GFocus なら moveUp を呼び出してやる
			if(items[0] instanceof "GFocus")
			{
				if(items[0].moveUp(false))
					return true;
			}
			// 移動できない
			// 必要ならばフォーカスを殺す
			kill();
			return false;
		}

		// この時点でフォーカスされている項目は最初の項目ではない事が確定
		// 現在の項目が GFocus なら moveUp を呼び出してやる
		if(f != -1 && items[f] instanceof "GFocus")
		{
			if(items[f].moveUp(false))
				return true;
			// 前にいけなかった
			// この場合このインスタンスの次の項目へ移動させる必要があるが
			// items[f]がフォーカスを持っている状態は好ましくないので殺す
			items[f].kill();
		}

		// 前の項目に移動する
		f--;
		for(var i = 0; i < count; i++, f--)
		{
			if(f < 0)
			{
				// ループしないなら抜ける。
				// ただしもともとフォーカスを持っていない場合１回はループする。
				if(!loop && focusItemIndex_ != -1)
					break;
				f = terminate ? count : count - 1;
			}

			if(terminate && f == count)
			{
				focusItemIndex_ = f;
				onTerminateObjectFocused();
				return true;
			}

			// 表示されている、かつ有効な状態であれば決定
			if(items[f].visible && items[f].enabled)
			{
				if(items[f] instanceof "GFocus")
				{
					if(items[f].moveUp(false))
					{
						focusItemIndex_ = f;
						return true;
					}
				}
				else
				{
					// 更新
					onFocused(items[focusItemIndex_ = f]);
					return true;
				}
			}
		}

		kill();

		return false;
	}

	function moveDown(loop = false)
	{
		var items = items_;
		var count = items.count;
		var f = focusItemIndex_;

		// 移動不可
		if(!visible_ || !enabled_ || count <= 0)
			return false;
		// 次にいけない
		if(f == (count - 1) && !loop)
		{
			// 最後の項目が GFocus なら moveDown を呼び出してやる
			if(items[f] instanceof "GFocus")
			{
				if(items[f].moveDown(false))
					return true;
			}
			// 移動できない
			// 必要ならばフォーカスを殺す
			kill();
			return false;
		}

		// この時点でフォーカスされている項目は最後の項目ではないか、
		// ターミネートオブジェクトのどちらか。
		// 現在の項目が GFocus なら moveDown を呼び出してやる
		if(f != -1 && items[f] instanceof "GFocus")
		{
			if(items[f].moveDown(false))
				return true;
			// 次にいけなかった
			// この場合このインスタンスの次の項目へ移動させる必要があるが
			// items[f]がフォーカスを持っている状態は好ましくないので殺す
			items[f].kill();
		}

		// 次の項目に移動する
		f++;
		for(var i = 0; i < count; i++, f++)
		{
			if(f >= items.count)
			{
				if(!terminate || (terminate && f > items.count))
				{
					// ループしないなら抜ける
					if(!loop)
						break;
					f = 0;
				}
			}

			if(terminate && f == count)
			{
				focusItemIndex_ = f;
				onTerminateObjectFocused();
				return true;
			}

			// 表示されている、かつ有効な状態であれば処理する。
			if(items[f].visible && items[f].enabled)
			{
				if(items[f] instanceof "GFocus")
				{
					if(items[f].moveDown(false))
					{
						focusItemIndex_ = f;
						return true;
					}
				}
				else
				{
					// 更新
					onFocused(items[focusItemIndex_ = f]);
					return true;
				}
			}
		}

		kill();

		return false;
	}

	function click()
	{
		var item = focusItem;

		if(item === void)
			return false;

		var ret = item.click();

		kill() if clickToKill;

		return (ret === void ? false : ret);
	}

	function kill()
	{
		var item = focusItem;

		if(item !== void)
		{
			if(item instanceof "GFocus")
				item.kill();
			else
				item.updateState();
		}

		focusItemIndex_ = -1;

		onKillFocus();
	}

	function exchangeEnabledPropertyBypass_private_(index)
	{
		var items = items_;
		var original = originalEnabledProperties_;

		if(index < 0 || index >= items.count)
			throw new GOutOfRangeError('Access violation in GFocus#exchangeEnabledPropertyBypass_private_().');

		if(!((&original[index]) instanceof "Property"))
		{
			originalEnabledValueCache_[index] = items[index].enabled;
			items[index].enabled = false;
			original[index] = &items[index].enabled;
			&items[index].enabled = ((&widgetEnabledPropertyBypass_) incontextof (Instant(%[focus : this, origin : items[index]])));
		}
	}

	function restoreEnabledProperty_private_(index)
	{
		var items = items_;
		var original = originalEnabledProperties_;

		if(index < 0 || index >= items.count)
			throw new GOutOfRangeError('Access violation in GFocus#restoreEnabledProperty_private_().');

		if((&original[index]) instanceof "Property")
		{
			&items[index].enabled = &original[index];
			&original[index] = void;
			items[index].enabled = originalEnabledValueCache_[index];
		}
	}

	function exchangeVisiblePropertyBypass_private_(index)
	{
		var items = items_;
		var original = originalVisibleProperties_;

		if(index < 0 || index >= items.count)
			throw new GOutOfRangeError('Access violation in GFocus#exchangeEnabledPropertyBypass_private_().');

		if(!((&original[index]) instanceof "Property"))
		{
			originalVisibleValueCache_[index] = items[index].visible;
			items[index].visible = false;
			original[index] = &items[index].visible;
			&items[index].visible = ((&widgetVisiblePropertyBypass_) incontextof (Instant(%[focus : this, origin : items[index]])));
		}
	}

	function restoreVisibleProperty_private_(index)
	{
		var items = items_;
		var original = originalVisibleProperties_;

		if(index < 0 || index >= items.count)
			throw new GOutOfRangeError('Access violation in GFocus#restoreEnabledProperty_private_().');

		if((&original[index]) instanceof "Property")
		{
			&items[index].visible = &original[index];
			&original[index] = void;
			items[index].visible = originalVisibleValueCache_[index];
		}
	}

	/**
	 * フォーカスが移動した時に呼び出されます。
	 * terminated な状態になった時は呼び出されません。
	**/
	function onFocused(item)
	{
		item.centeringMouseCursor();
		item.updateState();

		return true;
	}

	/**
	 * terminated な状態になった時に呼び出されます。
	**/
	function onTerminateObjectFocused()
	{
	}

	/**
	 * kill() された時に呼び出されます。
	 * terminated な状態になった時は呼び出されません。
	**/
	function onKillFocus()
	{
	}

	property count
	{
		getter		{ return items_.count; }
	}

	property focused
	{
		getter		{ return (!enabled_ || focusItemIndex_ == -1 ? false : true); }
	}

	property focusItem
	{
		getter		{ return (focused ? (terminated ? void : items_[focusItemIndex_]) : void); }
	}

	property focusWidget
	{
		// NOTE:
		// このプロパティが GFocus のインスタンスを返す事はありません。
		// ただし最終的に teminated な場合は void を返します。
		getter		{ return ((focusItem instanceof "GFocus") ? focusItem.focusWidget : focusItem); }
	}

	property terminated
	{
		getter		{ return (terminate && focusItemIndex_ == items_.count); }
	}

	/* 表示／非表示状態 */
	property visible
	{
		setter(x)
		{
			if(x)
			{
				if(!visible_)
				{
					var items = items_;
					for(var i = 0; i < items.count; i++)
						restoreVisibleProperty_private_(i);
				}
				visible_ = true;
			}
			else
			{
				if(visible_)
				{
					var items = items_;
					for(var i = 0; i < items.count; i++)
						exchangeVisiblePropertyBypass_private_(i);
					kill();
				}
				visible_ = false;
			}
		}
		getter		{ return visible_; }
	}

	/* 有効／無効状態 */
	property enabled
	{
		setter(x)
		{
			if(x)
			{
				if(!enabled_)
				{
					var items = items_;
					for(var i = 0; i < items.count; i++)
						restoreEnabledProperty_private_(i);
				}
				enabled_ = true;
			}
			else
			{
				if(enabled_)
				{
					var items = items_;
					for(var i = 0; i < items.count; i++)
						exchangeEnabledPropertyBypass_private_(i);
					kill();
				}
				enabled_ = false;
			}
		}
		getter		{ return enabled_; }
	}

	property widgetVisiblePropertyBypass_
	{
		setter(x)	{ focus.originalVisibleValueCache_[focus.find(origin)] = x; }
		getter		{ return false; }
	}

	property widgetEnabledPropertyBypass_
	{
		setter(x)	{ focus.originalEnabledValueCache_[focus.find(origin)] = x; }
		getter		{ return false; }
	}
}

/**
 * GFocus のデバッグプリント用
**/
function dumpGFocusItems(sFocus, level = 0)
{
	var indent = '';
	var obj;

	for(var i = 0; i < level; i++)
		indent += ' ';

	dm(@"&indent;[&sFocus.name;] (enabled:&sFocus.enabled; visible:&sFocus.visible; clickToKill:&sFocus.clickToKill; terminate:&sFocus.terminate;)");
	indent += ' ';

	for(var i = 0; i < sFocus.count; i++)
	{
		obj = sFocus.at(i);
		if(obj instanceof 'GFocus')
			dumpGFocusItems(obj, level + 1);
		else
			dm(@"&indent;&obj.name; [&obj.caption;] (enabled:&obj.enabled; visible:&obj.visible;)");
	}
}


