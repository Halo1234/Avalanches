/*
 * KAGから引っ張ってきたコード
 * いずれ書き直す
**/


/**/
class GLayerSplineMover
{
	var owner_;
	var delayTimer;

	var name;

	var path;
	var time;
	var accel;
	var pointCount;
	var finalFunction;
	var startTick;
	var totalTime;
	var moving = false;
	var first = true;
	var nextStop = false;

	var zx = [];
	var zy = [];

	function GLayerSplineMover(owner)
	{
		owner_ = owner;
	}

	function finalize()
	{
		stop();
		if(delayTimer !== void) invalidate delayTimer;
	}

	function setParameters(path, accel, time, finalFunction)
	{
		this.path = path;
		this.accel = accel;
		this.time = time;
		this.finalFunction = finalFunction;

		totalTime = (pointCount = (path.count \ 3 - 1)) * time;

		if(path.count < 9)
		{
			// 3 点以下 ( 指定するのはそのうちの2点 ) は補完できない
			throw new GRuntimeError('2 点以上を指定してください');
		}

		// スプライン補間に必要なワークを計算
		var points = path.count \ 3;
		var tmpx = [], tmpy = [];
		var tx = zx, ty = zy;
		tx[0] = 0;
		ty[0] = 0;
		tx[points-1] = 0;
		ty[points-1] = 0;

		for(var i = points-2, pi = path.count-6; i >= 0; i--, pi -= 3)
		{
			tmpx[i+1] = (path[pi + 3] - path[pi  ]);
			tmpy[i+1] = (path[pi + 4] - path[pi+1]);
		}

		tx[1] = tmpx[2] - tmpx[1] - tx[0];
		ty[1] = tmpy[2] - tmpy[1] - ty[0];

		tmpx[1] = 4;
		tmpy[1] = 4;

		var lim = points - 2;
		for(var i = 1, pi = 3; i < lim; i++, pi += 3)
		{
			var x = 1 / tmpx[i];
			var y = 1 / tmpy[i];
			tx[i+1] = tmpx[i+2] - tmpx[i+1] - tmpx[i] * x;
			ty[i+1] = tmpy[i+2] - tmpy[i+1] - tmpy[i] * y;
			tmpx[i+1] = 4 - x;
			tmpy[i+1] = 4 - y;
		}

		tx[points-2] -= tx[points-1];
		ty[points-2] -= ty[points-1];

		for(var i = points-2, pi = path.count-6; i>0; i--, pi -= 3)
		{
			tx[i] = (tx[i] - tx[i+1]) / tmpx[i];
			ty[i] = (ty[i] - ty[i+1]) / tmpy[i];
		}
	}

	function start(delay)
	{
		// 移動を開始する
		if(delay != 0)
		{
			delayTimer = new Timer(onDelayTimer, '');
			delayTimer.interval = delay;
			delayTimer.enabled = true;
			moving = true;
		}
		else
		{
			System.addContinuousHandler(handler); // ContinuousHandlers に追加
			moving = true;
		}
	}

	function onDelayTimer()
	{
		// delayTimer が発動した
		delayTimer.enabled = false;
		System.addContinuousHandler(handler);
	}

	function stop()
	{
		// 移動を終わる
		if(moving)
		{
			// 最終位置に移動
			if(owner_ isvalid)
			{
				var idx = int(pointCount*3);
				var p = path;
				owner_.setPos(p[idx], p[idx+1]);
				owner_.opacity = p[idx+2];
			}
			System.removeContinuousHandler(handler);
			moving = false;
			finalFunction(owner_, 'onStopMover', %[]) if finalFunction !== void;
		}
	}

	function handler(tick)
	{
		// 移動中に呼ばれる
		if(nextStop || !(owner_ isvalid)) { stop();  return; }
		if(first) startTick = tick, first = false;
		tick -= startTick;
		if(tick >= totalTime)
		{
			nextStop = true;
			var idx = int(pointCount*3);
			var p = path;
			owner_.setPos(p[idx], p[idx+1]);
			owner_.opacity = p[idx+2];
			return;
		}

		if(accel < 0)
		{
			// 上弦 ( 最初が動きが早く、徐々に遅くなる )
			tick = 1.0 - tick / totalTime;
			tick = Math.pow(tick, -accel);
			tick = int ( (1.0 - tick) * totalTime );
		}
		else if(accel > 0)
		{
			// 下弦 ( 最初は動きが遅く、徐々に早くなる )
			tick = tick / totalTime;
			tick = Math.pow(tick, accel);
			tick = int ( tick * totalTime );
		}

		move(tick);
	}

	function move(tick)
	{
		var index;
		var pindex = (index = tick \ time) * 3;
		var d = tick % time / time;

		var p = path;

		var l = (((zx[index+1] - zx[index])*d +
				zx[index]*3)*d +
				((p[pindex + 3] - p[pindex]) -
				(zx[index]*2 + zx[index+1]))) * d +
				p[pindex];

		var t = (((zy[index+1] - zy[index])*d +
				zy[index]*3)*d +
				((p[pindex + 4] - p[pindex+1]) -
				(zy[index]*2 + zy[index+1]))) * d +
				p[pindex+1];

		var so = p[pindex+2];
		var eo = p[pindex+5];

		var o = eo >= 256 ? so : int((eo-so)*d + so);

		owner_.setPos(l, t);
		owner_.opacity = o;
	}

	property running
	{
		getter		{ return moving; }
	}

	property endlessRunning
	{
		getter		{ return false; }
	}
}


