/*
 $Author: halo $
 $Revision: 339 $
*/


/**
 * \remarks このクラスは WaveSoundBuffer を継承していないので注意してください。
 * \remarks WaveSoundBuffer のインスタンスが必要なのであれば
 * \remarks buffer1/buffer2 プロパティからバッファを取得してください。
 * \remarks
 * \remarks buffer1
 * \remarks  メインで再生されている GWaveSoundBuffer インスタンスです。
 * \remarks buffer2
 * \remarks  サブで再生されている GWaveSoundBuffer インスタンスです。
 * \remarks
 * \remarks buffer1/buffer2 は常に参照が入れ替わる可能性があります。
 * \remarks そのため、外部でこれらの参照を保存して直接操作する事は非推奨とします。
**/
class GWaveSoundBuffer2
{
	var owner_;
	var handler;

	var buffer1_;
	var buffer2_;

	/**/
	function GWaveSoundBuffer2(owner, handler = void)
	{
		owner_ = owner;
		this.handler = handler;

		buffer1_ = new GWaveSoundBuffer(this, onInternalEventHandler);
		buffer2_ = GObjectUtils.clone(buffer1_, this, onInternalEventHandler);
	}

	/**/
	function finalize()
	{
		invalidate buffer1_;
		invalidate buffer2_;
	}

	/**/
	function fade(to, time, delay = 0)
	{
		buffer1_.fade(...);
	}

	/**/
	function open(storage)
	{
		buffer1_.open(storage);
	}

	/**/
	function setLabel(label)
	{
		buffer1_.setLabel(label);
	}

	/**/
	function play()
	{
		buffer1_.play();
	}

	/**/
	function stop()
	{
		buffer1_.stop();
		buffer2_.stop();
	}

	/**/
	function stopFade()
	{
		buffer1_.stopFade();
		buffer2_.stopFade();
	}

	/**/
	function fadein(time, delay = 0)
	{
		buffer1_.fadein(...);
	}

	/**/
	function fadeout(time, delay = 0)
	{
		buffer1_.fadeout(...);
	}

	/**/
	function crossfade(storage, time, overlap, delay = 0)
	{
		overlap = time if time < overlap;

		if(playing && currentStorage == storage)
			return;

		fadeout(time);

		// バッファ入れ替え
		buffer1_ <-> buffer2_;

		open(storage);
		fadein(time, time - overlap);
	}

	/**/
	function callHandler(message, emelents = void)
	{
		var h = handler;

		if(h === void)
			return void;

		return h(this, message, emelents);
	}

	/**/
	function callHandlerAtNextCycle(message, elements = void)
	{
		anotherCycle.add(callHandler, message, elements);
	}

	/**/
	function store(tick)
	{
		return buffer1_.store(tick);
	}

	/**/
	function restore(dic, tick)
	{
		// 復帰するのはメインのみ
		buffer1_.restore(dic, tick);
	}

	/**/
	function action(ev)
	{
		// 外部通知は buffer1 のイベントのみ行う
		if(ev.target === buffer1_)
		{
			ev.target = this;
			owner_.action(ev) if owner_ !== null;
		}
	}

	/**/
	function onInternalEventHandler(obj, event, elm)
	{
		// 外部通知は buffer1 のイベントのみ行う
		callHandler(...) if obj === buffer1_;
	}

	/**/
	property buffer1
	{
		getter		{ return buffer1_; }
	}

	/**/
	property buffer2
	{
		getter		{ return buffer2_; }
	}

	/**/
	property type
	{
		getter		{ return 'WAVE'; }
	}

	/**/
	property name
	{
		setter(x)	{ buffer1_.name = buffer2_.name = x; }
		getter		{ return buffer1_.name; }
	}

	/**/
	property currentStorage
	{
		getter		{ return buffer1_.currentStorage; }
	}

	/**/
	property looping
	{
		setter(x)	{ buffer1_.looping = buffer2_.looping = x; } 
		getter		{ return buffer1_.looping; }
	}

	/**/
	property volume
	{
		setter(x)	{ buffer1_.volume = buffer2_.volume = x; }
		getter		{ return buffer1_.volume; }
	}

	/**/
	property volume2
	{
		setter(x)	{ buffer1_.volume2 = buffer2_.volume2 = x; }
		getter		{ return buffer1_.volume2; }
	}

	/**/
	property paused
	{
		setter(x)	{ buffer1_.paused = buffer2_.paused = x; }
		getter		{ return buffer1_.paused; }
	}

	/**/
	property fadeStatus
	{
		getter		{ return buffer1_.fadeStatus; }
	}

	/**/
	property playing
	{
		getter		{ return buffer1_.playing; }
	}
}


