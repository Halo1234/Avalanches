/*
 * $Author$
 * $Revision$
**/

/**/
class ModBookmark extends GModule
{
	var firstStored_ = false;
	var possibleSave_ = false;
	var possibleLoad_ = true;

	var storeAndSave = true;						// false ならセーブもストアもしない

	var storeSkipping = false;

	var context_ = %[
		name : '',
		format : '',
		thumbnailWidth : 150,
		thumbnailHeight : 'auto',
		thumbnailInfo : %[],
		keepAspectRatio : true,
		storagePrefix : 'save',
		storageSuffix : '',
		mode : '',
		lastSaveNumber : -1,
		lastLoadNumber : -1,
		entries : %[]
	];

	var currentLabelName_ = '';						// 現在のラベル名
	var currentPageName_ = '';						// 現在のページ名
	var currentReadingFlagName = '';				// 現在の既読フラグ名
	var readingFlagRecording = true;				// 既読フラグの記録を行うかどうか
	var cancelSkipQuery = false;					// ラベル通過時にスキップをキャンセルするかどうか

	var userFlags_ = %[];							// セーブデータ
	var temporaryFlags_ = %[];						// 一時変数領域

	var startAnchorEnabled_ = false;				// 最初に戻る機能が有効かどうか

	var pushRecordAnchorInNextLabel_ = false;
	var recordAnchorEnabled_ = false;				// 一つ前に戻る機能が使えるかどうか
	var recordAnchorStack_ = [];					// 同機能用のスタック
	var recordAnchorStackSize_ = 5;					// 同機能用のスタックの最大深度

	var systemUserFlags_ = %[];						// 外部用フラグ領域
	var systemCoreFlags_ = %[];						// 既読フラグなど

	var systemFlagsLoaded_ = false;					// system****Flags をロードしたかどうか

	function ModBookmark(container, name)
	{
		super.GModule(...);

		with(window)
		{
			var path = @"&System.exePath;/savedata/";

			if(.getLocation(name) === void)
				.makeLocation(name, path, '');

			Debug.logLocation = path;
		}

		calculateThumbnailSize_private_(context_);
	}

	function finalize()
	{
		window.removeLocation(name);

		super.finalize();
	}

	/**/
	function createExtensionTagHandlers()
	{
		return %[

			/* @bookmark */
			'bookmark' => function (elm) {
				with(context_)
				{
					.format = elm.format if elm.format !== void;
					if(elm.width !== void || elm.height !== void)
					{
						if(elm.width !== void)
							.thumbnailWidth = (elm.width == "auto" ? elm.width : +elm.width);
						if(elm.height !== void)
							.thumbnailHeight = (elm.height == "auto" ? elm.height : +elm.height);
					}
					.keepAspectRatio = +elm.keepAspectRatio if elm.keepAspectRatio !== void;
					.storagePrefix = elm.prefix if elm.prefix !== void;
					.storageSuffix = elm.suffix if elm.suffix !== void;
					.mode = elm.mode if elm.mode !== void;
					storeSkipping = GObjectUtils.getBoolean(elm, 'store_skipping') if GObjectUtils.hasValue(elm, 'store_skipping');
					calculateThumbnailSize_private_(context_);
				}
				storeAndSave = GObjectUtils.getBoolean(elm, 'store_and_save') if GObjectUtils.hasValue(elm, 'store_and_save');
			} incontextof this,

			/* @clear_system_variables */
			'clear_system_variables' => function (elm) {
				GObjectUtils.clearDictionary(systemUserFlags_);
			} incontextof this,

			/* @clear_variables */
			'clear_variables' => function (elm) {
				GObjectUtils.clearDictionary(userFlags_);
			} incontextof this,

			/* @copy_bookmark */
			'copy_bookmark' => function (elm) {
				copySaveData(+elm.source, +elm.destination);
			} incontextof this,

			/* @disable_store */
			'disable_store' => function (elm) {
				possibleSave_ = !GObjectUtils.getBoolean(elm, 'store', true);
				possibleLoad_ = !GObjectUtils.getBoolean(elm, 'restore', false);
			} incontextof this,

			/* @store */
			'store' => function (elm) {
				storeAndSave = GObjectUtils.getBoolean(elm, 'enabled') if GObjectUtils.hasValue(elm, 'enabled');
			} incontextof this,

			/* @erase_bookmark */
			'erase_bookmark' => function (elm) {
				eraseBookmark(+elm.number);
			} incontextof this,

			/* @record */
			'record' => function (elm) {
				pushRecordAnchor();
			} incontextof this,

			/* @go_back */
			'go_back' => function (elm) {
				popRecordAnchor(GObjectUtils.getBoolean(elm, 'ask'));
			} incontextof this,

			/* @start_anchor */
			'start_anchor' => function (elm) {
				if(GObjectUtils.getBoolean(elm, 'enabled', true))
					saveStartAnchor();
				else
					startAnchorEnabled_ = false;
			} incontextof this,

			/* @go_to_start */
			'go_to_start' => function (elm) {
				loadStartAnchor(GObjectUtils.getBoolean(elm, 'ask'));
			} incontextof this,

			/* @save */
			'save' => function (elm) {
				save(+elm.place);
			} incontextof this,

			/* @load */
			'load' => function (elm) {
				load(+elm.place);
			} incontextof this,

			/* @save_temporary */
			'save_temporary' => function (elm) {
				saveTemporary(+elm.place);
			} incontextof this,

			/* @load_temporary */
			'load_temporary' => function (elm) {
				loadTemporary(+elm.place);
			} incontextof this,

			/* @load_system_variables */
			'load_system_variables' => function (elm) {
				loadSystemVariables();
			} incontextof this,
		];
	}

	/**/
	function setCurrentReadingFlag(mark = true)
	{
		if(!readingFlagRecording)
			return;

		var core = systemCoreFlags_;
		var key = currentReadingFlagName;

		if(key != '')
		{
			core[key] = mark;
		}
	}

	/**/
	function getCurrentReadingFlag()
	{
		if(!readingFlagRecording)
			return true;

		var core = systemCoreFlags_;
		var key = currentReadingFlagName;

		return core[key];
	}

	/**/
	function makeReadingRecordFlagName(label)
	{
		var storage = window.conductor.curStorage;

		storage = Storages.chopStorageExt(Storages.extractStorageName(storage));

		if(label != '' && label[0] == '*')
			label = label.substring(1);

		return @"@&storage;_&label;";
	}

	/**
	 * \brief 既読処理
	 * \brief label が既読なら true を返す。
	 * \brief それ以外ならば false を返す。
	**/
	function readingRecord(label)
	{
		setCurrentReadingFlag();
		currentReadingFlagName = makeReadingRecordFlagName(label);

		return getCurrentReadingFlag();
	}

	/**
	 * \brief 直前のセーブ可能ラベル位置を保存します。
	**/
	function saveStartAnchor()
	{
		// セーブしない
		if(!storeAndSave)
			return;

		var temp = window.temporaryLocation;

		container.callHandler("onSaveStartAnchor", userFlags_);

		var core;

		temp.load("core", core = %[]);
		temp.save("startAnchorCore", core);

		startAnchorEnabled_ = true;
	}

	function loadStartAnchor_private_()
	{
		with(window)
		{
			var temp = .temporaryLocation;

			.restore(temp.load('startAnchorCore', %[]));

			container.callHandler('onLoadStartAnchor', userFlags_);
		}
	}

	/*
	 * \brief スタート位置として保存された位置に戻ります。
	**/
	function loadStartAnchor(ask = true)
	{
		if(!startAnchorEnabled_)
			return;

		if(ask)
		{
			askYesNo(window.primaryLayer, '最初に戻りますか？', '最初に戻る確認', loadStartAnchor_private_, alwaysVoid);
		}
		else
		{
			loadStartAnchor_private_();
		}
	}

	/*
	 * \brief スタート位置として保存された位置を削除します。
	**/
	function removeStartAnchor()
	{
		if(startAnchorEnabled_)
		{
			with(window.temporaryLocation)
			{
				.remove('startAnchorCore');
			}

			startAnchorEnabled_ = false;
		}
	}

	/**/
	function internalPushRecordAnchor_private_()
	{
		var data = %[core : %[], user : userFlags_];

		window.temporaryLocation.load('core', data.core);

		recordAnchorStack_.push(data);

		if(recordAnchorStack_.count > recordAnchorStackSize_)
			recordAnchorStack_.shift();

		if(recordAnchorStack_.count > 0)
			recordAnchorEnabled_ = true;
		else
			recordAnchorEnabled_ = false;
	}

	/**/
	function pushRecordAnchor()
	{
		if(!storeAndSave)
			return false;

		pushRecordAnchorInNextLabel_ = true;

		return true;
	}

	/**/
	function popRecordAnchor_private_()
	{
		var data = recordAnchorStack_.pop();

		GObjectUtils.assignDictionary(userFlags_, data.user);
		window.restore(data.core);
	}

	/**/
	function popRecordAnchor(ask = true)
	{
		if(!recordAnchorEnabled_)
			return false;

		if(recordAnchorStack_.count <= 0)
		{
			recordAnchorEnabled_ = false;

			return false;
		}

		if(ask)
		{
			askYesNo(window.primaryLayer, '一つ前に戻りますか？', '一つ前に戻る確認', popRecordAnchor_private_, alwaysVoid);
		}
		else
		{
			popRecordAnchor_private_();
		}

		return true;
	}

	/**/
	function clearRecordAnchor()
	{
		recordAnchorStack_.clear();
		recordAnchorEnabled_ = false;
	}

	/**
	 * \brief 実際のセーブデータの統一ストレージ名を返します。
	 * \brief 入力されたファイル名から統一ストレージ名に作成して返します。
	**/
	function makeSaveDataStorageName(fileName)
	{
		return saveLocation.makeStoragePath(fileName);
	}

	/**
	 * \brief システムデータ用のファイル名を返します。
	**/
	function makeSystemSaveDataFileName(name)
	{
		var ctx = context_;

		return @"&ctx.storagePrefix;&name;&ctx.storageSuffix;.sd";
	}

	/**
	 * \brief 通常のセーブデータ用のファイル名を返します。
	**/
	function makeSaveDataFileName(number, ext = void)
	{
		var ctx = context_;

		if(ext === void)
		{
			if(ctx.format == "bmp8" || ctx.format == "bmp24")
				ext = ".bmp";
		}

		return @"&ctx.name;/&ctx.storagePrefix;&number;&ctx.storageSuffix;&ext;";
	}

	/**
	 * \brief セーブデータに関する情報を返します。
	 *
	 * \remarks 主な情報は下記の通りです。
	 * \remarks     .date: タイムスタンプ
	 * \remarks .pageName: ページ名（最後に通過したセーブ可能ラベルのページ名）
	 * \remarks  .summary: セーブデータ概要。（自由に設定可能）
	**/
	function getSaveDataInfoByNumber(number, ext = void)
	{
		return getSaveDataInfo(makeSaveDataFileName(...));
	}

	/**
	 * \brief 同上
	**/
	function getSaveDataInfo(key)
	{
		var ctx = context_;

		if(ctx === void)
			return void;
		if(typeof(ctx.entries[key]) == 'undefined')
			ctx.entries[key] = %[];
		return ctx.entries[key];
	}

	/**
	 * \brief セーブデータの存在確認
	**/
	function isExistentSaveDataByNumber(number, ext = void)
	{
		return isExistentSaveData(makeSaveDataFileName(...));
	}

	/**
	 * \brief 同上
	**/
	function isExistentSaveData(fileName)
	{
		return Storages.isExistentStorage(saveLocation.makeStoragePath(fileName));
	}

	/**
	 * \brief システム変数の保存
	**/
	function saveSystemVariables()
	{
		var ctx = context_;
		var data;

		with(window)
		{
			data = %[
				title : System.title,
				id : void, // TODO: 後で
				major : .conductor.majorVersionNumber,
				minor : .conductor.minorVersionNumber,
				special : .conductor.specialVersionString,
				fullscreen : .fullScreen,
				user : systemUserFlags_,
				core : systemCoreFlags_,
				context : context_
			];

			// 保存前に通知
			container.callHandler("onSaveSystemVariables", data.user);
		}

		with(saveLocation)
		{
			.save(makeSystemSaveDataFileName('system'), data, ctx.mode);
			.saveIndex();
		}

		log('==== save system variables.');
	}

	/**
	 * \brief システム変数の復元
	**/
	function loadSystemVariables()
	{
		var ctx = context_;
		var data = %[];

		with(saveLocation)
		{
			var fileName = makeSystemSaveDataFileName('system');

			if(!Storages.isExistentStorage(.makeStoragePath(fileName)))
				return /* ファイルがない */;

			.load(fileName, data, ctx.mode);

			// 妥当性チェック
			if(!(data instanceof 'Dictionary'))
			{
				// Dictionary ではない場合は確実にファイルがおかしい。
				abort(@"「&fileName;」は壊れているか「&System.title;」のセーブデータではありません。");
			}
			else
			{
				// IDが違う場合は abort() する
				if(data.id != void)
				{
					var message = @"このセーブデータは「&data.title;」用のセーブデータです。";

					message += @"(version &data.major;.&data.minor;";
					message += @" [&data.special;]" if data.special != void;
					message += @")\n{&data.id;}" if data.id != void;

					abort(message);
				}
				// セーブデータのバージョンの方が新しい場合は abort() する。
				with(window.conductor)
				{
					if(data.major > .majorVersionNumber || data.minor > .minorVersionNumber)
					{
						abort(
							@"現在のバージョンよりも新しいバージョンのセーブデータです。\n" +
							@"最新のバージョンに更新してください。\n" +
							@"現在のバージョン：&.majorVersionNumber;.&.minorVersionNumber;\n" +
							@"セーブデータのバージョン：&data.major;.&data.minor;"
						);
					}
				}
			}
		}

		systemUserFlags_ = data.user;
		systemCoreFlags_ = data.core;

		context_ = data.context;

		container.callHandler("onLoadSystemVariables", data.user);

		// フルスクリーン状態を復元する
		window.fullScreen = data.fullScreen;

		log('==== load system variables');

		// ロードした
		systemFlagsLoaded_ = true;
	}

	/**/
	function saveTemporary(number)
	{
		if(!storeAndSave)
			return false;

		var data = %[core : %[]];

		window.temporaryLocation.load('core', data.core);
		window.temporaryLocation.save(@"temporary&number;", data);

		return true;
	}

	/**/
	function loadTemporary(number)
	{
		if(!storeAndSave)
			return false;

		var data = %[];

		window.temporaryLocation.load(@"temporary&number;", data);

		window.restore(data.core, System.getTickCount());
	}

	/**
	 * \breif 通常データの保存
	**/
	function save(number, summary = '')
	{
		if(save_private_(makeSaveDataFileName(number), summary))
			context_.lastSaveNumber = number;
	}

	/**/
	function save_private_(fileName, summary)
	{
		// セーブしない
		if(!storeAndSave)
			return false;

		if(!possibleSave_)
			return false;

		var data = %[user : userFlags_];

		window.temporaryLocation.load('core', data.core = %[]);

		var ctx = context_;
		var mode = ctx.mode;

		// サムネイルが必要なら先に保存する
		if(ctx.format != '')
		{
			var snapshot = container.get('ModSnapshot');
			var work = window.temporaryLayer;

			if(snapshot === void)
			{
				// スナップショットが無い場合。
				// 現在のプライマリレイヤの内容をサムネイルとする。
				var src = window.primaryLayer;

				if(src === null)
					throw new IllegalException("スナップショットを取得しようとしましたがプライマリレイヤが見つかりませんでした。");

				work.setSize(src.width, src.height);
				work.piledCopy(0, 0, src, Math.abs(src.imageLeft), Math.abs(src.imageTop), src.width, src.height);
			}
			else
			{
				// スナップショットがある場合。
				// スナップショットを読み込んで使う。
				snapshot.lockSnapshot();
				snapshot.getSnapshotImage(work);
				snapshot.unlockSnapshot();
			}

			// サムネイルを作る
			var layer = new Layer(window, window.primaryLayer);

			layer.face = dfAlpha;
			layer.setImageSize(ctx.thumbnailInfo.imageWidth, ctx.thumbnailInfo.imageHeight);
			layer.fillRect(0, 0, ctx.thumbnailInfo.imageWidth, ctx.thumbnailInfo.imageHeight, 0);
			layer.stretchCopy(
				ctx.thumbnailInfo.left, ctx.thumbnailInfo.top, ctx.thumbnailInfo.width, ctx.thumbnailInfo.height,
				work, 0, 0, work.imageWidth, work.imageHeight
			);

			// サムネイルを保存
			saveLocation.save(fileName, layer, ctx.format);

			// オフセット
			mode += @"o&ctx.thumbnailInfo.size;";

			invalidate layer;
		}

		with(getSaveDataInfo(fileName))
		{
			.date = (new Date()).getTime();
			.pageName = currentPageName_;
			.summary = summary;
			.enabled = true;
		}

		container.callHandler("onSave", data.user, data.core);

		// 状態保存
		saveLocation.save(fileName, data, mode);

		// システム変数を保存
		saveSystemVariables();

		return true;
	}

	/**
	 * \breif 通常データの復元
	**/
	function load(number)
	{
		if(load_private_(makeSaveDataFileName(number)))
			context_.lastLoadNumber = number;
	}

	/**
	 * \breif 同上
	**/
	function load_private_(fileName)
	{
		if(!isExistentSaveData(fileName))
			throw new Exception(@"セーブデータ「&fileName;」が見つかりませんでした。");

		if(!possibleLoad_)
			return false;

		with(getSaveDataInfo(fileName))
		{
			if(!.enabled)
				return false;
		}

		var ctx = context_;
		var mode = ctx.mode;

		if(ctx.format != '')
			mode = @"o&ctx.thumbnailInfo.size;";

		var data = %[];

		saveLocation.load(fileName, data, mode);

		container.callHandler("onLoad", data.user, data.core);

		GObjectUtils.assignDictionary(userFlags_, (data.user === void ? %[] : data.user));

		window.restore(data.core);

		return true;
	}

	/**/
	function copySaveData(src, dest)
	{
		var fileName = makeSaveDataFileName(src);

		if(!isExistentSaveData(fileName))
			throw new Exception(@"セーブデータ「&fileName;」が見つかりませんでした。");

		var ctx = context_;
		var mode = ctx.mode;

		if(ctx.format != '')
		{
			mode = @"o&ctx.thumbnailInfo.size;";

			var layer = new GLayer(window, window.primaryLayer);

			layer.loadImages(fileName);
			layer.setSizeToImageSize();

			saveLocation.save(fileName, layer, ctx.format);
		}

		var srcInfo = getSaveDataInfo(fileName);

		var data = %[];

		saveLocation.load(fileName, data, mode);

		fileName = makeSaveDataFileName(dest);

		with(getSaveDataInfo(fileName))
		{
			.date = srcInfo.date;
			.pageName = srcInfo.pageName;
			.summary = srcInfo.summary;
		}

		saveLocation.save(fileName, data, mode);
	}

	/**/
	function eraseBookmark(number)
	{
		var fileName = makeSaveDataFileName(number);

		with(getSaveDataInfo(fileName))
		{
			.date = void;
			.pageName = void;
			.summary = void;
			.enabled = false;
		}
	}

	/**
	 * \brief サムネイルのさまざまなサイズを計算します。
	**/
	function calculateThumbnailSize_private_(context)
	{
		var iw = context.thumbnailWidth;
		var ih = context.thumbnailHeight;

		if(iw === "auto" && ih === "auto")
		{
			// FIXME: デフォルトの縮小率に縮小してもいいかもしれん
			// FIXME: あんまこの程度でエラーにすんのもあれやし……
			throw new GRuntimeError(
				"サムネイルサイズを計算しようとしましたが、幅と高さの両方が 'auto' です。"
			);
		}

		var wr = window.innerWidth / window.innerHeight;
		var hr = window.innerHeight / window.innerWidth;

		iw = ih * wr if iw == "auto";
		ih = iw * hr if ih == "auto";

		var l = 0, t = 0;
		var w = iw;
		var h = ih;

		// アスペクト比を固定する必要があれば画像サイズを調整する
		if(context.keepAspectRatio)
		{
			if(w < h)
			{
				h = (int)(w * hr);
				t = (ih - h) >> 1;
			}
			else
			if(w > h)
			{
				w = (int)(h * wr);
				l = (iw - w) >> 1;
			}
		}

		iw = (int)iw;
		ih = (int)ih;

		// bmp ファイルサイズ
		var size = 0;
		switch(context.format)
		{
		case "bmp8":	size = ((((iw - 1) >> 2) + 1) << 2) * ih + 1024 + 54; break;
		case "bmp24":	size = (((iw * 3 + 3) >> 2) << 2) * ih + 54; break;
		}

		with(context.thumbnailInfo)
		{
			.imageWidth = iw;
			.imageHeight = ih;
			.left = l;
			.top = t;
			.width = w;
			.height = h;
			.size = size;
		}
	}

	/**/
	function store(tick)
	{
		var dic = super.store(...);

		dic.currentLabelName = currentLabelName_;
		dic.currentPageName = currentPageName_;
		dic.currentReadingFlagName = currentReadingFlagName;
		dic.readingFlagRecording = readingFlagRecording;

		dic.recordAnchorEnabled = recordAnchorEnabled_;
		dic.recordAnchorStack = recordAnchorStack_;
		dic.recordAnchorStackSize = recordAnchorStackSize_;

		dic.startAnchorEnabled = startAnchorEnabled_;

		return dic;
	}

	/**/
	function restore(dic, tick)
	{
		super.restore(...);

		// この時点で true が確定する
		storeAndSave = true;

		currentLabelName_ = dic.currentLabelName;
		currentPageName_ = dic.currentPageName;
		currentReadingFlagName = dic.currentReadingFlagName;
		readingFlagRecording = dic.readingFlagRecording;

		recordAnchorEnabled_ = dic.recordAnchorEnabled;
		recordAnchorStack_ = dic.recordAnchorStack;
		recordAnchorStackSize_ = dic.recordAnchorStackSize;

		startAnchorEnabled_ = dic.startAnchorEnabled;

		pushRecordAnchorInNextLabel_ = false;
	}

	/**/
	function onAttach(name)
	{
		global.f = userFlags_;
		global.sf = systemUserFlags_;
		global.tf = temporaryFlags_;
	}

	/**/
	var regOnForceStored_static_ = new RegExp("^\\*.*force_store.*", "");
	function onConductorLabel(label, name, firstLabelProcessed)
	{
		var tick = System.getTickCount();
		var modMessage = window.modules.get('modMessage');

		if(name !== void)
		{
			if(modMessage !== void)
			{
				if(!readingRecord(label))
					modMessage.cancelNotReadSkip();
				if(cancelSkipQuery && modMessage.longSkipping)
				{
					modMessage.cancelSkip();
					cancelSkipQuery = false;
				}
			}
			currentLabelName_ = label;
			currentPageName_ = name;

			if(pushRecordAnchorInNextLabel_)
			{
				internalPushRecordAnchor_private_();
				pushRecordAnchorInNextLabel_ = false;
			}

			// farstLabelProcessed が false ならば強制的に store する
			// または、ラベル名が *force_store ならば強制的に store する
			// または、起動後まだ一度も store していないならば強制的に store する
			// または、storeSkipping が false ならば store する
			if(storeAndSave &&
				((modMessage !== void && !modMessage.longSkipping) ||
				!firstLabelProcessed ||
				regOnForceStored_static_.test(label) ||
				!firstStored_ ||
				!storeSkipping))
			{
				window.temporaryLocation.save('core', window.store());

				firstStored_ = true;
				possibleSave_ = true;
				possibleLoad_ = true;
			}
			else
			{
				// セーブ可能なラベルを store せずにスキップした
				// この場合、セーブ可能な状態とはいえない
				possibleSave_ = false;
			}
		}

		dm(@"onLabelStore(&label;, &name;, &firstLabelProcessed;) processed in &System.getTickCount() - tick; ms.");
	}

	/**/
	function onWindowClose()
	{
		saveSystemVariables();
	}

	/**/
	property saveLocation
	{
		getter
		{
			var obj = window.getLocation(name);
			if(obj === void)
				throw new GRuntimeError(@"保存先 &name; は未定義です。");
			return obj;
		}
	}

	/**/
	property possibleSave
	{
		getter		{ return possibleSave_; }
	}

	/**/
	property possibleLoad
	{
		getter		{ return possibleLoad_; }
	}
}


