/*
 * $Revision: 227 $
**/


/*! \brief 例外 exception を再スローします。
 *         この関数は決して戻りません。
 *
 * この関数は可読性維持のためだけに存在しています。
 * そのため catch した例外のみを対象にしてください。
 *
 * \param [exception] Exception クラス派生のオブジェクトを指定します。
 *
 * \return 決して戻りません。
**/
function raiseUpException(exception)
{
	// NOTE: never return.
	throw exception;
}

/*! \brief エラーログを出力して、コアを強制的に終了させます。
 *         この関数は決して戻りません。
 *
 * 通常はこの関数はあまり利用されない事が望ましいです。
 * ただし、システムの初期化中などの特殊な条件下で
 * エラー発生時に終了する手段として利用する事を想定しています。
 * また、開発中にコンソールから abort() などとする事で
 * 操作不能な状態でも終了できる場合があります。
 * コンソールすら操作不能な場合は利用できません。
 *
 * \param [message] エラーメッセージの詳細を指定します。
 * \param [caption:'Abort'] エラーメッセージのキャプションを指定します。
 *
 * \return 決して戻りません。
**/
function abort(message, caption = 'Abort')
{
	// NOTE: never return.
	try {
		Debug.message('!!!! Abort. !!!!');
		Debug.message(@"[&caption;]\n&message;");
		System.eventDisabled = true;
		Debug.startLogToFile();
		System.inform(message, caption);
		System.exit();
	} catch (e) {
		// NOTE: 最後の望みをかけてもう一度 System.exit() する。
		System.exit();
		// NOTE: 諦める。
		raiseUpException(e);
	}

	throw new Exception('Terminate abort function. This is dead code.');
}

/*! \brief path が存在すれば自動検索パスに追加します。
 *
 * path が存在しなければ何もしません。
 * それ以外は path を自動検索パスに追加します。
 *
 * \param [path] 追加したいＸＰ３アーカイブのパスを統一ストレージ形式で指定します。
 *
 * \return path が存在しなければ false を返します。
 *         それ以外は true を返します。
**/
function addXP3ArchiveToKrkrAutoPath(path)
{
	if(Storages.isExistentStorage(path))
	{
		Storages.addAutoPath(@"&path;>");

		return true;
	}

	return false;
}

/*! \brief addXP3ArchiveToKrkrAutoPath() で追加した自動検索パスを削除します。
 *
 * path が存在しなければ何もしません。
 * それ以外は path を自動検索パスから削除します。
 *
 * \param [path] 削除したいＸＰ３アーカイブのパスを統一ストレージ形式で指定します。
 *
 * \return path が存在しなければ false を返します。
 *         それ以外は true を返します。
**/
function removeXP3ArchiveFromKrkrAutoPath(path)
{
	if(Storages.isExistentStorage(path))
	{
		Storages.removeAutoPath(@"&path;>");

		return true;
	}

	return false;
}

/*! \brief 自動検索パス追加用ユーティリティ関数
 *
 * path 上に name.xp3 が存在すれば path/name.xp3 を自動検索パスに追加します。
 * そうでなければ name/ フォルダを自動検索パスに追加します。
 *
 * \param [name] 一般的に開発環境のフォルダ名をそのまま指定します。
 * \param [path:System.exePath:] ＸＰ３アーカイブが存在するハズのパスを統一ストレージ形式で指定します。
**/
function addAutoPath(name, path = System.exePath)
{
	if(!addXP3ArchiveToKrkrAutoPath(@"&path;&name;.xp3"))
		Storages.addAutoPath(@"&name;/");
}

/*! \brief 自動検索パス削除用ユーティリティ関数
 *
 * path 上に name.xp3 が存在すれば path/name.xp3 を自動検索パスから削除します。
 * そうでなければ name/ フォルダを自動検索パスから削除します。
 *
 * \param [name] 一般的に開発環境のフォルダ名をそのまま指定します。
 * \param [path:System.exePath:] ＸＰ３アーカイブが存在するハズのパスを統一ストレージ形式で指定します。
**/
function removeAutoPath(name, path = System.exePath)
{
	if(!removeXP3ArchiveFromKrkrAutoPath(@"&path;&name;.xp3"))
		Storages.removeAutoPath(@"&name;/");
}


// NOTE: 初期化中のログ出力先を一時的にデスクトップに変更する。
try {
	var shellFolderPath = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Desktop";
	var desktopPath = System.readRegValue(@"HKEY_CURRENT_USER\\&shellFolderPath;");

	if(desktopPath === void)
		desktopPath = System.readRegValue(@"HKEY_LOCAL_MACHINE\\&shellFolderPath;");
	if(desktopPath !== void)
		Debug.logLocation = desktopPath;
} catch (e) {
	abort(
		"エラーログ出力先の変更に失敗しました。\n" +
		"強制終了します。\n" +
		"\n" +
		@"&e.message;"
	);
}


// NOTE: 自動検索パスの初期化。
try {

	var path = [];

	// 自動検索パスに追加するフォルダのリストを読み込む。
	path.load('krkr_autopath.ary');

	// 自動検索パスの登録
	for(var i = 0; i < path.count; i++)
		addAutoPath(path[i]);

	global['goki2UpdateInitializerFunctions'] = [];

	// NOTE: 追加のアーカイブは、念のため KAG/GOKI と名前がかぶらないようにしておく。
	for(var i = 1; addXP3ArchiveToKrkrAutoPath("update%03d.xp3".sprintf(i)); i++)
	{
		// NOTE: updateXXXInitializer の呼び出しは後で初期化が終わってから行う。
		var handler = global["update%03dInitializer".sprintf(i)];

		goki2UpdateInitializerFunctions.push(handler) if handler instanceof 'Function';
	}

} catch (e) {
	abort(
		"自動検索パスの初期化に失敗しました。\n" +
		"強制終了します。\n" +
		"\n" +
		e.message
	);
}


// NOTE: 起動スクリプトを実行する。
try {
	Scripts.execStorage('Initialize.tjs');
} catch(e) {
	abort(
		"起動スクリプトの実行に失敗しました。\n" +
		"強制終了します。\n" +
		"\n" +
		e.message
	);
}

// NOTE: updateXXXInitializer 呼び出し。
/*{ // FIXME: バージョン番号がこの段階では設定されていない。
	var c = goki2UpdateInitializerFunctions.count;

	with(window.conductor)
	{
		for(var i = 0; i < c; i++)
			goki2UpdateInitializerFunctions[i](.majorVersionNumber, .minorVersionNumber, .specialVersionString);
	}
}*/

// NOTE: コマンドラインオプションの制御
{
	var disableHotKeys = [
		//#Begin the list of hot-keys to disable.
		//#End the list of hot-keys to disable.
	];
	var disableDebugFunctions = [
		//#Begin the list of debug functions to disable.
		//#End the list of debug functions to disable.
	];

	for(var i = 0; i < disableHotKeys.count; i++)
		System.setArgument(@"-&disableHotKeys[i];", '');
	for(var i = 0; i < disableDebugFunctions.count; i++)
		System.setArgument(@"-&disableDebugFunctions[i];", 'no');
}


