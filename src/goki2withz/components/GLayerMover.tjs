/*
**/


/**/
class GLayerMover extends GTimeLine
{
	var targetLayer_ = void;
	var cacheLayer_ = void;

	var originLayer_ = void;
	var originX_;
	var originY_;

	var events_ = [];
	var transformEventCount_ = 0;
	var pointer_ = 0;
	var alonePointer_ = 0;

	var useTransform_ = false;
	var withChildrens_ = false;
	var eachUpdateCache = false;

	/**
	 * owner: GLayer 派生のレイヤーオブジェクト
	**/
	function GLayerMover(owner)
	{
		super.GTimeLine(...);
	}

	function finalize()
	{
		invalidate cacheLayer_ if cacheLayer_ !== void;
		super.finalize(...);
	}

	/**
	 * 再リンクが必要なプロパティの実装
	**/
	function setRenderingOptions(useTransform, withChildrens)
	{
		useTransform_ = useTransform;
		withChildrens_ = withChildrens;
		relinkAllOperations();
	}

	/**
	 * 各イベントの再リンクを行います。
	 * 影響があるのは変形イベントだけなので
	 * 変形イベントが存在しない場合は何もしません。
	**/
	function relinkAllOperations()
	{
		if(transformEventCount_ == 0)
			return;

		var arr = events_;
		var c = arr.count;
		var prev = void;

		if(useTransform_)
		{
			for(var i = 0; i < c; i++)
			{
				if(arr[i].type_ != 'normal')
					continue;
				if(!arr[i].isUserHandler_ && arr[i].handler_ !== void)
				{
					invalidate arr[i].handler_;
					arr[i].handler_ = void;
				}
				if(prev === void)
				{
					arr[i].prev_ = void;
					arr[i].next_ = void;
				}
				else
				{
					arr[i].prev_ = prev;
					arr[prev].next_ = i;
					if(!arr[prev].isUserHandler_)
						arr[prev].handler_ = ((Scripts.eval(makeOperationHandlerScriptSource(arr[prev], arr[i]))) incontextof this);
				}
				prev = i;
			}
		}
		else
		{
			for(var i = 0; i < c; i++)
			{
				if(arr[i].type_ != 'normal' || arr[i].transform_)
					continue;
				if(!arr[i].isUserHandler_ && arr[i].handler_ !== void)
				{
					invalidate arr[i].handler_;
					arr[i].handler_ = void;
				}
				if(prev === void)
				{
					arr[i].prev_ = void;
					arr[i].next_ = void;
				}
				else
				{
					arr[i].prev_ = prev;
					arr[prev].next_ = i;
					if(!arr[prev].isUserHandler_)
						arr[prev].handler_ = ((Scripts.eval(makeOperationHandlerScriptSource(arr[prev], arr[i]))) incontextof this);
				}
				prev = i;
			}
		}
	}

	/**
	 * 再配置が必要なプロパティの実装
	**/
	function setTime(time)
	{
		super.time = time;
		relocationAllOperations();
	}

	function setAccel(accel)
	{
		super.accel = accel;
		relocationAllOperations();
	}

	function setTimeAndAccel(time, accel = 0)
	{
		super.time = time;
		super.accel = accel;
		relocationAllOperations();
	}

	/**
	 * 時間が直接指定されているイベントの再配置を行います。
	 * ローカル単位（0.0 ～ 1.0）で指定されているイベントは
	 * 再配置を行いません。
	**/
	function relocationAllOperations()
	{
		var arr = events_;
		var c = arr.count;
		var time = this.time;
		var accel = this.accel;

		for(var i = 0; i < c; i++)
		{
			with(arr[i])
			{
				if(.time_ === void)
					continue;
				.position_ = applyAccelTo(localizeTime(0, .time_, time), accel);
			}
		}
	}

	/**
	 * \brief 指定位置にフレームを追加します。
	 * \brief 前後にフレームが存在すればリンクします。
	 *
	 * \remarks リンクされたフレームの間の状態は補完されますが
	 * \remarks 単独のフレームの場合リンクしないので補完されません。
	**/
	function addFrame(timeOrPosition, parameters)
	{
		var position = timeOrPosition;
		var time = void;

		if(typeof(timeOrPosition) == 'Integer')
		{
			time = timeOrPosition;
			position = applyAccelTo(localizeTime(0, time, this.time), this.accel);
		}

		if(position < 0.0)
			position = 0.0;
		else
		if(position > 1.0)
			position = 1.0;

		var frame = %[
			type_ : 'normal',
			time_ : time, position_ : position, accel_ : 0,
			prev_ : void, next_ : void,
			handler_ : void, isUserHandler_ : false
		];
		var target = owner;

		with(parameters)
		{
			if(.handler !== void)
			{
				frame.isUserHandler_ = true;
				frame.handler_ = .handler;
			}

			frame.accel_ = +.frame_accel if .frame_accel !== void;

			frame.x = target.stringTo(.x) if .x !== void;
			frame.y = target.stringTo(.y) if .y !== void;
			frame.width = target.stringTo(.width) if .width !== void;
			frame.height = target.stringTo(.height) if .height !== void;

			frame.ix = Math.abs(target.stringTo(.ix)) if .ix !== void;
			frame.iy = Math.abs(target.stringTo(.iy)) if .iy !== void;

			frame.opacity = +.opacity if .opacity !== void;

			if(.angle !== void || .ax !== void || .ay !== void || .scale !== void || .sx !== void || .sy !== void)
			{
				if(.angle !== void)
				{
					var a = +.angle;

					frame.angle = toRadian(a);
					frame.ax = toRadian(a);
					frame.ay = toRadian(a);
				}
				frame.ax = +.ax if .ax !== void;
				frame.ay = +.ay if .ay !== void;

				if(.scale !== void)
				{
					var s = +.scale;

					frame.scale = s;
					frame.sx = s;
					frame.sy = s;
				}
				frame.sx = +.sx if .sx !== void;
				frame.sy = +.sy if .sy !== void;

				frame.transform_ = true;
				transformEventCount_++;
			}
		}

		var arr = events_;
		var c = arr.count;
		var index = c;
		var prev = void, next = void;

		if(useTransform_)
		{
			// NOTE: 変形を処理可能。
			for(var i = 0; i < c; i++)
			{
				if(arr[i].position_ <= frame.position_)
				{
					prev = i if arr[i].type_ == 'normal';
					continue;
				}

				next = i if arr[i].type_ == 'normal';
				index = i;

				break;
			}

			arr.insert(index, frame);

			// next がまだ見つかっていない場合は一応最後まで探しておく
			if(next === void)
			{
				for(var i = index + 1; i < c; i++)
				{
					if(arr[i].type_ != 'normal')
						continue;

					next = i;

					break;
				}
			}
		}
		else
		{
			// NOTE: 変形を処理不可能なので変形イベントは無視してリンクする。
			for(var i = 0; i < c; i++)
			{
				if(arr[i].position_ <= frame.position_)
				{
					prev = i if arr[i].type_ == 'normal' && !arr[i].transform_;
					continue;
				}

				next = i if arr[i].type_ == 'normal' && !arr[i].transform_;
				index = i;

				break;
			}

			arr.insert(index, frame);

			// next がまだ見つかっていない場合は一応最後まで探しておく
			if(next === void)
			{
				for(var i = index + 1; i < c; i++)
				{
					if(arr[i].type_ != 'normal' || arr[i].transform_)
						continue;

					next = i;

					break;
				}
			}
		}

		// NOTE:
		// ＧＣに回収させたいので参照でのリンクはしない。
		if(prev !== void)
		{
			frame.prev_ = prev;
			arr[prev].next_ = index;

			// ハンドラを作る
			if(!arr[prev].isUserHandler_)
				arr[prev].handler_ = ((Scripts.eval(makeOperationHandlerScriptSource(arr[prev], frame))) incontextof this);
		}
		if(next !== void)
		{
			frame.next_ = next;
			arr[next].prev_ = index;

			// ハンドラを作る
			if(!frame.isUserHandler_)
				frame.handler_ = ((Scripts.eval(makeOperationHandlerScriptSource(frame, arr[next]))) incontextof this);
		}
	}

	/**
	 * \brief 指定位置に単独フレームを追加します。
	 * \brief このフレームは前後のどのフレームともリンクしません。
	 *
	 * FIXME: 条件によっては最初の onProcessTimeLine() 呼び出しで例外が発生する。
	 *
	 * こんな感じにすると発生。
	 *
	 * lam.addAloneFrame(0.0, %[handler : userFunction]);
	 * lam.addFrame(0.0, %[～～]);
	 * lam.addFrame(1.0, %[～～]);
	**/
	function addAloneFrame(timeOrPosition, parameters)
	{
		var position = timeOrPosition;
		var time = void;

		if(typeof(timeOrPosition) == 'Integer')
		{
			time = timeOrPosition;
			position = applyAccelTo(localizeTime(0, time, this.time), this.accel);
		}

		if(position < 0.0)
			position = 0.0;
		else
		if(position > 1.0)
			position = 1.0;

		var frame = %[
			type_ : 'alone',
			time_ : time, position_ : position,
			handler_ : void, isUserHandler_ : false
		];
		var target = owner;

		with(parameters)
		{
			if(.handler !== void)
			{
				frame.isUserHandler_ = true;
				frame.handler_ = .handler;
			}

			frame.x = target.stringTo(.x) if .x !== void;
			frame.y = target.stringTo(.y) if .y !== void;
			frame.width = target.stringTo(.width) if .width !== void;
			frame.height = target.stringTo(.height) if .height !== void;

			frame.ix = Math.abs(target.stringTo(.ix)) if .ix !== void;
			frame.iy = Math.abs(target.stringTo(.iy)) if .iy !== void;

			frame.opacity = +.opacity if .opacity !== void;

			if(.angle !== void || .ax !== void || .ay !== void || .scale !== void || .sx !== void || .sy !== void)
			{
				// 仕様上許可しない
				throw new GRuntimeError("拡大／縮小／回転は単独フレームではサポートされません。");
			}
		}

		var arr = events_;
		var c = arr.count;
		var index = c;

		for(var i = 0; i < c; i++)
		{
			if(arr[i].position_ <= frame.position_)
				continue;
			index = i;
			break;
		}
		arr.insert(index, frame);

		if(!frame.isUserHandler_)
			frame.handler_ = ((Scripts.eval(makeOperationHandlerScriptSource(frame))) incontextof this);
	}

	function erase(index)
	{
		//events_.erase(index);
		// めんどいので後で未実装。
	}

	function clear()
	{
		stop();

		events_.clear();
		transformEventCount_ = 0;
		pointer_ = 0;
		alonePointer_ = 0;
	}

	/**
	 * レイヤーが更新されてキャッシュの内容も更新する必要がある場合に呼び出してください。
	**/
	function updateCacheImage()
	{
		if(cacheLayer_ !== void)
		{
			var obj = owner;

			with(cacheLayer_)
			{
				.name = @"Layer '&obj.name;' image cache.";
				.setSize(obj.width, obj.height);
				.piledCopy(0, 0, obj, obj.imageLeft, obj.imageTop, obj.width, obj.height);
				.fixPositionToCenter = obj.fixPositionToCenter;
			}
		}
	}

	/**
	**/
	function makeOperationHandlerScriptSource(first, second = void)
	{
		var lines = [];

		lines.push("function (step, layer, ox, oy) {");

		if(second === void)
		{
			// 単独
			lines.push(@"layer.left = &first.x;" + ';') if typeof(first.x) !== 'undefined';
			lines.push(@"layer.top = &first.y;" + ';') if typeof(first.y) !== 'undefined';
			lines.push(@"layer.width = &first.width;" + ';') if typeof(first.width) !== 'undefined';
			lines.push(@"layer.height = &first.height;" + ';') if typeof(first.height) !== 'undefined';
			lines.push(@"layer.imageLeft = -&first.ix;" + ';') if typeof(first.ix) !== 'undefined';
			lines.push(@"layer.imageTop = -&first.iy;" + ';') if typeof(first.iy) !== 'undefined';
			lines.push(@"layer.opacity = &first.opacity;" + ';') if typeof(first.opacity) !== 'undefined';
			lines.push(@"layer.visible = &first.visible;" + ';') if typeof(first.visible) !== 'undefined';

			lines.push('}');
		}
		else
		{
			// 変化
			if(useTransform_)
			{
				var x = false, y = false;
				var width = false, height = false;
				var ix = false, iy = false;
				var opacity = false;
				var ax = false, ay = false;
				var sx = false, sy = false;

				if(typeof(first.x) !== 'undefined' && typeof(second.x) !== 'undefined')
				{
					lines.push(@"var x = ox + &first.x; + (&second.x; - &first.x;) * step" + ';');
					x = true;
				}
				else
				{
					lines.push('var x = ox;');
				}
				if(typeof(first.y) !== 'undefined' && typeof(second.y) !== 'undefined')
				{
					lines.push(@"var y = oy + &first.y; + (&second.y; - &first.y;) * step" + ';');
					y = true;
				}
				else
				{
					lines.push('var y = oy;');
				}
				if(typeof(first.width) !== 'undefined' && typeof(second.width) !== 'undefined')
				{
					lines.push(@"var width = &first.width; + (&second.width; - &first.width;) * step" + ';');
					width = true;
				}
				else
				{
					lines.push('var width = layer.width;');
				}
				if(typeof(first.height) !== 'undefined' && typeof(second.height) !== 'undefined')
				{
					lines.push(@"var height = &first.height; + (&second.height; - &first.height;) * step" + ';');
					height = true;
				}
				else
				{
					lines.push('var height = layer.height;');
				}
				if(typeof(first.ix) !== 'undefined' && typeof(second.ix) !== 'undefined')
				{
					lines.push(@"var ix = &first.ix; + (&second.ix; - &first.ix;) * step" + ';');
					ix = true;
				}
				else
				{
					lines.push('var ix = Math.abs(layer.imageLeft);');
				}
				if(typeof(first.iy) !== 'undefined' && typeof(second.iy) !== 'undefined')
				{
					lines.push(@"var iy = &first.iy; + (&second.iy; - &first.iy;) * step" + ';');
					iy = true;
				}
				else
				{
					lines.push('var iy = Math.abs(layer.imageTop);');
				}
				if(typeof(first.opacity) !== 'undefined' && typeof(second.opacity) !== 'undefined')
				{
					lines.push(@"var opacity = &first.opacity; + (&second.opacity; - &first.opacity;) * step" + ';');
					opacity = true;
				}
				else
				{
					lines.push('var opacity = layer.opacity;');
				}
				if(typeof(first.ax) !== 'undefined' && typeof(second.ax) !== 'undefined')
				{
					lines.push(@"var ax = &first.ax; + (&second.ax; - &first.ax;) * step" + ';');
					ax = true;
				}
				if(typeof(first.ay) !== 'undefined' && typeof(second.ay) !== 'undefined')
				{
					lines.push(@"var ay = &first.ay; + (&second.ay; - &first.ay;) * step" + ';');
					ay = true;
				}
				if(typeof(first.sx) !== 'undefined' && typeof(second.sx) !== 'undefined')
				{
					lines.push(@"var sx = &first.sx; + (&second.sx; - &first.sx;) * step" + ';');
					sx = true;
				}
				if(typeof(first.sy) !== 'undefined' && typeof(second.sy) !== 'undefined')
				{
					lines.push(@"var sy = &first.sy; + (&second.sy; - &first.sy;) * step" + ';');
					sy = true;
				}

				// 回転行列 m は必ず必要になる
				if(ax && ay)
					lines.push('var m = rotateM(ax, ay);');
				else
				if(ax)
					lines.push('var m = rotateM(ax, 0);');
				else
				if(ay)
					lines.push('var m = rotateM(0, ay);');
				else
					lines.push('var m = rotateM(0);');

				//lines.push('if(layer.fixPositionToCenter) {');
				lines.push('var rx = width >> 1;');
				lines.push('var ry = height >> 1;');

				lines.push('m = mulM(transM(-rx, -ry), m);');
				// スケーリング（必要ならば）
				if(sx && sy)
					lines.push('m = mulM(m, scaleM(sx, sy));');
				else
				if(sx)
					lines.push('m = mulM(m, scaleM(sx, 1.0));');
				else
				if(sy)
					lines.push('m = mulM(m, scaleM(1.0, sy));');
				// 移動
				lines.push('m = mulM(m, transM(x, y));');
				lines.push('m = mulM(m, transM(rx, ry));');

				// 描画本体
				lines.push('with(targetLayer_) {');
				lines.push('.fillRect(0, 0, .width, .height, 0);');
				lines.push('.operateAffine(layer, int(ix + 0.5), int(iy + 0.5), width, height, true, m*, omAlpha, opacity, stNearest);');
				lines.push('}');
			}
			else
			{
				if(typeof(first.x) !== 'undefined' && typeof(second.x) !== 'undefined')
				{
					lines.push(@"layer.fixedX = ox + &first.x; + (&second.x; - &first.x;) * step" + ';');
				}
				if(typeof(first.y) !== 'undefined' && typeof(second.y) !== 'undefined')
				{
					lines.push(@"layer.fixedY = oy + &first.y; + (&second.y; - &first.y;) * step" + ';');
				}
				if(typeof(first.width) !== 'undefined' && typeof(second.width) !== 'undefined')
				{
					lines.push(@"layer.width = &first.width; + (&second.width; - &first.width;) * step" + ';');
				}
				if(typeof(first.height) !== 'undefined' && typeof(second.height) !== 'undefined')
				{
					lines.push(@"layer.height = &first.height; + (&second.height; - &first.height;) * step" + ';');
				}
				if(typeof(first.ix) !== 'undefined' && typeof(second.ix) !== 'undefined')
				{
					lines.push(@"layer.imageLeft = -(&first.ix; + (&second.ix; - &first.ix;) * step)" + ';');
				}
				if(typeof(first.iy) !== 'undefined' && typeof(second.iy) !== 'undefined')
				{
					lines.push(@"layer.imageTop = -(&first.iy; + (&second.iy; - &first.iy;) * step)" + ';');
				}
				if(typeof(first.opacity) !== 'undefined' && typeof(second.opacity) !== 'undefined')
				{
					lines.push(@"layer.opacity = &first.opacity; + (&second.opacity; - &first.opacity;) * step" + ';');
				}
			}

			lines.push('}');
		}

		var src = lines.join('\n');

		//dm(src);

		return src;
	}

	function nextPointer(index = 0)
	{
		var events = events_;
		var c = events.count;
		var next = -1;

		if(useTransform_)
		{
			for(var i = index; i < c; i++)
			{
				if(events[i].type_ != 'normal')
					continue;
				next = i;
				break;
			}
		}
		else
		{
			for(var i = index; i < c; i++)
			{
				if(events[i].type_ != 'normal' || events[i].transform_)
					continue;
				next = i;
				break;
			}
		}

		return next;
	}

	function nextAlonePointer(index = 0)
	{
		var events = events_;
		var c = events.count;
		var next = -1;

		for(var i = index; i < c; i++)
		{
			if(events[i].type_ != 'alone')
				continue;
			next = i;
			break;
		}

		return next;
	}

	function resetPointer()
	{
		pointer_ = nextPointer(0);
		alonePointer_ = nextAlonePointer(0);
	}

	function store(tick)
	{
		var dic = super.store(...);

		dic.originX = originX_;
		dic.originY = originY_;

		dic.events = events_;
		dic.transformEventCount = transformEventCount_;
		dic.pointer = pointer_;
		dic.alonePointer = alonePointer_;

		dic.useTransform = useTransform_;
		dic.withChildrens = withChildrens_;
		dic.eachUpdateCache = eachUpdateCache;

		return dic;
	}

	function restore(dic, tick)
	{
		originX_ = dic.originX;
		originY_ = dic.originY;

		// NOTE:
		var arr = copyArray([], dic.events);
		var prev = void;
		for(var i = 0; i < arr.count; i++)
		{
			if(prev !== void && !prev.isUserHandler)
				prev.handler_ = ((Scripts.eval(makeOperationHandlerScriptSource(prev, arr[i]))) incontextof this);
			arr[i].handler_ = void;
			prev = arr[i];
		}
		events_ = arr;

		transformEventCount_ = dic.transformEventCount;
		pointer_ = dic.pointer;
		alonePointer_ = dic.alonePointer;

		useTransform_ = dic.useTransform;
		withChildrens_ = dic.withChildrens;
		eachUpdateCache = dic.eachUpdateCache;

		onInitialize_private_() if dic.running;

		super.restore(...);
	}

	function onInitialize_private_()
	{
		var src = owner;

		if(useTransform_)
		{
			if(targetLayer_ === void)
				targetLayer_ = src.getRenderingTarget();

			targetLayer_.setSize(src.parent.width, src.parent.height);

			if(withChildrens_)
			{
				cacheLayer_ = new GLayer(src.window, src) if cacheLayer_ === void;

				updateCacheImage();

				src = cacheLayer_;
			}

			originX_ = owner.left;
			originY_ = owner.top;

			this.onProcessTimeLine = onTransformProcess;
		}
		else
		{
			originX_ = 0;
			originY_ = 0;

			this.onProcessTimeLine = onNormalProcess;
		}

		originLayer_ = src;
	}

	function onStartTimeLine()
	{
		if(events_.count <= 0)
			throw new GRuntimeError("変換が何も設定されていませんがアクションを開始しようとしました。");

		resetPointer();

		if(pointer_ == -1 && alonePointer_ == -1)
			throw new GRuntimeError("開始可能なイベントが見つかりませんでした。");

		onInitialize_private_();

		// NOTE:
		// 初回描画を手動で行う。
		// これをしないと delay が設定されている時におかしくなる。
		process(0);
	}

	function onStopTimeLine(paused)
	{
		with(owner)
		{
			if(!paused)
			{
				if(targetLayer_ !== void)
					.releaseRenderingTarget(targetLayer_);
				targetLayer_ = void;
			}

			.callHandler('onStopMover', %[paused : paused]);
		}
	}

	function onRestartTimeLine()
	{
		resetPointer();
	}

	function onTransformProcess(step)
	{
		var events = events_;
		var layer = originLayer_;
		var ox = originX_;
		var oy = originY_;
		var ptr = pointer_;
		var aptr = alonePointer_;

		updateCacheImage() if eachUpdateCache;

		if(aptr != -1)
		{
			var e = events[aptr];

			if(step >= e.position_)
			{
				e.handler_(step, layer, ox, oy, e);
				alonePointer_ = nextAlonePointer(aptr + 1);
			}
		}

		if(ptr != -1)
		{
			var src = events[ptr];
			var dst = events[src.next_];

			// NOTE:
			// 超えているならば次に進む
			if(step >= dst.position_)
			{
				ptr = src.next_;
				src = events[ptr];

				// 次がなければ何もしない
				if(src.next_ === void)
				{
					pointer_ = -1;
					return;
				}

				pointer_ = ptr;
				dst = events[src.next_];
			}

			if(step >= src.position_)
			{
				var localStep = localizeTime(src.position_, step, dst.position_ - src.position_);

				localStep = applyAccelTo(localStep, src.accel_) if src.accel_ !== void;

				src.handler_(localStep, layer, ox, oy, src, dst);
			}
		}
	}

	function onNormalProcess(step)
	{
		var events = events_;
		var layer = originLayer_;
		var ox = originX_;
		var oy = originY_;
		var ptr = pointer_;
		var aptr = alonePointer_;

		if(aptr != -1)
		{
			var e = events[aptr];

			if(step >= e.position_)
			{
				e.handler_(step, layer, ox, oy, e);
				alonePointer_ = nextAlonePointer(aptr + 1);
			}
		}

		if(ptr != -1)
		{
			var src = events[ptr];
			var dst = events[src.next_];

			// NOTE:
			// 超えているならば念のため最終状態更新
			if(step >= dst.position_)
			{
				src.handler_(1.0, layer, ox, oy, src, dst);

				ptr = src.next_;
				src = events[ptr];

				if(src.next_ === void)
				{
					pointer_ = -1;
					return;
				}

				pointer_ = ptr;
				dst = events[src.next_];
			}
			if(step >= src.position_)
			{
				var localStep = localizeTime(src.position_, step, dst.position_ - src.position_);

				localStep = applyAccelTo(localStep, src.accel_) if src.accel_ !== void;

				src.handler_(localStep, layer, ox, oy, src, dst);
			}
		}
	}

	property targetLayer
	{
		getter		{ return targetLayer_; }
	}

	property originLayer
	{
		getter		{ return originLayer_; }
	}

	property useTransform
	{
		setter(x)	{ setRenderingOptions(x, withChildrens_); }
		getter		{ return useTransform_; }
	}

	property withChildrens
	{
		setter(x)	{ setRenderingOptions(useTransform_, x); }
		getter		{ return withChildrens_; }
	}

	property time
	{
		setter(x)	{ setTime(x); }
		getter		{ return super.time; }
	}

	property accel
	{
		setter(x)	{ setAccel(x); }
		getter		{ return super.accel; }
	}
}


