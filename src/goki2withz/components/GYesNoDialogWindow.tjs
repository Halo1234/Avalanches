/*
 $Author: halo $
 $Revision: 359 $
*/


/**/
class GYesNoDialogWindow extends Window
{
	var name;

	var messageText_ = "";
	var checkMessageText_ = "";

	var result_ = '';		// 'yes' or 'no'
	var checked_ = false;	// true ‚È‚ç on
							// false ‚È‚ç off

	var softFocus_;

	function GYesNoDialogWindow(messageText, checkMessageText = "")
	{
		super.Window();

		name = getInstanceClassName(this);

		messageText_ = messageText;
		checkMessageText_ = checkMessageText;

		borderStyle = bsDialog;
		//innerSunken = false;

		makePrimaryLayer();

		eraseBackground();
		fixDialogPosition();

		makeWidgets();
	}

	function makePrimaryLayer()
	{
		add(new Layer(this, null));
	}

	function makeWidgets()
	{
		var layer = primaryLayer;
		var w = layer.width;
		var th = layer.font.getTextHeight(messageText);
		var captions = ["‚Í‚¢", "‚¢‚¢‚¦"];
		var ids = ['yes', 'no'];
		var focus = softFocus;
		var obj;

		for(var i = 0; i < captions.count; i++)
		{
			obj = createButtonLayer(this, layer, onButton);
			obj.caption = captions[i];
			obj.id = ids[i];
			obj.setPos(((w - (obj.width << 1) - 10) >> 1) + (80 * i), th + 30);
			focus.add(obj);
			add(obj);
		}

		if(checkMessageText != "")
		{
			obj = createCheckBoxLayer(this, layer, onCheck);
			obj.setPos((w - obj.width), th + 60);
			focus.add(obj);
			add(obj);
		}
	}

	function createFocus(name = void)
	{
		return new GFocus(...);
	}

	function createButtonLayer(window, parent, handler)
	{
		var obj = new GButtonLayer(window, parent, handler);
		obj.setSize(70, 25);
		obj.visible = true;
		return obj;
	}

	function createCheckBoxLayer(window, parent, handler)
	{
		var obj = new GCheckBoxLayer(window, parent, handler);
		obj.setSize(160, 25);
		obj.caption = checkMessageText;
		obj.checked = checked_;
		obj.visible = true;
		return obj;
	}

	function fixDialogPosition()
	{
		var main = mainWindow;
		if(main === this || (main === null || !isvalid(main)))
		{
			setPos(
				(System.screenWidth - width) >> 1,
				(System.screenHeight - height) >> 1
			);
		}
		else
		{
			var l = ((main.width - width) >> 1) + main.left;
			var t = ((main.height - height) >> 1) + main.top;
			l = 0 if l < 0;
			t = 0 if t < 0;
			l = System.screenWidth - width if l > System.screenWidth - width;
			t = System.screenHeight - height if t > System.screenHeight - height;
			setPos(l, t);
		}
	}

	function eraseBackground()
	{
		var layer = primaryLayer;
		var tw = layer.font.getTextWidth(messageText);
		var th = layer.font.getTextHeight(messageText);
		var w = tw + /* —]”’ */40;
		var h = (th << 1) + 60 + (checkMessageText != "" ? 10 : 0);

		w = 200 if w < 200;
		setInnerSize(w, h);
		layer.setImageSize(w, h);
		layer.setSizeToImageSize();
		layer.colorRect(0, 0, w, h, clBtnFace, 255);
		layer.drawText((w - tw) >> 1, 14, messageText, clBtnText);
	}

	function onButton(obj, event, elm)
	{
		if(event == "onButton")
		{
			result_ = obj.id;
			close();
		}
	}

	function onCheck(obj, event, elm)
	{
		if(event == "onCheck")
			checked_ = obj.checked;
	}

	function onKeyDown(key, shift)
	{
		if(shift & ssShift)
		{
			switch(key)
			{
			case VK_LEFT:	key = VK_RIGHT; break;
			case VK_UP:		key = VK_DOWN; break;
			case VK_RIGHT:	key = VK_LEFT; break;
			case VK_DOWN:	key = VK_UP; break;
			}
		}

		switch(key)
		{
		case VK_LEFT:	softFocus.moveLeft(true); break;
		case VK_UP:		softFocus.moveUp(true); break;
		case VK_RIGHT:	softFocus.moveRight(true); break;
		case VK_DOWN:	softFocus.moveDown(true); break;
		case VK_RETURN:	softFocus.click(); break;
		}
	}

	property messageText
	{
		getter		{ return messageText_; }
	}

	property checkMessageText
	{
		getter		{ return checkMessageText_; }
	}

	property result
	{
		getter		{ return result_; }
	}

	property checked
	{
		setter(x)	{ checked_ = checkBoxLayer.checked = x; }
		getter		{ return checked_; }
	}

	property softFocus
	{
		getter		{ return softFocus_ === void ? (add(softFocus_ = createFocus()), softFocus_) : softFocus_; }
	}

	property yesButtonLayer
	{
		getter		{ return softFocus.at(0); }
	}

	property noButtonLayer
	{
		getter		{ return softFocus.at(1); }
	}

	property checkBoxLayer
	{
		getter		{ return (softFocus.count <= 2 ? void : softFocus.at(2)); }
	}
}


