/*
**/


Plugins.link('KAGParser.dll');

/*! \brief コンダクタ基本クラス。
**/
class GConductor extends KAGParser
{
	var window_;						//!< \brief このコンダクタが管理するウインドウオブジェクト

	var trigger_;
	var timer_;

	var thisTagHandlers_;				//!< \brief このクラスが提供するタグハンドラ
	var tagHandlers_ = %[];				//!< \brief タグハンドラ

	var redirect_ = %[];				// タグのリダイレクト先
	var syntax_ = %[];					// 各タグ用の拡張シンタックス

	var scriptQue_ = [];				//!< \brief スクリプトキュー
	var autoJump = true;				//!< \brief この値が true ならばスクリプト終端に達した時に自動的に次のスクリプトにジャンプします。

	var startLabelName_ = '';			//!< \brief 現在のスクリプトを開始した時のラベル名。ラベル指定なしでの開始ならば空文字列。
	var lastProcessedTag_ = '';			//!< \brief 最後に処理したタグ名
	var lastActualProcessedTag_ = '';	//!< \brief 最後に（実際に）処理したタグ名
	var pendingTags_ = [];				//!< \brief 後回しにされたタグ
	var breathTags_ = [];				//!< \brief ブレスタグ
	var breathBound = 1;				//!< \brief ブレス状態に移行するまでの breath の数
	var breathCount_ = 0;				//!< \brief 現在の breath の数

	var firstLabelProcessed_ = false;	//!< \brief 現在のスクリプトの最初のセーブ可能なラベルを処理したかどうか

	var timeOrigin_;

	var interrupted_ = false;			//!< \brief interrupt 状態ならば true になります。
	var suspended_ = false;				//!< \brief suspend 状態ならば true になります。

	var signalHandlers_ = %[];			// シグナルハンドラ

	var status_ = 0;					// 現在の状態

	var /* const */ stWait = -1;		// シグナル待ち
	var /* const */ stStop = 0;			// 停止中
	var /* const */ stRun = 1;			// 実行中
	var /* const */ stBreath = 2;		// 次のブレスタグを処理する前に breath タグを実行する

	var controlCode_;					// コントロールコード

	var majorVersionNumber = 0;			//!< \brief ゲームバージョン（メジャー）
	var minorVersionNumber = 0;			//!< \brief ゲームバージョン（マイナー）
	var specialVersionString = '';		//!< \brief スペシャルバージョン文字列

	/*! \brief コンストラクタ。
	**/
	function GConductor(window)
	{
		window_ = window;

		super.KAGParser();

		trigger_ = new AsyncTrigger(onTimer_private_, '');
		trigger_.cached = true;

		timer_ = new Timer(onTimeOut_private_, '');

		thisTagHandlers_ = createTagHandlers();
		GObjectUtils.assignDictionary(tagHandlers_, thisTagHandlers_); 
	}

	function finalize()
	{
		window_ = void;

		invalidate trigger_;
		invalidate timer_;

		super.finalize(...);
	}

	/*! \brief このクラスのタグハンドラを作成して返します。
	 *
	 * \return 作成したタグハンドラを返します。
	**/
	function createTagHandlers()
	{
		return %[

			// NOTE: ここで作成するタグはすべて lightweight な実装です。
			// NOTE: とりあえず要件は満たしますがメインで使うコンダクタとしては弱いと思います。
			// NOTE: 派生先で適時オーバーライドしてやってください。

			/**/
			'cr_handling' => function (elm) {
				ignoreCR = GObjectUtils.getBoolean(elm, 'ignore');
			} incontextof this,

			/* @version */
			'version' => function (elm) {
				System.title = elm.title if elm.title !== void;
				majorVersionNumber = +elm.major if elm.major !== void;
				minorVersionNumber = +elm.minor if elm.minor !== void;
				specialVersionString = elm.special if elm.special !== void;
			} incontextof this,

			/* @update_initializer */
			'update_initializer' => function (elm) {
				// NOTE: updateXXXInitializer 呼び出し。
				var c = goki2UpdateInitializerFunctions.count;

				with(window.conductor)
				{
					for(var i = 0; i < c; i++)
						goki2UpdateInitializerFunctions[i](.majorVersionNumber, .minorVersionNumber, .specialVersionString);
				}
			} incontextof this,

			/* @load_plugin */
			'load_plugin' => function (elm) {
				Plugins.link(elm.name);
				dm(@"Plugins.link( '&elm.name;' ); called.");
			} incontextof this,

			/* @que */
			'que' => function (elm) {
				clearScriptQue() if GObjectUtils.getBoolean(elm, 'clear');
				pushScript(elm.storage.split(', ', , true)*) if elm.storage !== void;
			} incontextof this,

			'dump_script_que' => function (elm) {
				dumpScriptQue();
			} incontextof this,

			/* @next */
			'next' => function (elm) {
				// NOTE: autoJump の状態に依存しない
				jumpNextScript();
				return 'break';
			} incontextof this,

			/* @auto_jump */
			'auto_jump' => function (elm) {
				if(GObjectUtils.getBoolean(elm, 'off'))
					autoJump = false;
				else
				//if(+elm.on) off じゃないなら on だと解釈する
					autoJump = true;
			} incontextof this,

			/* @syntax */
			'syntax' => function (elm) {
				with(getSyntax(elm["target_tag_name"]))
				{
					var arr = [];
					var count, name;
					arr.assign(elm);
					count = arr.count;
					for(var i = 0; i < count; i+=2)
					{
						name = arr[i];
						if(name == 'target_tag_name' || name == 'tagname')
							continue;
						switch(name[0])
						{
						case '/':	.setPattern(name.substring(1, name.length - 1), arr[i + 1]); break;
						case '&':	.setGroup(name, arr[i + 1].split(', ', , true)*); break;
						default:	.setElementConvert(name, arr[i + 1].split(', ', , true)*); break;
						}
					}
				}
			} incontextof this,

			/* @redirect */
			'redirect' => function (elm) {
				(GObjectUtils.getBoolean(elm, 'remove') ? deleteRedirectTag : setRedirectTag)(elm.alias, elm.name);
			} incontextof this,

			/* @notice */
			'notice' => function (elm) {
				notice(elm.message);
			} incontextof this,

			/* @log */
			'log' => function (elm) {
				log(elm.message);
			} incontextof this,

			/* @ch */
			'ch' => alwaysVoid,

			/* @r */
			'r' => alwaysVoid,

			/* @s */
			's' => function (elm, c) {
				if(!elm.eof)
					return 'stop';
				// EOF処理
				// 自動実行中なら next タグを追加
				// 手動実行中なら end を追加する
				c.pendingTag(autoJump ? 'next' : 'end');
			} incontextof this,

			/* @end */
			'end' => function (elm) {
				return 'end';
			} incontextof this,

			/* @wait */
			'wait' => function (elm, c) {
				var time = +elm.time;
				if(elm.mode == 'until')
				{
					time = timeOrigin_ + time - System.getTickCount();
					if(time < 0)
						return 0;
				}
				if(GObjectUtils.getBoolean(elm, 'skip', true))
					c.waitSignal(%[left_click : null]);
				return time;
			} incontextof this,

			/* @reset_wait */
			'reset_wait' => function (elm) {
				timeOrigin_ = System.getTickCount();
			} incontextof this,

			/* @wait_click */
			'wait_click' => function (elm) {
				waitSignal(%[left_click : null]);
			} incontextof this,

			/* @eval */
			'eval' => function (elm) {
				Scripts.eval(elm.exp);
			} incontextof this,

			/* @input */
			'input' => function (elm) {
				var name = elm.name;
				var initial = Scripts.eval(name);
				var result = System.inputString(elm.title, elm.prompt, initial);
				if(result !== void)
				{
					Scripts.eval(@"&name; = '&result;';");
				}
			} incontextof this,

			/* @trace */
			'trace' => function (elm) {
				var exp = elm.exp;
				var result = Scripts.eval(exp);
				dm(@"▼[trace] expression='&exp;' type of result=&typeof(result); result=&result;");
			} incontextof this,

			/* @interrupt */
			'interrupt' => function (elm) {
				return 'stop';
			} incontextof this,

			/* @break */
			'break' => function (elm) {
				return 'break';
			} incontextof this,

			/* @breath */
			'breath' => function (elm) {
				return 'breath';
			} incontextof this,

			/* @breath_clear */
			'breath_clear' => function (elm) {
				return 'breathClear';
			} incontextof this,

			// NOTE: @call @jump @return @script は特殊なタグです。
			// NOTE: 基本的な処理は KAGParser が行うのでこれらのタグは何もする必要はありません。
			// NOTE: 詳しくは各タグのコメントを見てください。
			//---

			/**
			 * @call
			 * elm.ignore には常に false がセットされています。
			 * 必要ならばタグ内で書き換えることができます。
			 * @call タグ呼び出し元は、通常 onCall() です。
			 * GConductor#onCall() は @call タグ呼出し後、elm.ignore の値を返して終了します。
			 * onCall() については、吉里吉里リファレンスの KAGParser#onCall() を参照してください。
			**/
			'call' => alwaysVoid,

			/**
			 * @jump
			 * elm.ignore には常に false がセットされています。
			 * 必要ならばタグ内で書き換えることができます。
			 * @jump タグ呼び出し元は、通常 onJump() です。
			 * GConductor#onJump() は @jump タグ呼出し後、elm.ignore の値を返して終了します。
			 * onJump() については、吉里吉里リファレンスの KAGParser#onJump() を参照してください。
			**/
			'jump' => alwaysVoid,

			/**
			 * @return
			 * elm.ignore には常に false がセットされています。
			 * 必要ならばタグ内で書き換えることができます。
			 * @return タグ呼び出し元は、通常 onReturn() です。
			 * GConductor#onReturn() は @return タグ呼出し後、elm.ignore の値を返して終了します。
			 * onReturn() については、吉里吉里リファレンスの KAGParser#onReturn() を参照してください。
			**/
			'return' => alwaysVoid,

			/**
			 * @script
			 * elm.ignore には常に false がセットされています。
			 * 必要ならばタグ内で書き換えることができます。
			 * elm.script には @iscript ～ @endscript までに書かれた TJS スクリプトがセットされています。
			 * 必要ならばタグ内で書き換えることができます。
			 * @script タグ呼び出し元は、通常 onScript() です。
			 * GConductor#onScript() は @script タグ呼出し後、elm.ignore の値が false ならば、
			 * Scripts.exec(elm.script) を実行します。
			 *
			 * elm.ignore が true ならば何もしません。
			 *
			 * onScript() については、吉里吉里リファレンスの KAGParser#onScript() を参照してください。
			**/
			'script' => alwaysVoid,

		];
	}

	/*! \brief タグハンドラを統合します。
	 *
	 * \params [tags] 統合したい外部提供のタグハンドラを指定します。
	 *
	 * \return 統合したタグハンドラを返します。
	**/
	function unifyTagHandlers(tags)
	{
		var work = tagHandlers_;

		with(GObjectUtils)
		{
			.assignDictionary(work, thisTagHandlers_);
			.unionDictionary(work, tags);
		}

		return work;
	}

	/*! \brief 即座に開始します。
	**/
	function startImmediate()
	{
		onTimer_private_();
	}

	/*! \brief 出来るだけ素早く開始します。
	 *
	 * \remarks 次の atmExclusive なタイミングで開始されます。
	**/
	function start()
	{
		with(timer_)
		{
			.enabled = false;
			.interval = 0;
		}
		with(trigger_)
		{
			.mode = atmExclusive;
			.trigger();
		}

		setControlCode();
		status_ = this.stRun;
	}

	/*! \brief ゆっくり開始します。
	 *
	 * \remarks 次の atmAtIdle なタイミングで開始されます。
	**/
	function startToIdle()
	{
		with(timer_)
		{
			.enabled = false;
			.interval = 0;
		}
		with(trigger_)
		{
			.mode = atmAtIdle;
			.trigger();
		}

		setControlCode();
		status_ = this.stRun;
	}

	/*! \brief 指定時間経過後に開始します。
	 *
	 * \param [time] ミリ秒単位です。
	**/
	function startInTime(wait)
	{
		with(timer_)
		{
			.mode = atmExclusive;
			.interval = wait;
			.enabled = true;
		}

		setControlCode(wait);
		status_ = this.stRun;
		//status_ = stRun if status_ != stBreath && status_ != stWait;
	}

	/*! \brief 時間指定型のウェイトをキャンセルします。
	**/
	function cancelWaitTimer()
	{
		with(timer_)
		{
			if(.enabled && .interval)
				startToIdle();
		}
	}

	/*! \brief 実行を停止します。
	**/
	function stop()
	{
		trigger_.cancel();

		if(running)
		{
			with(timer_)
			{
				.enabled = false;
				.interval = 0;
			}

			status_ = this.stStop;
			onStop();
		}
	}

	/*! \brief サスペンド状態にします。
	 *
	 * \remarks ご利用は計画的に…
	**/
	function suspend()
	{
		if(!suspended_)
		{
			trigger_.cancel();
			timer_.enabled = false;
			suspended_ = true;
		}
	}

	/*! \brief サスペンド状態を解除します。
	 *
	 * \remarks ご利用は計画的に…
	**/
	function resume()
	{
		if(suspended_)
		{
			suspended_ = false;
			startToIdle() if running;
		}
	}

	/**/
	function clear()
	{
		trigger_.cancel();
		timer_.enabled = false;
		super.clear();
	}

	/*! \brief 指定されたイベントがシグナルされるまで停止します。
	 *
	 * \param [handlers] ハンドラを辞書配列形式で指定します。
	**/
	function waitSignal(handlers)
	{
		GObjectUtils.copyDictionary(signalHandlers_, handlers);
		setControlCode('stop');
		status_ = this.stWait;
	}

	/*! \brief 指定のシグナルを発生させる関数オブジェクトを返します。
	 *
	 * \param [name] 発生させたいシグナルを指定します。
	**/
	function compileSignalFunction(name)
	{
		var src = @"function () { signal('&name;'); }";
		dm(@"Generate the signal function source: &src;");
		return ((Scripts.eval(src)) incontextof this);
	}

	/*! \brief シグナルを発生させます。
	 *
	 * \param [name] 発生させたいイベント名を指定します。
	**/
	function signal(name)
	{
		if(status_ != this.stWait)
			return false;

		var f = signalHandlers_[name];
		var arg = signalHandlers_[@"&name;_arg"];

		// ハンドラが登録されていないのですぐに戻る
		if(f === void)
			return false;

		// ハンドラは全てクリアする
		GObjectUtils.clearDictionary(signalHandlers_);

		// 実行を開始してからハンドラを呼び出す
		startToIdle();

		if(f !== null)
			(arg === void ? f() : f(arg));

		log(@"signal: &name;") if debugLevel != tkdlNone;

		return true;
	}

	/*! \brief スクリプトキューの最後にスクリプトを追加します。
	 *
	 * \param [storages*] 追加したいスクリプトを指定します。
	 *
	 * \return 追加後のスクリプトキューのサイズを返します。
	**/
	function pushScript(storages*)
	{
		return scriptQue_.push(storages*);
	}

	/*! \brief スクリプトキューの先頭にスクリプトを追加します。
	 *
	 * \param [storages*] 追加したいスクリプトを指定します。
	 *
	 * \return 追加後のスクリプトキューのサイズを返します。
	**/
	function unshiftScript(storages*)
	{
		scriptQue_.unshift(storages*);
	}

	/*! \brief スクリプトキューをクリアします。
	**/
	function clearScriptQue()
	{
		scriptQue_.clear();
	}

	/*! \brief スクリプトキューの先頭からスクリプトを一つ取り出しジャンプします。
	**/
	function jumpNextScript()
	{
		var node = scriptQue_.shift();

		if(node === void)
			throw new GRuntimeError(@"'&curStorage;' 次のシナリオを実行しようとしましたが見つかりませんでした。");

		var arr = node.split('/', , true);

		jumpScenario(arr[0], arr[1]);

		start();

		return node;
	}

	/**/
	function dumpScriptQue()
	{
		dm(@"=====(&this;)");
		for(var i = 0; i < scriptQue_.count; i++)
		{
			dm(@"&i;:&scriptQue_[i];");
		}
		dm('=====');
	}

	/*! \brief いわゆる @jump タグの TJS 版です。
	**/
	function jumpScenario(storage, label = void)
	{
		loadScenario(storage) if storage != void;
		goToLabel(label) if label != void;
	}

	/*! \brief いわゆる @call タグの TJS 版です。
	**/
	function callScenario(storage, label = void)
	{
		loadScenario(storage) if storage != void;
		callLabel(label) if label != void;
	}

	/*! \brief 現在のシナリオを破棄する。
	 *
	 * \remarks KAGParser にこういう機能が無かったのでとりあえず作ってみただけです。
	 * \remarks 必要かどうかも定かじゃありません。
	**/
	function destroyScenario()
	{
		stop();
		interrupt();
	}

	/*! \brief Debug#notice() にメッセージ出力します。
	 *
	 * このクラスでは 'version' プリセットが利用できます。
	 * 必要ならば派生先でプリセットを追加してください。
	 *
	 * \param [message] 出力したいメッセージを指定します。プリセットも指定可能です。
	**/
	function notice(message)
	{
		switch(message)
		{
		case 'version':
			Debug.notice(@"OS: &System.osName; (&System.platformName;)");
			Debug.notice(@"Kirikiri: &System.versionString;");
			Debug.notice(@"Framework: &GOKI2VersionInfo.name; &GOKI2VersionInfo.versionString;");
			if(specialVersionString != '')
				Debug.notice(@"&System.title;: version &majorVersionNumber;.&minorVersionNumber; [&specialVersionString;]");
			else
				Debug.notice(@"&System.title;: version &majorVersionNumber;.&minorVersionNumber;");
			break;

		default:
			Debug.notice(message);
			break;
		}
	}

	/**/
	function translateTag(tag)
	{
		if(tag instanceof 'Array')
		{
			var arr = [];
			var c = tag.count;

			for(var i = 0; i < c; i++)
				arr.push(translateTag(tag[i])*);

			return arr;
		}

		switch(typeof(tag))
		{
		case 'String':		return [%[tagname : tag]];
		case 'Integer':		return [%[tagname : string(tag)]];
		}

		return [tag];
	}

	/**/
	function executeTag(tagname, elm)
	{
		var tag;
		var originalTagname;

		originalTagname = tagname = elm.tagname if tagname == '';
		tagname = normalizeTag(tagname, elm);

		if(tagname == '')
		{
			tagname = onUnknownTag('', elm);

			if(tagname == '')
				throw new GRuntimeError('タグ名が不明のタグを実行しようとしました。');
		}
		else
		{
			// NOTE: '!' で始まるタグは拡張シンタックスの設定タグを呼び出す。
			if(tagname.substring(0, 1) == '!')
			{
				var target = tagname.substring(1);

				if(target == '')
					throw new GRuntimeError('タグ名が不明のタグに対して拡張構文設定タグを実行しようとしました。');

				if(typeof(tagHandlers_[target]) == 'undefined' && typeof(redirect_[target]) == 'undefined')
					throw new GRuntimeError(@"未知のタグ「&target;」の拡張構文設定タグが呼び出されました。");

				elm['tagname'] = tagname = 'syntax';
				elm['target_tag_name'] = target;
			}

			if(typeof(tagHandlers_[tagname]) == 'undefined')
			{
				tagname = onUnknownTag('', elm);

				if(tagname == '')
					throw new GRuntimeError('タグ名が不明のタグを実行しようとしました。');
			}
		}

		if(typeof(tagHandlers_[tagname]) == 'undefined')
			throw new GRuntimeError(@"未知のタグ「&tagname;」を実行しようとしました。");

		tag = tagHandlers_[tagname];

		var ret = callTagHandler(tag, elm);

		lastProcessedTag_ = originalTagname;
		lastActualProcessedTag_ = tagname;

		return ret;
	}

	/**/
	function callTagHandler(tag, elm)
	{
		//dm(@"&elm.tagname; called.");
		if(tag instanceof 'Function')
			return tag(elm, this);

		throw new GRuntimeError('無効なタグハンドラを呼び出そうとしました。');
	}

	/*! \brief リダイレクトタグを登録します。
	 *
	 * \param [name] リダイレクト元タグ名を指定します。これは存在しないタグ名でも構いません。
	 * \param [redirect] リダイレクト先タグ名を指定します。
	**/
	function setRedirectTag(name, redirect)
	{
		redirect_[name] = redirect;
	}

	/*! \brief リダイレクトタグを削除します。
	 *
	 * \param [name] 削除したいリダイレクトタグ名を指定します。
	**/
	function deleteRedirectTag(name)
	{
		delete redirect_[name] if typeof(redirect_[name]) !== 'undefined';
	}

	/*! \brief タグの拡張構文オブジェクトを返す。
	 *
	 * \param [tagname] タグ名を指定します。
	 *
	 * \return 拡張構文オブジェクトを返します。
	**/
	function getSyntax(tagname)
	{
		var obj = syntax_[tagname];

		if(obj === void)
			syntax_[tagname] = obj = new GSyntax(tagname);

		return obj;
	}

	/**/
	function normalizeTag(tagname, elm)
	{
		var s = syntax_[tagname];

		s.translate(elm) if s !== void;

		if(typeof(redirect_[tagname]) != 'undefined')
			return normalizeTag(redirect_[tagname], elm);

		return tagname;
	}

	/*! \brief タグを後回しにします。
	 *
	 * \param [tag*] 後回しにしたいタグを指定します。
	**/
	function pendingTag(tag*)
	{
		pendingTags_.push(translateTag(tag)*);
	}

	/*! \brief タグを後回しにします。
	 *
	 * \param [tag*] 後回しにしたいタグを指定します。
	**/
	function interruptTag(tag*)
	{
		pendingTags_.unshift(translateTag(tag)*);
	}

	/*! \brief ブレスタグを追加します。
	 *
	 * \param [tagname] ブレスタグとしたいタグ名を指定します。
	**/
	function addBreathTag(tagname)
	{
		breathTags_.add(tagname) if breathTags_.find(tagname) == -1;
	}

	/*! \brief ブレス状態にします。
	**/
	function setBreath()
	{
		if(status_ != this.stBreath)
		{
			if((++breathCount_) >= breathBound)
			{
				status_ = this.stBreath;

				return clearBreath();
			}
		}

		return true;
	}

	/*! \brief ブレス状態をクリアします。
	**/
	function clearBreath()
	{
		if(status_ == this.stBreath)
		{
			breathCount_ = 0;
			startToIdle();

			return false;
		}

		return true;
	}

	/*! \brief コントロールコードを設定します。
	 *
	 * \param [code] コントロールコードを文字列か整数値で指定します。
	 *
	 * \return 設定されたコントロールコードを返します。
	**/
	function setControlCode(code = neutralCode)
	{
		switch(typeof(code))
		{
		case 'String':
			switch(code.toLowerCase())
			{
			case 'next':			controlCode_ = 0; break;
			case 'end':				controlCode_ = -1; break;
			case 'stop':			controlCode_ = -2; break;
			case 'pendingstop':		controlCode_ = -3; break;
			case 'break':			controlCode_ = -4; break;
			case 'pendingbreak':	controlCode_ = -5; break;
			case 'breath':			controlCode_ = -6; break;
			case 'breathclear':		controlCode_ = -7; break;
			default:				throw new GRuntimeError(@"'&code; は不明なコントロールコードです。");
			}
			break;

		case 'Integer':
			controlCode_ = code;
			break;

		default:
			throw new GArgumentsError(
				@"code に '&typeof(code);' タイプの値が指定されました。\n" +
				'code には、文字列か整数値を指定してください。'
			);
		}

		return controlCode_;
	}

	/*! \brief
	**/
	function control_private_(code, tag)
	{
		try {
			// コード変換
			switch(typeof(code))
			{
			case 'void':		code = controlCode_; break;
			case 'Integer':		/* Do nothing. */ break;
			default:			code = setControlCode(code); break;
			}

			// コードクリア
			controlCode_ = neutralCode;

			//dm(@"control code : &code;");
			switch(code)
			{
			// 即座に次を処理
			case 0:		return true;
			// 現在のシナリオを破棄
			case -1:	destroyScenario(); break;
			// 停止
			case -2:	stop(); break;
			// 現在のタグを後回しにして停止
			case -3:	pendingTag(tag); stop(); break;
			// 一旦コアに制御を戻す
			case -4:	startToIdle(); break;
			// 現在のタグを後回しにして、一旦コアに制御を返す。
			case -5:	pendingTag(tag); startToIdle(); break;
			// ブレス状態にして即座に次へ
			case -6:	return setBreath();
			// ブレス状態をクリア
			case -7:	return clearBreath();
			// wait
			default:
				if(code <= 0)
					throw new GRuntimeError('不明なコントロールコードです。');
				startInTime(code);
				break;
			}
		} catch(e) {
			// FIXME: 例外 e の型情報が失われる。clone() すべきか？
			throw new GRuntimeError(
				@"&e.message;\n" +
				@"control code: '&code;'"
			);
		}

		return false;
	}

	function loadScenario(name)
	{
		var storage;

		if(name == '')
			throw new GRuntimeError('スクリプトを読み込もうとしましたが空文字列が指定されました。');

		storage = getExistentStorageNameAndExtension(name, '', scriptFileExtensions*);
		if(storage == void)
		{
			throw new GNotFoundStorageError(
				@"スクリプトストレージ「&name;」が見つかりませんでした。\n" +
				@"\n" +
				@"【検索条件】\n" +
				@"ファイル名：'&name;'\n" +
				@"拡張子：'', '&scriptFileExtensions.join('\', \'', , true);'"
			);
		}

		timer_.enabled = false;
		firstLabelProcessed_ = false;
		startLabelName_ = '';
		pendingTags_.clear();
		resetInterrupt();

		super.loadScenario(storage);
	}

	function goToLabel(label)
	{
		try {
			firstLabelProcessed_ = false;
			startLabelName_ = label;
			resetInterrupt();
			super.goToLabel(label);
		} catch (e) {
			throw new GRuntimeError(e.message);
		}
	}

	function getNextTag()
	{
		// 後回しにされたタグがあればそちらを先に処理する
		if(pendingTags_.count > 0)
			return pendingTags_.shift();

		var obj = super.getNextTag();

		/*if(obj !== void)
		{
			dm(@"&curStorage; = tagname : &obj.tagname;");
		}*/

		// getNextTag() 処理中に pendingTags_ に追加されたものがないかチェック
		if(pendingTags_.count > 0)
		{
			pendingTag(obj);
			obj = pendingTags_.shift();
		}

		// obj が void ならそれはシナリオの終端
		if(obj === void)
			obj = %[tagname : 's', eof : true];

		// ブレス状態ならブレスタグを処理する
		if(breath)
		{
			// ブレスタグかどうか調べる
			if(breathTags_.find(obj.tagname) != -1)
			{
				interruptTag(obj);
				obj = %[tagname : 'breath', 'breath-tag' => obj.tagname];
			}
		}

		//dm(obj.tagname);

		return obj;
	}

	function interrupt()
	{
		if(!interrupted_)
		{
			super.interrupt();
			interrupted_ = true;
		}
	}

	function resetInterrupt()
	{
		if(interrupted_)
		{
			super.resetInterrupt();
			interrupted_ = false;
		}
	}

	function assign(src)
	{
		super.assign(src);

		with(src)
		{
			redirect_ = .redirect_;
			syntax_ = .syntax_;
			startLabelName_ = .startLabelName_;
			lastProcessedTag_ = .lastProcessedTag_;
			lastActualProcessedTag_ = .lastActualProcessedTag_;

			firstLabelProcessed_ = .firstLabelProcessed_;

			pendingTags_.assignStruct(.pendingTags_);
			breathTags_.assign(.breathTags_);
			breathBound = .breathBound;
			breathCount_ = .breathCount_;
			status_ = .status_;
			controlCode_ = .controlCode_;
			interrupted_ = .interrupted_;
			suspended_ = .suspended_;
			GObjectUtils.copyDictionary(signalHandlers_, .signalHandlers_);

			(src.running ? start : stop)();
		}
	}

	function store(tick = void)
	{
		var dic = super.store();

		dic.redirect = redirect_;
		dic.startLabelName = startLabelName_;
		dic.lastProcessedTag = lastProcessedTag_;
		dic.lastActualProcessedTag = lastActualProcessedTag_;

		dic.firstLabelProcessed = firstLabelProcessed_;

		dic.pendingTags = pendingTags_;

		dic.scriptQue = scriptQue_;
		dic.autoJump = autoJump;

		dic.ignoreCR = ignoreCR;

		return dic;
	}

	function restore(dic, tick)
	{
		GObjectUtils.assignDictionary(redirect_, dic.redirect);
		startLabelName_ = dic.startLabelName;
		lastProcessedTag_ = dic.lastProcessedTag;
		lastActualProcessedTag_ = dic.lastActualProcessedTag;

		firstLabelProcessed_ = dic.firstLabelProcessed;

		pendingTags_ = dic.pendingTags;

		scriptQue_.assign(dic.scriptQue);
		autoJump = dic.autoJump;

		ignoreCR = dic.ignoreCR;

		GObjectUtils.clearDictionary(signalHandlers_);

		super.restore(dic);

		start();
	}

	/*! \brief
	**/
	function onUnknownTag(tagname, elm)
	{
	}

	function onTimer_private_()
	{
		var obj;

		try {
			timer_.enabled = false;

			do {
				// NOTE: getNextTag() 内部の例外を誤って一つ前のタグのエラーとしてレポートしないように
				// NOTE: 予め obj には void をセットしておく
				obj = void;

				if(suspended_)
					break;

				obj = getNextTag();
			} while(control_private_(executeTag('', obj), obj));
		} catch(e) {
			if(obj === void)
			{
				// NOTE: タグ処理前の例外は丸投げする。
				raiseUpException(e);
			}
			else
			{
				throw new GRuntimeError(
					@"&obj.tagname; を処理中にエラーが発生しました。\n" +
					@"行：&curLine + 1;\n\n" +
					e.message
				);
			}
		}
	}

	function onTimeOut_private_()
	{
		if(!signal('timeout'))
		{
			start();
		}
	}

	function onStop()
	{
	}

	function onScript(script, storageShortName, scriptStart)
	{
		var tagname = 'script';
		var obj = %[tagname : tagname, script : script, storage : storageShortName, line : scriptStart, ignore : false];

		try {
			executeTag(tagname, obj);
			Scripts.exec(obj.script) if !obj.ignore;
		} catch(e) {
			throw new GRuntimeError(
				@"@iscript - @endscript 内で例外が発生しました。\n" +
				@"ファイル: &storageShortName;\n" +
				@"行: &scriptStart;\n\n" +
				@"&e.message;"
			);
		}
	}

	property window
	{
		getter		{ return window_; }
	}

	property thisTagHandlers
	{
		getter		{ return thisTagHandlers_; }
	}

	property tagHandlers
	{
		getter		{ return tagHandlers_; }
	}

	property redirect
	{
		getter		{ return redirect_; }
	}

	property syntax
	{
		getter		{ return syntax_; }
	}

	property startLabelName
	{
		getter		{ return startLabelName_; }
	}

	property lastProcessedTag
	{
		getter		{ return lastProcessedTag_; }
	}

	property lastActualProcessedTag
	{
		getter		{ return lastActualProcessedTag_; }
	}

	property firstLabelProcessed
	{
		getter		{ return firstLabelProcessed_; }
	}

	property interrupted
	{
		setter(x)	{ (x ? interrupt : resetInterrupt)(); }
		getter		{ return interrupted_; }
	}

	property suspended
	{
		setter(x)	{ (x ? suspend : resume)(); }
		getter		{ return suspended_; }
	}

	property status
	{
		getter		{ return status_; }
	}

	property neutralCode
	{
		getter		{ return 0;	}
	}

	property running
	{
		getter		{ return status_ >= 1 ? true : false; }
	}

	property breath
	{
		getter		{ return status_ == this.stBreath ? true : false; }
	}
}


