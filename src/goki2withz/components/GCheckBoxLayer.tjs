/*
**/


/**
 * このクラスは new できません。
**/
class GRadioGroup
{
	function GRadioGroup()
	{
		throw new GClassObjectConstructorCalledError('GRadioGroup クラスからインスタンスを生成する事はできません。');
	}

	function getGroup(name)
	{
		with(GRadioGroup)
		{
			.groups = %[] if typeof(.groups) == 'undefined';
			.groups[name] = [] if typeof(.groups[name]) == 'undefined';
			return .groups[name];
		}
	}

	/* name グループの id を持つ項目にチェックを入れる */
	function state(name, id)
	{
		with(GRadioGroup)
		{
			var g = .getGroup(name);
			for(var i = 0; i < g.count; i++)
			{
				g[i].checked_ = (g[i].id == id ? true : false);
				g[i].updateState();
			}
		}
	}

	function add(name, obj)
	{
		if(!(obj instanceof 'GCheckBoxLayer'))
			return;

		switch(typeof(name))
		{
		case 'Integer':
		case 'Real':	name = (string)name; break;
		}

		with(GRadioGroup)
		{
			// 削除
			if(name === void)
			{
				.remove(obj);
			}
			// 追加
			else
			{
				// 古いグループから削除
				if(obj.group !== void)
					.remove(obj);

				var g = .getGroup(name);

				g.add(obj) if g.find(obj) == -1;
				obj.group_ = name;
			}
		}
	}

	function remove(obj)
	{
		if(obj.group === void || typeof(GRadioGroup.groups) == 'undefined')
			return;

		// NOTE:
		// この段階で obj.group グループが存在しない場合
		// getGroup() は空の obj.group グループを作成するが
		// obj.group グループから項目が削除されるという事は
		// いつかは生成される可能性が高いので問題はない。
		var g = GRadioGroup.getGroup(obj.group);
		g.remove(obj);
		obj.group_ = void;
	}

	function onCheckEvent(obj, /*event, */elm)
	{
		with(GRadioGroup)
		{
			var g = .getGroup(obj.group);

			if(g.find(obj) == -1)
				throw new Exception(@"&obj.group; グループに登録されていないオブジェクトのイベントを処理しようとしました。");

			// obj がチェックされた
			if(obj.checked)
			{
				// グループの obj 以外を全て非チェックに
				for(var i = 0; i < g.count; i++)
				{
					if(g[i] !== obj && g[i].checked)
					{
						g[i].checked_ = false;
						g[i].updateState();
					}
				}
			}
			// obj が非チェックにされた
			else
			{
				obj.checked_ = true;
				obj.updateState();
			}
		}
	}
}

/**/
class GCheckBoxLayer extends GButtonLayer
{
	var checked_ = false;
	var group_ = void;

	var boxLeft_ = 0;
	var boxTop_ = 0;
	var boxWidth_ = 0;
	var boxHeight_ = 0;

	function GCheckBoxLayer(window, parent, handler)
	{
		super.GButtonLayer(...);
		captionAlign = 'left';
	}

	function finalize()
	{
		GRadioGroup.remove(this) if group_ !== void;

		super.finalize(...);
	}

	function fixImageSize()
	{
		//dm(@"&name; fixImageSize()");
		if(!imageLoaded)
		{
			var layer = new global.Layer(window, this);
			var w = width;
			var h = height;
			var tw = font.getTextWidth(caption);
			var th = font.getTextHeight(caption);
			var iw, ih;

			layer.loadImages('check');

			iw = layer.imageWidth;
			ih = layer.imageHeight;

			boxWidth_ = iw;
			boxHeight_ = ih;

			if(tw + alignToWidth(captionAlign, caption) > w)
				w = tw + alignToWidth(captionAlign, caption);
			if(th > h)
				h = th;

			setSize(w, h);

			w = imageWidth;
			h = imageHeight;

			face = dfBoth;
			colorRect(0, 0, w, h, 0, -255);
			colorRect(0, 0, w, h, bodyColor, bodyOpacity) if bodyColor != clNone;

			var l = 0;
			var t = (height - ih) >> 1;
			var off = 0;

			for(var i = 0; i < 4; i++)
			{
				colorRect(off + l, t, iw, ih, 0xFFFFFF, 255);
				colorRect(off + l, t, iw, 1, 0x505050, 128);
				colorRect(off + l, t + 1, 1, ih - 1, 0x505050, 128);
				colorRect(off + l + 1, t + 1, iw - 2, 1, 0x000000, 128);
				colorRect(off + l + 1, t + 2, 1, ih - 3, 0x000000, 128);
				colorRect(off + l + 1, t + ih - 1, iw - 1, 1, 0xB0B0B0, 128);
				colorRect(off + l + iw - 1, t + 1, 1, ih - 1, 0xB0B0B0, 128);
				colorRect(off + l + 2, t + ih - 2, iw - 4, 1, 0x606060, 128);
				colorRect(off + l + iw - 2, t + 2, 1, ih - 3, 0x606060, 128);
				off += width;
			}

			off = width << 1;
			operateRect(off + l, t, layer, 0, 0, iw, ih);
			off += width;
			operateRect(off + l, t, layer, 0, 0, iw, ih);

			boxLeft_ = 0;
			boxTop_ = t;

			invalidate layer;
		}
	}

	function assign(src)
	{
		super.assign(src);

		with(src)
		{
			checked_ = .checked_;
			//group_ = .group_;

			boxLeft_ = .boxLeft_;
			boxTop_ = .boxTop_;
			boxWidth_ = .boxWidth_;
			boxHeight_ = .boxHeight_;
		}
	}

	function click()
	{
		checked_ = !checked_;
		updateState();

		onCheckStateChanged();

		return true;
	}

	function widthToImageWidth(width)
	{
		return width << 2;
	}

	function imageWidthToWidth(bufferWidth)
	{
		return bufferWidth >> 2;
	}

	function drawBody(/* offx, offy */)
	{
	}

	function drawCaption(offx = void, offy = void, color = captionColor, edge = edgeColor, shadow = shadowColor, shadowOffsetX = 2, shadowOffsetY = 2, shadowExtent = 2)
	{
		if(caption == '')
			return;

		if(offx === void || offy === void)
		{
			super.drawCaption(0, 0, color);
			super.drawCaption((width << 1), 0, color);

			super.drawCaption(width, 0, clHighlightText);
			super.drawCaption((width << 1) + width , 0, clHighlightText);
		}
		else
		{
			super.drawCaption(offx, offy, color);
		}
	}

	function alignToWidth(align, str)
	{
		if(font.face[0] == '@')
		{
			return (width - font.getTextHeight(str)) >> 1;
		}
		else
		{
			switch(align)
			{
			case 'l':
			case 'left':	return boxLeft_ + boxWidth_ + 4;
			default:		return super.alignToWidth(...);
			}
		}
	}

	function onCheckStateChanged()
	{
		if(group !== void && typeof(global.GRadioGroup) != 'undefined' && typeof(GRadioGroup.onCheckEvent) != 'undefined')
			GRadioGroup.onCheckEvent(this, %[]);
		callHandler('onCheckStateChanged');
	}

	function onUpdateState()
	{
		if(checked)
		{
			if(rollover)
				imageLeft = -((width << 1) + width);
			else
				imageLeft = -(width << 1);
		}
		else
		{
			if(rollover)
				imageLeft = -width;
			else
				imageLeft = 0;
		}
	}

	property checked
	{
		setter(x)
		{
			if(group !== void && x)
			{
				GRadioGroup.state(group, id);
			}
			else
			{
				checked_ = x;
				updateState();
			}
		}
		getter		{ return checked_; }
	}

	property group
	{
		setter(x)	{ GRadioGroup.add(x, this); }
		getter		{ return group_; }
	}
}


