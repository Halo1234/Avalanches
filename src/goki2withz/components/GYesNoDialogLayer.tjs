/**
 * $Author$
 * $Revision$
**/


/**/
class GYesNoDialogMainFormLayer extends GFormLayer
{
	function GYesNoDialogMainFormLayer(window, parent, handler)
	{
		super.GFormLayer(...);
		rclickHide = false;
		focusable = false;
	}

	function drawCaption(offx = 0, offy = 0, color = clNone, edge = clNone)
	{
		super.drawCaption(0, -20, color, edge);
	}
}

/**/
class GYesNoDialogLayer extends GFormLayer
{
	var mainFormLayer_;

	var yesHandler = void;
	var noHandler = void;

	var result_ = '';		// 'yes' or 'no'
	var checked_ = false;	// true なら on
							// false なら off

	var autoInvalidateAtHideCompleted = false;		// この値を true に設定すると非表示が完了した後で自身を invalidate します。

	function GYesNoDialogLayer(window, parent, handler)
	{
		super.GFormLayer(...);
		bodyColor = 0x000000;
		bodyOpacity = 128;
		rclickHide = false;

		// NOTE:
		// このレイヤより後ろにあるレイヤが操作できてはまずいので
		// 自身をガードレイヤとしてその上にフォームを設置する。
		setSize(window.scWidth, window.scHeight);

		// NOTE:
		// 参照値をデフォルトの識別子として代用。
		id = this;

		family.receive(mainFormLayer_ = createFormLayer(window, this, onFormEvent));

		var captions = ['はい', 'いいえ'];
		var ids = ['yes', 'no'];
		var focus = softFocus;
		var obj;

		for(var i = 0; i < captions.count; i++)
		{
			family.receive(obj = createButtonLayer(window, mainFormLayer_, onButtonEvent));
			obj.caption = captions[i];
			obj.id = ids[i];
			focus.add(obj);
		}

		obj = createCheckBoxLayer(window, mainFormLayer_, onCheckEvent);
		focus.add(obj);
	}

	function createFormLayer(window, parent, handler)
	{
		var obj = new GYesNoDialogMainFormLayer(window, parent, handler);

		return obj;
	}

	function createButtonLayer(window, parent, handler)
	{
		var obj = new GButtonLayer(window, parent, handler);

		obj.setSize(70, 25);
		obj.visible = true;

		return obj;
	}

	function createCheckBoxLayer(window, parent, handler)
	{
		var obj = new GCheckBoxLayer(window, parent, handler);

		obj.bodyOpacity = 0;
		obj.setSize(160, 25);
		obj.visible = false;

		return obj;
	}

	function setMessageText(text)
	{
		mainFormLayer_.caption = text;
	}

	function setCheckMessageText(text)
	{
		with(checkBoxLayer)
		{
			.caption = text;
			.checked = false;
			.visible = (text == '' ? false : true);
		}
	}

	function fixMainFormLayerPosition()
	{
		mainFormLayer_.setCenterPos(centerX, centerY);
	}

	function fixWidgetsPosition()
	{
		var layer = mainFormLayer_;
		var th = layer.font.getTextHeight(messageText);

		with(yesButtonLayer)
			.setPos(((layer.width - (.width << 1) - 10) >> 1), th + 30);
		with(noButtonLayer)
			.setPos(((layer.width - (.width << 1) - 10) >> 1) + 80, th + 30);
		with(checkBoxLayer)
			.setPos((layer.width - .width), th + 60);
	}

	/**
	 * 自分自身の参照をキャッシュに追加／削除します。
	**/
	function pushToCache()
	{
		pushYesNoDialogLayerForCache(this);

		return this;
	}

	function hideComplete()
	{
		super.hideComplete(...);

		if(autoInvalidateAtHideCompleted)
			invalidate removeYesNoDialogLayerFromCache(id);
	}

	function beginShowEffect()
	{
		with(mainFormLayer_)
		{
			.assignFontToParent();

			if(!.imageLoaded)
			{
				var tw = .font.getTextWidth(messageText);
				var th = .font.getTextHeight(messageText);
				var w = tw + /* 余白 */40;
				var h = (th << 1) + 60 + (checkMessageText != '' ? 10 : 0);

				w = 200 if w < 200;

				if(w != .width || h != .height)
				{
					.setSize(w, h);

					fixMainFormLayerPosition();
					fixWidgetsPosition();
				}
			}

			.show();
		}

		anotherCycle.uniqueAdd(showComplete);
	}

	/**/
	function showComplete()
	{
		setMode();

		super.showComplete();
	}

	function onFormEvent(obj, event, elm)
	{
	}

	function onButtonEvent(obj, event, elm)
	{
		if(event == 'onButton')
		{
			var checkEnabled = checkBoxLayer.visible;
			var handler = void;

			result_ = obj.id;

			switch(result_)
			{
			case 'yes':		handler = yesHandler; break;
			case 'no':		handler = noHandler; break;
			}

			if(handler !== void)
			{
				if(checkEnabled)
					anotherCycle.uniqueAdd(handler, checked_);
				else
					anotherCycle.uniqueAdd(handler);
			}

			hide();
		}
	}

	function onCheckEvent(obj, event, elm)
	{
		if(event == 'onCheck')
			checked_ = obj.checked;
	}

	function onLayerResize()
	{
		super.onLayerResize(...);

		fixMainFormLayerPosition();
		fixWidgetsPosition();
	}

	property messageText
	{
		setter(x)	{ setMessageText(x); }
		getter		{ return mainFormLayer_.caption; }
	}

	property checkMessageText
	{
		setter(x)	{ setCheckMessageText(x); }
		getter		{ return checkBoxLayer.caption; }
	}

	property result
	{
		getter		{ return result_; }
	}

	property checked
	{
		setter(x)	{ checked_ = checkBoxLayer.checked = x; }
		getter		{ return checked_; }
	}

	property mainFormLayer
	{
		getter		{ return mainFormLayer_; }
	}

	property yesButtonLayer
	{
		getter		{ return softFocus.at(0); }
	}

	property noButtonLayer
	{
		getter		{ return softFocus.at(1); }
	}

	property checkBoxLayer
	{
		getter		{ return softFocus.at(2); }
	}
}


