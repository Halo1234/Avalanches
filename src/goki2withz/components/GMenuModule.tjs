/*
 $Author$
 $Revision$
*/


/**
 * \brief メニュー用のモジュール
 *
 * \brief detach（接続解除）に関するロジック以外は GModule と変わりません。
 * \brief あとはいくつかのユーティリティがあるので有効活用してやってください。
**/
class GMenuModule extends GModule
{
	var items_ = [];	// このモジュールで管理する項目リスト
						// onDetach() 呼び出し時に「子のオーナー」に破棄される事を伝える

	function GMenuModule(container, name)
	{
		super.GModule(...);
	}

	/**/
	function createMenuItem(window, parent, name, key, handler = void, weight = 0)
	{
		var h = (handler === void ? onNoHandler : handler);
		var obj = new GMenuItem(window, parent, h, this, weight);

		obj.name = name;
		obj.key = key;

		return obj;
	}

	/**/
	function groupingMenuItems(id, items*)
	{
		for(var i = 0; i < items.count; i++)
		{
			items[i].group = id;
			items[i].radio = true;
		}
	}

	/**/
	function add(item)
	{
		items_.add(item);
		return item;
	}

	/*
	 * \brief デフォルトのハンドラ
	**/
	function onNoHandler(item)
	{
		// 必要ならオーバーライドすること
		dm(@"メニュー項目「&item.caption;」はハンドラが登録されていません。");
	}

	function onDetach(name)
	{
		// モジュールの接続が解除されたので
		// Window からメニュー項目の接続を解除してやる
		var arr = items_;
		for(var i = 0; i < arr.count; i++)
			arr[i].parent.remove(arr[i]);

		// 管理中の項目に外部から子が追加されている可能性があるので
		// オーナーが自分以外の「項目のオーナー」すべてに onUpperLinkDied() を呼び出してやる
		var child, obj;
		for(var i = 0; i < arr.count; i++)
		{
			child = arr[i].children;
			for(var j = 0; j < child.count; j++)
			{
				obj = child[i].owner;
				if(obj !== void && obj != this)
					obj.onUpperLinkDied(child[i]);
				else
					invalidate child[i];
			}
		}
	}

	/**
	 * \brief このインスタンスで管理中の項目の親が別モジュールで管理されている場合
	 * \brief 親モジュールの接続が解除された時に呼ばれる
	 * \brief yourItem はこのモジュールで管理中の項目
	**/
	function onUpperLinkDied(yourItem)
	{
		// この呼び出し中で yourItem の親を変更しないと連鎖的に yourItem が無効化される
		// GMenuModule としては非常にマズイので親より先に死んでおく
		holder.unload(name);

		// 必要ならこのメソッドをオーバーライドして親を乗り換える事も可能
		// とりあえずはデフォルトの動作として親不幸を選択します。
	}

	property topItem
	{
		getter		{ return items_[0]; }
	}
}


