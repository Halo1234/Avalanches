/*
 * $Author$
 * $Revision$
**/


/**/
class GVideoOverlay extends VideoOverlay
{
	var name;
	var window;
	var handler;

	var lastStatus_ = 'unload';
	var status_ = 'unload';
	var videoStorage_ = '';
	var layerElm1 = %[layer : '', page : ''];
	var layerElm2 = %[layer : '', page : ''];
	var paused_ = false;

	var inPrepare_ = false;

	function GVideoOverlay(window, handler)
	{
		super.VideoOverlay(window);
		this.window = window;
		this.handler = handler;
		this.name = GObjectUtils.getClassName(this);

		// open() オーバーライド
		open = openTryMixerMode;
	}

	function finalize()
	{
		stop();
		super.finalize();
	}

	/*
	 * \brief mode が vomOverlay なら vomMixer で開く事を試行する open() ラッパー
	**/
	function openTryMixerMode(storage)
	{
		videoStorage_ = '';

		// もし mode が vomOverlay であれば vomMixer を試行してみる
		if(mode == vomOverlay)
		{
			var ret = true;

			try {
				mode = vomMixer;
				super.open(storage);
				videoStorage_ = storage;
			} catch(e) {
				// vomMixer ではダメだったので vomOverlay に戻してリトライ
				warn("!!---GVideoOverlay");
				warn("!!---vomMixer の試行に失敗しました。");
				mode = vomOverlay;
				ret = openAcceptMode(storage);
				open = openAcceptMode;
			}

			return ret;
		}

		return openAcceptMode(storage);
	}

	/**/
	function openAcceptMode(storage)
	{
		try {
			videoStorage_ = '';
			super.open(storage);
			videoStorage_ = storage;
		} catch(e) {
			if(e.message.indexOf(".dll") != -1)
				throw e;
			warn(@"ムービー &storage; を開けません。");
			warn(@">> &e.message;");

			return false;
		}

		return true;
	}

	/**/
	function close()
	{
		super.close();
		videoStorage_ = '';
		open = openTryMixerMode;
	}

	/**/
	function prepare()
	{
		super.prepare();
		inPrepare_ = true;
	}

	/**/
	function play(storage, loop = false)
	{
		if(videoStorage_ == '' && !open(storage))
			return;
		try {
			super.play();
			paused_ = false;
		} catch(e) {
			if(e.message.indexOf(".dll") != -1)
				throw e;
			warn(@"ムービー &_videoStorage; を再生できません。");
			warn(@">> &e.message;");
		}
	}

	/**/
	function pause()
	{
		if(!paused_)
		{
			super.pause();
			paused_ = true;
		}
	}

	/**/
	function resume()
	{
		if(paused_)
		{
			try {
				super.play();
				paused_ = false;
			} catch(e) {
				if(e.message.indexOf(".dll") != -1)
					throw e;
				warn(@"ムービー &_videoStorage; を再開できません。");
				warn(@">> &e.message;");
			}
		}
	}

	/**/
	function callHandler(message, elements = %[])
	{
		var h = handler;

		if(h instanceof 'Function')
			return h(this, message, elements);
		else
		if(typeof(h) == 'Object')
			throw new GNotImplementedError();

		return void;
	}

	/**/
	function stop()
	{
		super.stop(...);
		super.close();
		paused_ = false;
	}

	/**/
	function store(tick)
	{
		var dic = %[];

		dic.name = name;
		dic.status = status_;
		dic.lastStatus = lastStatus;
		dic.layerElm1 = layerElm1;
		dic.layerElm2 = layerElm2;
		dic.videoStorage = videoStorage_;
		dic.paused = paused_;

		if(mode == vomLayer)
		{
			dic.visible = visible;
			dic.loop = loop;
			dic.frame = frame;

			if(numberOfAudioStream > 0)
			{
				dic.audioBalance = audioBalance;
				dic.audioVolume = audioVolume;
				dic.enabledAudioStream = enabeledAudioStream;
			}

			dic.segmentLoopStartFrame = segmentLoopStartFrame;
			dic.segmentLoopEndFrame = segmentLoopEndFrame;
			dic.periodEventFrame = periodEventFrame;
		}

		return dic;
	}

	function restore(dic, tick)
	{
		name = dic.name;
		status_ = dic.status;
		lastStatus_ = dic.lastStatus;
		layerElm1 = GObjectUtils.clone(dic.layerElm1);
		layerElm2 = GObjectUtils.clone(dic.layerElm2);
		videoStorage_ = dic.videoStorage;
		dic.paused = paused_;

		callHandler('onSetLayer1', layerElm1);
		callHandler('onSetLayer2', layerElm2);

		if(dic.lastStatus != 'unload')
		{
			open(videoStorage_);
			// この設定は必ず frame より先に行うこと
			periodEventFrame = dic.periodEventFrame;
			if(dic.frame >= 0)
				frame = dic.frame;

			if(numberOfAudioStream > 0)
			{
				audioBalance = dic.audioBalance;
				audioVolume = dic.audioVolume;
				if(dic.enabledAudioStream >= 0)
					selectAudioStream(dic.enabledAudioStream);
				super.setSegmentLoop(dic.segmentLoopStartFrame, dic.segmentLoopEndFrame);
				if(dic.lastStatus == 'pause' || dic.lastStatus == 'play')
					play();
				if(dic.lastStatus == 'pause')
					pause();
			}
		}
	}

	/**/
	function onStatusChanged(status)
	{
		status_ = status;
		super.onStatusChanged(status);
		callHandler('onStatusChanged', %[prev : lastStatus_, now : status]);
		lastStatus_ = status;
	}

	/**/
	function onPeriod(type)
	{
		super.onPeriod(type);

		switch(type)
		{
		case perPrepare:	inPrepare_ = false; break;
		}

		callHandler('onPeriod', %[type: type]);
	}

	/**/
	function onFrameUpdate(frame)
	{
		super.onFrameUpdate(frame);
		callHandler('onFrameUpdate', %[frame: frame]);
	}

	/**/
	property canWaitStop
	{
		getter		{ return playing && !loop; }
	}

	/**/
	property lastStatus
	{
		getter		{ return lastStatus_; }
	}

	/**/
	property playing
	{
		getter		{ return status_ == "play" ? true : false; }
	}

	/**/
	property videoStorage
	{
		getter		{ return videoStorage_; }
	}

	/**/
	property paused
	{
		setter(x)	{ (x ? pause : resume)(); }
		getter		{ return paused_; }
	}

	/**/
	property inPrepare
	{
		getter		{ return inPrepare; }
	}
}


