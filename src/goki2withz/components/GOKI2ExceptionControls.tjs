/*
**/


if(typeof(global.exceptionControls) !== 'undefined')
{
	throw new Exception(
		"GOKI2 例外処理機構は既に登録されているか、外部システムと競合しています。\n" +
		"このエラーは GOKI2ExceptionControls.tjs を２回以上読み込んだ時に発生する事があります。"
	);
}

/*! \brief GOKI2 用例外処理用クラス。
 *
 * 使い方は exceptionControls.addExceptionHandler() に
 * 登録する例外クラス名と対応する例外ハンドラを渡して呼び出すだけです。
 *
 * \remarks このクラスのオブジェクトはコンテキスト内で常に一つだけ存在するべきです。
 * \remarks また、最初の一つの作成を除いて作成されるべきではありません。
**/
class GOKI2ExceptionControls
{
	var exceptionHandlers_ = %[];
	var exception_ = void;

	function GOKI2ExceptionControls()
	{
		System.exceptionHandler = this.exceptionHandler_private_;
	}

	function finalize()
	{
		// Do nothing.
	}

	function addExceptionHandler(className, handler)
	{
		exceptionHandlers_[className] = handler;
	}

	function getExceptionHandler(className)
	{
		return exceptionHandlers_[className];
	}

	function exceptionHandler_private_(exception)
	{
		exception_ = exception;

		var result = false;
		var eventDisabledValueCache = System.eventDisabled;

		System.eventDisabled = true;

		try {
			result = exceptionHandling_private_(exception);
		} catch (e) {
			abort(@"The exception occurred in the exception handler.\n\n&e.message;", 'EH trouble.');
		}

		System.eventDisabled = eventDisabledValueCache;

		exception_ = void;

		return result;
	}

	function exceptionHandling_private_(exception)
	{
		if(exception === null)
			return false;

		// 例外の内容をコンソールログに残す
		if(typeof(exception.trace) !== 'undefined')
			Debug.message(@"trace: &exception.trace;");
		Debug.message(exception.message);

		var classTree = Scripts.getClassNames(exception);
		var name, handler;

		try {
			handler = getExceptionHandler(name = classTree[0]);
		} catch (e) {
			return false;
		}

		var result = false;

		result = handler(this) if handler instanceof 'Function';

		return result;
	}

	property exception
	{
		getter		{ return exception_; }
	}
}


// NOTE: 最初の一つを作成してクラス定義を削除する。
global.exceptionControls = new GOKI2ExceptionControls();
delete GOKI2ExceptionControls;


/*! \brief デフォルトの例外ハンドラです。
 *
 * \param [ec] GOKI2ExceptionControls クラスのオブジェクトが渡されます。
**/
function goki2DefaultExceptionHandler(ec)
{
	// NOTE: 吉里吉里に処理を任せる。
	return false;
}

/*! \brief エラーメッセージを表示するだけの例外ハンドラです。
 *
 * \param [ec] GOKI2ExceptionControls クラスのオブジェクトが渡されます。
**/
function goki2DisplayOnlyExceptionHandler(ec)
{
	if(ec.exception !== void)
		System.inform(ec.exception.message);

	return true;
}

/*! \brief 強制的にログを出力する以外は goki2DisplayOnlyExceptionHandler() と同じ動作をする例外ハンドラです。
 *
 * \param [ec] GOKI2ExceptionControls クラスのオブジェクトが渡されます。
**/
function goki2ReportExceptionHandler(ec)
{
	Debug.startLogToFile();

	return goki2DisplayOnlyExceptionHandler(ec);
}

/*! \brief GOKI2 用例外クラス
 *
 * +Exception
 *  +GException
 *   +GFatalError
 *    +GImpossibleAccessError
 *    +GClassObjectConstructorCalledError
 *    +GNotImplementedError
 *   +GStandardError
 *    +GArgumentsError
 *    +GIOError
 *     +GNotFoundStorageError
 *    +GOutOfRangeError
 *    +GRuntimeError
**/
class GException extends Exception
{
	function GException(message)
	{
		super.Exception(...);
	}
}

/*! \brief 実行の再開が困難な致命的なエラーです。
**/
class GFatalError extends GException
{
	function GFatalError(message = '致命的なエラーが発生しました。')
	{
		super.GException(...);
	}
}

/*! \brief アクセス不可能なプロパティなどにアクセスした時に発生するエラーです。
**/
class GImpossibleAccessError extends GFatalError
{
	function GImpossibleAccessError(message = 'アクセス不可能なメンバを参照しました。')
	{
		super.GFatalError(...);
	}
}

/*! \brief クラスオブジェクトのコンストラクタを呼び出した時に発生するエラーです。
**/
class GClassObjectConstructorCalledError extends GFatalError
{
	function GClassObjectConstructorCalledError(message = 'クラスオブジェクトは作成できません。')
	{
		super.GFatalError(...);
	}
}

/*! \brief 未実装機能にアクセスした時に発生するエラーです。
**/
class GNotImplementedError extends GFatalError
{
	function GNotImplementedError(message = 'この機能は実装されていません。')
	{
		super.GFatalError(...);
	}
}

/*! \brief 全ての基本的なエラーの親になるエラーです。
**/
class GStandardError extends GException
{
	function GStandardError(message = '一般エラーです。')
	{
		super.GException(...);
	}
}

/*! \brief 引数の内容が間違っている時に発生するエラーです。
**/
class GArgumentsError extends GStandardError
{
	function GArgumentsError(message = '引数の内容が間違っています。')
	{
		super.GStandardError(...);
	}
}

/*! \brief 入出力で問題が発生した時に発生するエラーです。
**/
class GIOError extends GStandardError
{
	function GIOError(message = '入出力エラーです。')
	{
		super.GStandardError(...);
	}
}

/*! \brief 指定されたストレージが見つからない時に発生するエラーです。
**/
class GNotFoundStorageError extends GIOError
{
	function GNotFoundStorageError(message = '指定されたストレージは見つかりませんでした。')
	{
		super.GIOError(...);
	}
}

/*! \brief 配列や辞書配列を扱うオブジェクトに対して範囲外の添え字を指定した時に発生するエラーです。
**/
class GOutOfRangeError extends GStandardError
{
	function GOutOfRangeError(message = '範囲外です。')
	{
		super.GStandardError(...);
	}
}

/*! \brief あらゆる実行時のエラーです。
**/
class GRuntimeError extends GStandardError
{
	function GRuntimeError(message = '実行時エラーです。')
	{
		super.GStandardError(...);
	}
}

// NOTE: 例外登録
with(exceptionControls)
{
	.addExceptionHandler('Exception', goki2DefaultExceptionHandler);

	.addExceptionHandler('GException', goki2DefaultExceptionHandler);

	.addExceptionHandler('GFatalError', goki2DefaultExceptionHandler);
	.addExceptionHandler('GImpossibleAccessError', goki2DefaultExceptionHandler);
	.addExceptionHandler('GClassObjectConstructorCalledError', goki2DefaultExceptionHandler);
	.addExceptionHandler('GNotImplementedError', goki2DefaultExceptionHandler);

	.addExceptionHandler('GStandardError', goki2DefaultExceptionHandler);
	.addExceptionHandler('GArgumentsError', goki2DefaultExceptionHandler);
	.addExceptionHandler('GIOError', goki2DefaultExceptionHandler);
	.addExceptionHandler('GNotFoundStorageError', goki2DefaultExceptionHandler);
	.addExceptionHandler('GOutOfRangeError', goki2DefaultExceptionHandler);
	.addExceptionHandler('GRuntimeError', goki2DefaultExceptionHandler);
}


