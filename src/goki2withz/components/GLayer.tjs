/*
 * $Revision: 307 $
**/


/*! \brief レイヤ基本クラス
**/
class GLayer extends Layer
{
	var handler;

	var family_ = void;
	var conductor_ = void;				//!< \brief このレイヤのコンダクタ。
	var colorCorrection_ = void;		//!< \brief このレイヤの色補正用オブジェクト。
	var shaker_ = void;					//!< \brief このレイヤのシェイカー
	var splineUsed_ = false;
	var mover_ = void;					//!< \brief このレイヤのムーバー

	var mirror_ = null;					//!< \brief ミラーレイヤ。最後にアサインしたレイヤです。
	var workLayer_;						//!< \brief 作業用レイヤ
	var internalVisible_ = void;		//!< \brief 作業中の visible 状態
	var offScreen_ = false;

	var name_;

	var loadImagesStorage_ = void;
	var loadImagesColorKey_ = clNone;
	var clearImagesColor_ = 0x000000;

	var prerenderedFontStorage_ = '';

	var fixPositionToCenter = false;
	var offsetX_ = 0;
	var offsetY_ = 0;
	var left_ = 0;
	var top_ = 0;

	var defaultCursor = crDefault;

	var flipLeftRight_ = false;
	var flipUpDown_ = false;

	var partialImages_ = [];

	var defaultFontFace_;
	var defaultFontSize_;

	var showRunning_ = false;			//!< \brief 表示効果実行中は true に設定されます。
	var hideRunning_ = false;			//!< \brief 非表示効果実行中は true に設定されます。

	var inTransition_ = false;			//!< \brief トランジション中は true に設定されます。
	var exchangeAfterTransition_;
	var withChildrenTransition_;

	var mouseEnterToLeave_ = false;		//!< \biref onMouseEnter を通過してから onMouseLeave() が発生するまでの間 true に設定されます。
	var mouseDownToUp_ = false;			//!< \biref onMouseDown を通過してから onMouseUp() が発生するまでの間 true に設定されます。

	/**/
	function GLayer(window, parent, handler = void)
	{
		this.handler = handler;

		super.Layer(window, parent);

		defaultFontFace_ = font.face;
		defaultFontSize_ = font.height;

		// 特に理由は無い部分もあるが明示的に初期化しておく。
		name = GObjectUtils.getClassName(this);
		hitType = htMask;
		hitThreshold = 256;
		joinFocusChain = false;
	}

	function finalize()
	{
		handler = void;

		stopTransition();
		cancelShowHide(false);

		invalidate conductor_ if conductor_ !== void;
		conductor_ = void;
		invalidate colorCorrection_ if colorCorrection_ !== void;
		colorCorrection_ = void;

		invalidate family_ if family_ !== void;
		family_ = void;

		super.finalize(...);
	}

	/**/
	function loadImages(storage, key = clNone)
	{
		flipLeftRight_ = false;
		flipUpDown_ = false;

		key = adjustColorKey(key);
		colorCorrection.clear();
		partialImages_.clear();

		return super.loadImages(loadImagesStorage_ = storage, loadImagesColorKey_ = key);
	}

	/**/
	function loadPartialImage(storage, key, destX, destY, srcX, srcY, srcW, srcH, mode, opacity)
	{
		if(key === void)
		{
			key = loadImagesColorKey_;
		}

		var layer = window.temporaryLayer;
		var tag = layer.loadImages(storage, key);

		if(tag !== null)
		{
			if(mode === void && tag.mode !== void)
				mode = tag.mode;
		}

		if(mode !== void)
		{
			var info = imageTagLayerType[mode];

			if(info !== void)
				layer.type = info.type;
		}

		colorCorrection.apply(layer);

		if(flipLeftRight_)
		{
			layer.flipLR();
			destX = imageWidth - destX - srcW;
			srcX = temp.imageWidth - srcX - srcW;
		}
		if(flipUpDown_)
		{
			layer.flipUD();
			destY = imageHeight - destY - srcH;
			srcY = temp.imageHeight - srcY - srcH;
		}

		var w = (srcW === void ? layer.imageWidth : srcW);
		var h = (srcH === void ? layer.imageHeight : srcH);

		if(mode == 'copy' || mode == 'opaque')
		{
			face = dfAlpha;
			copyRect(destX, destY, layer, srcX, srcY, w, h);
		}
		else
		{
			opacity = 255 if opacity === void;

			switch(mode)
			{
			case '': // default
			case 'pile':
			case 'alpha':
				holdAlpha = false;
				face = dfAlpha;
				break;
			case 'addalpha':
				holdAlpha = false;
				face = dfAddAlpha;
				break;
			default:
				holdAlpha = true;
				face = dfOpaque;
				break;
			}
			operateRect(destX, destY, layer, srcX, srcY, w, h, omAuto, opacity);

			face = dfAuto;
		}

		partialImages_.push(%[
			name : 'loadPartialImage',
			storage : storage, key : key,
			destX : destX, destY : destY,
			srcX : srcX, srcY : srcY, srcW : srcW, srcH : srcH,
			mode : mode, opacity : opacity
		]);
	}

	/**/
	function drawReconstructibleText(x, y, text, vertical, face, angle, size, color, italic, bold, shadow, edge, shadowColor, edgeColor)
	{
		with(font)
		{
			var f = (face === void ? defaultFontFace_ : face);
			var s = (size === void ? defaultFontSize_ : size);
			var a = (angle === void ? (vertical ? 2700 : 0) : angle);

			if(vertical)
				f = @"@&f;";
			.face = f;
			.height = s;
			.angle = a;
			.italic = italic if italic !== void;
			.bold = bold if bold !== void;
		}

		if(edge)
		{
			drawText(x, y, text, color, 255, true, 512, edgeColor, 1, 0, 0);
		}
		else
		if(shadow)
		{
			drawText(x, y, text, color, 255, true, 255, shadowColor, 0, 2, 2);
		}
		else
		{
			drawText(x, y, text, color, 255, true);
		}

		partialImages_.push(%[
			name : 'drawReconstructibleText',
			x : x, y : y, text : text,
			vertical : vertical,
			face : face, angle : angle, size : size, color : color,
			italic : italic, bold : bold,
			shadow : shadow, edge : edge, shadowColor : shadowColor, edgeColor : edgeColor
		]);
	}

	/**/
	function createFamily(owner)
	{
		return new GFamily(owner);
	}

	/**/
	function createConductor(window, layer)
	{
		return new GLayerConductor(window, layer);
	}

	/**/
	function createColorCorrection(owner)
	{
		return new GLayerColorCorrection(owner);
	}

	/**/
	function createShaker(owner)
	{
		return new GLayerShaker(owner);
	}

	/**/
	function createMover(owner)
	{
		return new GLayerMover(owner);
	}

	/**/
	function createSplineMover(owner)
	{
		return new GLayerSplineMover(owner);
	}

	/**/
	function clearImages(value = neutralColor)
	{
		loadImagesStorage_ = void;
		loadImagesColorKey_ = clNone;
		flipLeftRight_ = false;
		flipUpDown_ = false;
		super.fillRect(0, 0, imageWidth, imageHeight, clearImagesColor_ = value) if hasImage;

		if(conductor_ !== void)
		{
			conductor.clear();
			invalidate conductor_;
			conductor_ = void;
		}
		colorCorrection_.clear() if colorCorrection_ !== void;
	}

	/**/
	function callHandler(message, elements = %[])
	{
		var h = handler;

		if(h instanceof 'Function')
			return h(this, message, elements);
		else
		if(typeof(h) == 'Object')
			throw new GNotImplementedError();

		return void;
	}

	/**/
	function callHandlerInAnotherCycle(message, elements = %[])
	{
		anotherCycle.add(callHandler, message, elements);
	}

	/*! \brief レイヤーにアサインします。
	 *
	 * \param [src] アサイン先レイヤーを指定します。
	 *
	 * \return this を返します。
	 *
	 * \remarks 自身がプライマリの場合は offScreen プロパティ値は不定になります。
	**/
	function assign(src)
	{
		assignImages(src);

		mirror_ = src;
		src.mirror_ = this;

		with(src)
		{
			loadImagesStorage_ = .loadImagesStorage_;
			loadImagesColorKey_ = .loadImagesColorKey_;

			if(!.isPrimary)
			{
				if(.parent.absoluteOrderMode)
					absolute = .absolute;
				else
					order = .order;
			}

			if(!isPrimary)
			{
				offScreen_ = !.offScreen_;
				resetLayerName();
				.resetLayerName();
			}

			visible = .visible;
			opacity = .opacity;
			type = .type;
			hitType = .hitType;
			hitThreshold = .hitThreshold;

			mapPrerenderedFont(.prerenderedFontStorage_) if .prerenderedFontStorage_ != '';

			super.setSize(.width, .height);

			super.left = (left_ = .left) + (offsetX_ = .offsetX);
			super.top = (top_ = .top) + (offsetY_ = .offsetY);

			// NOTE: assignImages() によって hasImage は既にアサインされています。
			setImagePos(.imageLeft, .imageTop) if hasImage;

			fixPositionToCenter = .fixPositionToCenter;

			conductor.assign(.conductor_) if .conductor_ !== void;
			colorCorrection.assign(.colorCorrection_) if .colorCorrection_ !== void;
		}

		resetMouseState();

		return this;
	}

	/**/
	function assignToMirror()
	{
		if(mirror_ === null)
			throw new GRuntimeError('ミラーレイヤにアサインしましたが、ミラーレイヤが設定されていません。');

		assign(mirror_);
	}

	/**/
	function exchange()
	{
		if(mirror_ === null)
			throw new GRuntimeError('ミラーレイヤと内容を入れ替えようとしましたが、ミラーレイヤが設定されていません。');

		with(mirror_)
		{
			offScreen_ <-> .offScreen_;
			name <-> .name;
		}
	}

	/**/
	function independence(mainImageCOW = true, provinceImageCOW = true)
	{
		independMainImage(mainImageCOW);
		independProvinceImage(provinceImageCOW);

		if(mirror_ !== null && isvalid mirror_ && mirror_.mirror_ === this)
		{
			mirror_.offScreen_ = false;
			mirror_.mirror_ = null;
			mirror_.resetLayerName();
		}

		offScreen_ = false;
		mirror_ = null;
		resetLayerName();
	}

	/**
	 * \brief このレイヤに対する何らかの描画を行う場合のターゲットを返す。
	 * \brief このメソッドで取得したターゲットが必要なくなった場合
	 * \brief 必ず、releaseRenderingTarget() を呼び出してください。
	 *
	 * \remarks このメソッドを呼び出すと this は強制的に非表示になります。
	 * \remarks 実際には表示されていないだけでプロパティの値は変化しません。
	 * \remarks （つまり、this.visible は通常通りの値を返します）
	 * \remarks この動作は this 上で onMouseEnter などのイベントが発生しない事を意味します。
	**/
	function getRenderingTarget()
	{
		var obj = workLayer_;

		if(obj === void)
		{
			obj = workLayer_ = window.getExclusiveWorkLayer(this.parent);
			obj.visible = true;
			internalVisible_ = super.visible;
			super.visible = false;
		}
		obj.add();
		obj.absolute = absolute if obj.absolute > absolute;
		return obj;
	}

	/**
	 * \brief getRenderingTarget() で取得したターゲットを解放します。
	 * \brief 引数の target は単なるチェック用ですが、
	 * \brief 正しく、this のターゲットを渡さない限り release はされません。
	**/
	function releaseRenderingTarget(target)
	{
		if(workLayer_ !== target)
			return;
		if(target.release() == 0)
		{
			workLayer_ = void;
			super.visible = internalVisible_;
			internalVisible_ = void;
		}
	}

	/**/
	function assignFont(src, decoration = false)
	{
		var dst = font;

		with(src)
		{
			dst.angle = .font.angle;
			dst.face = .font.face;
			dst.height = .font.height;
			dst.bold = .font.bold;
			dst.italic = .font.italic;
			mapPrerenderedFont(.prerenderedFontStorage_) if .prerenderedFontStorage_ != '';

			if(decoration)
			{
				dst.strikeout = .font.strikeout;
				dst.underline = .font.underline;
			}
		}

		return this;
	}

	/**/
	function assignFontToParent(decoration = false)
	{
		if(isPrimary)
			throw new GRuntimeError('プライマリレイヤに対して GLayer#assignFontToParent() を呼び出しました。');

		assignFont(parent, decoration);

		return this;
	}

	/**/
	function mapPrerenderedFont(storage)
	{
		font.mapPrerenderedFont(storage);
		prerenderedFontStorage_ = storage;
	}

	/**/
	function setDefaultCursor(cursor)
	{
		this.cursor = defaultCursor = cursor;
	}

	/**/
	function resetLayerName()
	{
		if(mirror_ === null)
			super.name = name_;
		else
			super.name = (offScreen_ ? @"[back] &name_;" : @"[fore] &name_;");

		return super.name;
	}

	/**/
	function setOffset(x, y)
	{
		super.left = left_ + (offsetX_ = x);
		super.top = top_ + (offsetY_ = y);
	}

	/**/
	function setPos(left, top, width, height)
	{
		left_ = left;
		top_ = top;

		// NOTE: left and top is local variables.
		left += offsetX;
		top += offsetY;

		super.setPos(...);
	}

	/**/
	function setCenterPos(x, y)
	{
		x = x - (width >> 1);
		y = y - (height >> 1);

		setPos(x, y);
	}

	/**/
	function setFixedPos(x, y)
	{
		(fixPositionToCenter ? setCenterPos : setPos)(x, y);
	}

	/**/
	function setSize(width, height)
	{
		var cx = centerX, cy = centerY;

		super.setSize(width, height);

		setCenterPos(cx, cy) if fixPositionToCenter;
	}

	/**/
	function setSizeToImageSize()
	{
		var cx = centerX, cy = centerY;
		var w = super.width, h = super.height;

		super.setSizeToImageSize(...);

		setCenterPos(cx, cy) if fixPositionToCenter;
	}

	/**/
	function flipLR()
	{
		flipLeftRight_ = !flipLeftRight_;

		return super.flipLR();
	}

	/**/
	function flipUD()
	{
		flipUpDown_ = !flipUpDown_;

		return super.flipUD();
	}

	/**/
	function show()
	{
		if(hideRunning_)
			cancelShowHide();

		visible = true;
		showRunning_ = true;

		beginShowEffect();

		return true;
	}

	/*! \brief 表示効果を開始します。
	 *
	 * \remarks 固有の表示効果を実装する場合はこれをオーバーライドしてください。
	 * \remarks 仕様上、派生先で基底クラスの同メソッドを呼び出すべきではありません。
	**/
	function beginShowEffect()
	{
		anotherCycle.uniqueAdd(showComplete);
	}

	/*! \brief 表示効果が完了した時に呼ばれます。
	 *
	 * \remarks show() 呼出し後、必ず呼ばれるという保証はありません。
	**/
	function showComplete()
	{
		showRunning_ = false;

		callHandler('onShowCompleted');
	}

	/**/
	function hide()
	{
		if(showRunning_)
			cancelShowHide();

		hideRunning_ = true;

		beginHideEffect();

		return false;
	}

	/*! \brief 非表示効果を開始します。
	 *
	 * \remarks 固有の非表示効果を実装する場合はこれをオーバーライドしてください。
	 * \remarks 仕様上、派生先で基底クラスの同メソッドを呼び出すべきではありません。
	**/
	function beginHideEffect()
	{
		anotherCycle.uniqueAdd(hideComplete);
	}

	/*! \brief 非表示効果が完了した時に呼ばれます。
	 *
	 * \remarks hide() 呼出し後、必ず呼ばれるという保証はありません。
	**/
	function hideComplete()
	{
		visible = false;
		hideRunning_ = false;

		callHandler('onHideCompleted');
	}

	/**/
	function cancelShowHide(drawFinalFrame = true)
	{
		if(showRunning_ || hideRunning_)
			onInterruptShowHide(drawFinalFrame);

		showRunning_ = false;
		hideRunning_ = false;
		anotherCycle.remove(hideComplete);
		anotherCycle.remove(showComplete);
	}

	/**/
	function beginTransition(name, withchildren = true, transsrc = null, options = %[])
	{
		stopTransition();

		inTransition_ = true;
		exchangeAfterTransition_ = +options.exchange; // NOTE: +void == 0 == false
		withChildrenTransition_ = withchildren;

		super.beginTransition(name, withchildren, transsrc, options);

		callHandler(
			'onBeginTransition',
			%[
				name : name, children : withchildren, src : transsrc, options : options
			]
		);
	}

	/**/
	function stopTransition()
	{
		if(inTransition_)
		{
			super.stopTransition();

			inTransition_ = false;
		}
	}

	/**/
	function resetMouseState()
	{
		mouseEnterToLeave_ = false;
		mouseDownToUp_ = false;
	}

	/**/
	function click(x, y, shift)
	{
		return false;
	}

	/**/
	function rclick(x, y, shift)
	{
		return false;
	}

	/**/
	function mclick(x, y, shift)
	{
		return false;
	}

	/**/
	function adjustColorKey(key)
	{
		if(key === void)
		{
			key = clNone;
		}
		else
		if(typeof key == "String")
		{
			if(key == 'adapt')
				key = clAdapt;
			else
			{
				if(key.length >= 7)
					key = +key;
				else
					key = +key + 0x3000000;
			}
		}

		return key;
	}

	/**
	 * str: 文字列を想定していますが、単項 + 演算子で数値化できるものであれば何でも構いません。
	 *
	 * あんまりまともに考えて作った仕様じゃないので何か漏れがあるかもめ。
	**/
	function stringTo(str)
	{
		// int ?
		if(typeof(str) === 'Integer')
			return str;

		if(str !== void)
		{
			// mode ?
			var types = imageTagLayerType;
			if(types[str] !== void)
				return types[str].type;

			// global variable ?
			if(typeof(global[str]) !== 'undefined')
				return global[str];
		}

		// instance ?
		switch(str)
		{
		case 'left':		return left;
		case 'top':			return top;
		case 'width':		return width;
		case 'height':		return height;
		case 'imageLeft':	return imageLeft;
		case 'imageTop':	return imageTop;
		case 'imageWidth':	return imageWidth;
		case 'imageHeight':	return imageHeight;
		case 'imageRight':	return imageWidth - width;
		case 'imageBottom':	return imageHeight - height;

		case 'clBlack':		return 0x000000;
		case 'clWhite':		return 0xFFFFFF;
		}

		return +str;
	}

	/**/
	function store(tick)
	{
		var dic = %[
			loadImagesStorage : loadImagesStorage_, loadImagesColorKey : loadImagesColorKey_, clearImagesColor : clearImagesColor_,
			visible : visible, opacity : opacity, hasImage : hasImage,
			type : type, hitType : hitType, hitThreshold : hitThreshold,
			left : left, top : top, width : width, height : height, offsetX : offsetX_, offsetY : offsetY_,
			flipLeftRight : flipLeftRight_, flipUpDown : flipUpDown_,
			imageLeft : imageLeft, imageTop : imageTop, imageWidth : imageWidth, imageHeight : imageHeight,
			prerenderedFontStorage : prerenderedFontStorage_,
			fixPositionToCenter : fixPositionToCenter,
			partialImages : partialImages_,
			shaker : shaker.store()
		];

		dic.conductor = conductor_.store(tick) if conductor_ !== void;
		dic.colorCorrection = colorCorrection_.store(tick) if colorCorrection_ !== void;

		if(!isPrimary)
		{
			if(parent.absoluteOrderMode)
				dic.absolute = absolute;
			else
				dic.order = order;
		}

		return dic;
	}

	/**/
	function restore(dic, tick)
	{
		with(dic)
		{
			if((hasImage = .hasImage) == true)
			{
				loadImages(.loadImagesStorage, .loadImagesColorKey) if .loadImagesStorage !== void;

				flipLR() if .flipLeftRight;
				flipUD() if .flipUpDown;

				if(.loadImagesStorage === void)
				{
					setImageSize(.imageWidth, .imageHeight);
					setSize(.width, .height);
					clearImages(dic.clearImagesColor);
				}
				left = .left;
				top = .top;
				setOffset(.offsetX, .offsetY);
				setImagePos(.imageLeft, .imageTop);
			}
			else
			{
				loadImagesStorage_ = void;
				loadImagesColorKey_ = clNone;
				flipLeftRight_ = flipUpDown_ = false;
				setPos(.left, .top, .width, .height);
				setOffset(.offsetX, .offsetY);
			}

			if(!isPrimary)
			{
				if(.absolute !== void)
					absolute = .absolute;
				else
				if(.order !== void)
					order = .order;
			}
			visible = .visible;
			opacity = .opacity;
			type = .type;
			hitType = .hitType;
			hitThreshold = .hitThreshold;

			mapPrerenderedFont(.prerenderedFontStorage_) if .prerenderedFontStorage != '';

			fixPositionToCenter = .fixPositionToCenter;

			partialImages_.clear();
			for(var i = 0; i < .partialImages.count; i++)
			{
				var pi = .partialImages[i];
				switch(pi.name)
				{
				case 'loadPartialImage':
					loadPartialImage(pi.storage, pi.key, pi.destX, pi.destY, pi.srcX, pi.srcY, pi.srcW, pi.srcH, pi.mode, pi.opacity);
					break;
				case 'drawReconstructibleText':
					drawReconstructibleText(
						pi.x, pi.y, pi.text,
						pi.vertical,
						pi.face, pi.angle, pi.size, pi.color,
						pi.italic, pi.bold, pi.shadow, pi.edge, pi.shadowColor, pi.edgeColor
					);
					break;
				}
			}

			conductor.restore(dic.conductor, tick) if dic.conductor !== void;
			colorCorrection.restore(dic.colorCorrection, tick) if dic.colorCorrection !== void;
			shaker.restore(dic.shaker, tick) if dic.shaker !== void;

			// 色補正適応
			colorCorrection.apply();
		}

		resetMouseState();
	}

	/**/
	function onInterruptShowHide(drawFinalFrame)
	{
	}

	/**/
	function onTransitionCompleted(dest, src)
	{
		super.onTransitionCompleted(dest, src);

		inTransition_ = false;

		callHandler(
			'onTransitionCompleted',
			%[
				dest : dest, src : src, children : withChildrenTransition_, exchange : exchangeAfterTransition_
			]
		);
	}

	/**/
	function onMouseEnter()
	{
		super.onMouseEnter(...);

		mouseEnterToLeave_ = true;
	}

	/**/
	function onMouseLeave()
	{
		super.onMouseLeave(...);

		mouseEnterToLeave_ = false;
	}

	/**/
	function onMouseDown(x, y, button, shift)
	{
		super.onMouseDown(...);

		mouseDownToUp_ = true;
	}

	/**/
	function onMouseUp(x, y, button, shift)
	{
		super.onMouseUp(...);

		mouseDownToUp_ = false;

		if(cursorOnLayer && mouseEnterToLeave_)
		{
			switch(button)
			{
			case mbLeft:	click(x, y, shift); break;
			case mbRight:	rclick(x, y, shift); break;
			case mbMiddle:	mclick(x, y, shift); break;
			}
		}
	}

	/**/
	function onNodeDisabled()
	{
		resetMouseState();

		super.onNodeDisabled();
	}

	property family
	{
		getter		{ return family_ === void ? (family_ = createFamily(this)) : family_; }
	}

	property shaker
	{
		getter		{ return shaker_ === void ? (shaker_ = createShaker(this)) : shaker_; }
	}

	property splineUsed
	{
		setter(x)	{ splineUsed_ = x; invalidate mover_ if mover_ !== void; mover_ = void; }
		getter		{ return splineUsed_; }
	}

	property mover
	{
		getter		{ return mover_ === void ? (mover_ = (splineUsed ? createSplineMover(this) : createMover(this))) : mover_; }
	}

	property conductor
	{
		getter		{ return conductor_ === void ? (conductor_ = createConductor(window, this)) : conductor_; }
	}

	property colorCorrection
	{
		getter		{ return colorCorrection_ === void ? (colorCorrection_ = createColorCorrection(this)) : colorCorrection_; }
	}

	property mirror
	{
		getter		{ return mirror_; }
	}

	property offScreen
	{
		getter		{ return offScreen_; }
	}

	property name
	{
		setter(x)	{ name_ = x; resetLayerName(); }
		getter		{ return name_; }
	}

	property acctualName
	{
		getter		{ return super.name; }
	}

	property imageLoaded
	{
		getter		{ return loadImagesStorage_ === void ? false : true; }
	}

	property loadImagesStorage
	{
		getter		{ return loadImagesStorage_; }
	}

	property loadImagesColorKey
	{
		getter		{ return loadImagesColorKey_; }
	}

	property visible
	{
		setter(x)	{ (workLayer_ === void ? super.visible : internalVisible_) = x; }
		getter		{ return (workLayer_ === void ? super.visible : internalVisible_); }
	}

	property offsetX
	{
		setter(x)	{ super.left = left_ + (offsetX_ = x); }
		getter		{ return offsetX_; }
	}

	property offsetY
	{
		setter(x)	{ super.top = top_ + (offsetY_ = x); }
		getter		{ return offsetY_; }
	}

	property left
	{
		setter(x)	{ super.left = (left_ = x) + offsetX_; }
		getter		{ return left_; }
	}

	property top
	{
		setter(x)	{ super.top = (top_ = x) + offsetY_; }
		getter		{ return top_; }
	}

	property flipLeftRight
	{
		getter		{ return flipLeftRight_; }
	}

	property flipUpDown
	{
		getter		{ return flipUpDown_; }
	}


	property right
	{
		setter(x)	{ this.left = x - width; }
		getter		{ return left_ + width; }
	}

	property bottom
	{
		setter(x)	{ this.top = x - height; }
		getter		{ return top_ + height; }
	}

	property centerX
	{
		setter(x)	{ this.left = (x - (width >> 1)); }
		getter		{ return left_ + (width >> 1); }
	}

	property centerY
	{
		setter(x)	{ this.top = (x - (height >> 1)); }
		getter		{ return top_ + (height >> 1); }
	}

	property fixedX
	{
		setter(x)	{ (fixPositionToCenter ? centerX : left) = x; }
		getter		{ return fixPositionToCenter ? centerX : left_; }
	}

	property fixedY
	{
		setter(x)	{ (fixPositionToCenter ? centerY : top) = x; }
		getter		{ return fixPositionToCenter ? centerY : top_; }
	}

	property showRunning
	{
		getter		{ return showRunning_; }
	}

	property hideRunning
	{
		getter		{ return hideRunning_; }
	}

	property inTransition
	{
		getter		{ return inTransition_; }
	}

	property cursorOnLayer
	{
		getter		{ var x = cursorX, y = cursorY; return ((x >= 0 && x <= width && y >= 0 && y <= height) ? true : false); }
	}

	property rollover
	{
		getter		{ return visible && mouseEnterToLeave_ && cursorOnLayer && window.mouseCursorState == mcsVisible; }
	}

	property pushed
	{
		getter		{ return mouseDownToUp_ && cursorOnLayer; }
	}
}
